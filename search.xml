<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>常见的 web 攻击方式</title>
      <link href="/2019/11/12/web-safety/"/>
      <url>/2019/11/12/web-safety/</url>
      
        <content type="html"><![CDATA[<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><blockquote><p>SQL 注入（SQLi）是一种注入攻击，，可以执行恶意 SQL 语句。它通过将任意 SQL 代码插入数据库查询，使攻击者能够完全控制 Web 应用程序后面的数据库服务器。</p></blockquote><a id="more"></a><p>犯罪分子可能会利用它来未经授权访问用户的敏感数据：客户信息，个人数据，商业机密，知识产权等。SQL 注入攻击是最古老，最流行，最危险的 Web 应用程序漏洞之一。</p><p><em>如何防止 SQL 注入攻击？</em></p><ul><li><p>不要使用动态 SQL<br>避免将用户提供的输入直接放入 SQL 语句中；最好使用准备好的语句和参数化查询，这样更安全。</p></li><li><p>不要将敏感数据保留在纯文本中<br>加密存储在数据库中的私有/机密数据；这样可以提供了另一级保护，以防攻击者成功地排出敏感数据。</p></li><li><p>限制数据库权限和特权<br>将数据库用户的功能设置为最低要求；这将限制攻击者在设法获取访问权限时可以执行的操作。</p></li><li><p>避免直接向用户显示数据库错误<br>攻击者可以使用这些错误消息来获取有关数据库的信息。</p></li><li><p>对访问数据库的 Web 应用程序使用 Web 应用程序防火墙（WAF）<br>这为面向 Web 的应用程序提供了保护，它可以帮助识别 SQL 注入尝试；根据设置，它还可以帮助防止 SQL 注入尝试到达应用程序（以及数据库）。</p></li><li><p>定期测试与数据库交互的 Web 应用程序<br>这样做可以帮助捕获可能允许 SQL 注入的新错误或回归。</p></li><li><p>将数据库更新为最新的可用修补程序</p></li></ul><p>原文：<a href="https://www.php.cn/mysql-tutorials-416424.html" target="_blank" rel="noopener">什么是 SQL 注入？如何防止 SQL 注入攻击？</a></p><p>比如 node 博客里使用 mysql.escape()来防止注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">  select username, realname from users where username=<span class="subst">$&#123;mysql.<span class="built_in">escape</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">    username</span></span></span><br><span class="line"><span class="string"><span class="subst">  )&#125;</span> and password=<span class="subst">$&#123;mysql.<span class="built_in">escape</span>(password)&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote><p>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本（CSS 代码、JavaScript 代码等），用户浏览网页时在用户浏览器中执行恶意脚本的一种攻击方式。如盗取用户 cookie，破坏页面结构、重定向到其他网站等。</p></blockquote><p>防范 XSS（永远不要相信用户的输入，必须对输入的数据作过滤处理）主要有两方面：</p><ul><li>消毒：对危险字符进行转义</li><li>HttpOnly：防范 XSS 攻击者窃取 Cookie 数据</li></ul><p>比如 node 博客里：新建文章的时候，标题里输入<code>&lt;script&gt;alert(&#39;我是一段js代码&#39;)&lt;/script&gt;</code>，然后点击提交，就会直接弹出来。</p><p>node 使用 xss：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = xss(blogData.title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// title</span></span><br><span class="line"><span class="comment">// &amp;lt;script&amp;gt;alert('我是一段js代码')&amp;lt;/script&amp;gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h3><blockquote><p>CSRF 攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。</p></blockquote><p>这里先说一下，http 是无状态的。服务器端和浏览器端的身份判断一般是通过 cookie。 后端会根据请求者传递的 cookie 信息判断请求者的身份。 攻击者的请求只要是带上了目标用户的 cookie，就可以合法请求。</p><ul><li><p>跨站：<br>请求来源很可能来自其他网站，也有可能来自本站</p></li><li><p>伪造：<br>请求并非用户的意愿</p></li><li><p>实现：<br>利用跨域标签 img iframe 等在 b 网站发送往 a 网站 get 请求，会带上 a 网站的 cookie，由此可见对于数据修改的请求最好不要用 get。</p><p>如果你在 a 站登录了，又访问了恶意网站 b，而 b 上面有一个恶意 img 标签的 get 请求，那你的数据可能就被删除了。 而跨域的 ajax 请求因为同源策略，不会带上 cookie，但是也能请求到结果，后端会处理这个请求，不过因为没有携带 cookie 信息，后端拿 不到登录状态，很多操作不会成功。跨域请求的结果也会发到客户端，不过由于同源策略的限制，浏览器读取不到这个响应结果。</p><p>伪造 form 表单提交。那么，post 请求就安全了吗？form 表单是跨域的。并且可以提交 post 请求。我们在 b 网站伪造一个 form 表单自动提交到 a 网站。</p></li><li><p>预防：<br>最好的办法是带 token，任何请求都带上 token，这样伪站可以发请求，但是无法拿到 token，后端收到的就不带 token 就可以判定非法了。</p></li></ul><p>原文：<a href="https://blog.csdn.net/liusaint1992/article/details/80865350" target="_blank" rel="noopener">常见的 web 攻击方式及预防</a></p><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><ul><li>文档：<a href="nodejs.cn/api/crypto.html">crypto（加密）</a></li></ul><p>crypto 模块提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">"crypto"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="keyword">const</span> hash = crypto</span><br><span class="line">  .createHmac(<span class="string">"sha256"</span>, secret)</span><br><span class="line">  .update(<span class="string">"I love cupcakes"</span>)</span><br><span class="line">  .digest(<span class="string">"hex"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash);</span><br><span class="line"><span class="comment">// 打印:</span></span><br><span class="line"><span class="comment">//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e</span></span><br></pre></td></tr></table></figure><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>md5：不是一种加密算法，是用来做文件校验的</p><p>作用：让大容量信息在数字签名软件签署私人秘钥前被”压缩”成一种保密格式，也就是把一个任意长度的字节串变换成一定长度的十六进制数字串（32个字符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">'WJiol_8776#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// md5 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHash(<span class="string">'md5'</span>).update(content).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genPassword</span>(<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5(<span class="string">`password=<span class="subst">$&#123;password&#125;</span>&amp;key=<span class="subst">$&#123;SECRET_KEY&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(genPassword(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment">// 4d4994bde299f6168c65f24c852897b7</span></span><br></pre></td></tr></table></figure><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>进一步提升MD5加密安全性：是一个”秘钥”，对明文进行加密，并做”两次散列”，但使用它得到的还是32个字符</p><p>利用哈希算法，以一个秘钥和一个信息为输入，生成一个消息摘要作为输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">'WJiol_8776#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hmac 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hmac</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHmac(<span class="string">'md5'</span>, SECRET_KEY).update(content).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hamc: '</span>, hmac(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment">// 7d37b577bcd2a492820846e475b933f9</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://cloud.tencent.com/developer/information/sql%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">sql 攻击</a></li><li><a href="https://cloud.tencent.com/developer/article/1455178" target="_blank" rel="noopener">SQL 注入和 XSS 攻击</a></li><li><a href="https://www.php.cn/mysql-tutorials-416424.html" target="_blank" rel="noopener">什么是 SQL 注入？如何防止 SQL 注入攻击？</a></li><li><a href="https://cloud.tencent.com/developer/article/1198977" target="_blank" rel="noopener">什么是 XSS 攻击？什么是 SQL 注入攻击？什么是 CSRF 攻击？</a></li><li><a href="https://blog.csdn.net/qq_41033290/article/details/91381962" target="_blank" rel="noopener">如何预防 SQL 注入和 XSS 攻击</a> - 代码讲解更直观</li><li><a href="http://www.sosout.com/2018/09/05/cryptojs-tutorial.html" target="_blank" rel="noopener">前端加密 JS 库–CryptoJS 使用指南 </a></li><li><a href="https://www.jianshu.com/p/92195252c2e0" target="_blank" rel="noopener">nodeJS：MD5加密</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当复制一个对象的副本所导致的“Object大案”</title>
      <link href="/2019/10/05/js-object/"/>
      <url>/2019/10/05/js-object/</url>
      
        <content type="html"><![CDATA[<blockquote><p>用 forEach 来复制一个对象的副本<br><a id="more"></a></p></blockquote><h2 id="用-forEach-来复制一个对象的副本"><a href="#用-forEach-来复制一个对象的副本" class="headerlink" title="用 forEach 来复制一个对象的副本"></a>用 forEach 来复制一个对象的副本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象复制函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyObj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> copyObj2 = copy(copyObj1);</span><br><span class="line"><span class="built_in">console</span>.log(copyObj2); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj2 === copyObj1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><blockquote><p><code>Object.create(proto[, propertiesObject])</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></p></blockquote><h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h2><h2 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h2><h2 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h2><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__</span></span><br><span class="line">  <span class="comment">// Object.getPrototypeOf(object)方法返回指定对象的原型（内部[[Prototype]]属性的值</span></span><br><span class="line">  <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">  <span class="comment">// Object.getOwnPropertyNames(obj)方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组</span></span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Object.getOwnPropertyDescriptor(obj, prop)方法返回指定对象上一个自有属性对应的属性描述符。</span></span><br><span class="line">    <span class="comment">// （自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</span></span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="comment">// Object.defineProperty(obj, prop, descriptor)方法会直接在一个对象上定义一个新属性，</span></span><br><span class="line">    <span class="comment">// 或者修改一个对象的现有属性， 并返回这个对象</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">Array.prototype.forEach() 是如何使用 ECMAScript 5 Object.* 元属性（meta property ）函数工作</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">Array.prototype.some()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">Array.prototype.every()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object.getOwnPropertyDescriptor()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noopener">Object.getOwnPropertyNames()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf" target="_blank" rel="noopener">Object.getPrototypeOf()</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 提交的正确姿势：Commit message 编写指南</title>
      <link href="/2019/09/26/git-commit/"/>
      <url>/2019/09/26/git-commit/</url>
      
        <content type="html"><![CDATA[<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）</p><ul><li>feat：新功能（feature）</li><li>fix：修补 bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动<a id="more"></a></li></ul><h3 id="提交信息规范"><a href="#提交信息规范" class="headerlink" title="提交信息规范"></a>提交信息规范</h3><p>我们对项目的 git 提交信息格式进行统一格式约定，每条提交信息由 <code>type</code>+<code>subject</code> 组成，这将提升项目日志的可读性。</p><ul><li><code>type</code> 用于表述此次提交信息的意义，首写字母大写，包括但不局限于如下类型：<ul><li><code>Build</code>：基础构建系统或依赖库的变化</li><li><code>Ci</code>：CI 构建系统及其脚本变化</li><li><code>Docs</code>：文档内容变化</li><li><code>Feat</code>：新功能</li><li><code>Fix</code>：Bug 修复</li><li><code>Perf</code>：性能优化</li><li><code>Refactor</code>：重构（即不是新增功能，也不是修改 Bug 的代码变动）</li><li><code>Style</code>：格式（不影响代码运行的变动）</li><li><code>Revert</code>：代码回滚</li><li><code>Release</code>：版本发布</li></ul></li><li><code>subject</code> 用于简要描述修改变更的内容，如 <code>Update code highlighting in readme.md</code>。<ul><li>句尾不要使用符号。</li><li>使用现在时、祈使句语气。</li></ul></li></ul><h3 id="标签规范"><a href="#标签规范" class="headerlink" title="标签规范"></a>标签规范</h3><p>为了方便维护人员和用户能够快速找到他们想要查看的问题，我们使用“标签”功能对 Pull requests 和 Issues 进行分类。</p><p>如果您不确定某个标签的含义，或者不知道将哪些标签应用于 PR 或 issue，千万别错过这个。</p><p>Issue 的标签：</p><ul><li>类型<ul><li><code>Bug</code>: 检测到需要进行确认的 Bug</li><li><code>Feature Request</code>: 提出了新功能请求的 Issue</li><li><code>Question</code>: 提出疑问的 Issue</li><li><code>Meta</code>: 表明使用条款变更的 Issue</li><li><code>Support</code>: 被标记为支持请求的 Issue</li><li><code>Polls</code>: 发起投票的 Issue</li></ul></li><li>结果<ul><li><code>Duplicate</code>: 重复提及的 Issue</li><li><code>Irrelevant</code>: 与 NexT 主题无关的 Issue</li><li><code>Expected Behavior</code>: 与预期行为相符的 Issue</li><li><code>Need More Info</code>: 需要更多信息的 Issue</li><li><code>Need Verify</code>: 需要开发人员或用户确认 Bug 或解决方法的 Issue</li><li><code>Verified</code>: 已经被确认的 Issue</li><li><code>Can&#39;t Reproduce</code>: 无法复现的 Issue</li><li><code>Solved</code>: 已经解决的 Issue</li><li><code>Stale</code>: 由于长期无人回应被封存的 Issue</li></ul></li></ul><p>Pull Request 的标签：</p><ul><li><code>Breaking Change</code>: 产生重大变动的 Pull Request</li><li><code>Bug Fix</code>: 修复相关 Bug 的 Pull Request</li><li><code>New Feature</code>: 添加了新功能的 Pull Request</li><li><code>Feature</code>: 为现有功能提供选项或加成的 Pull Request</li><li><code>i18n</code>: 更新了翻译的 Pull Request</li><li><code>Work in Progress</code>: 仍在进行改动和完善的 Pull Request</li><li><code>Skip Release</code>: 无需在 Release Note 中展现的 Pull Request</li></ul><p>两者兼有：</p><ul><li><code>Roadmap</code>: 与 NexT 主题发展相关的 Issue 或者 Pull Request</li><li><code>Help Wanted</code>: 需要帮助的 Issue 或者 Pull Request</li><li><code>Discussion</code>: 需要进行讨论的 Issue 或者 Pull Request</li><li><code>Improvement</code>: 需要改进的 Issue 或者改进了 NexT 主题的 Pull Request</li><li><code>Performance</code>: 提出性能问题的 Issue 或者提高了 NexT 主题性能的 Pull Request</li><li><code>Hexo</code>: 与 Hexo 和 Hexo 插件相关的 Issue 或者 Pull Request</li><li><code>Template Engine</code>: 与模版引擎相关的 Issue 或者 Pull Request</li><li><code>CSS</code>: 与 NexT 主题 CSS 文件相关的 Issue 或者 Pull Request</li><li><code>Fonts</code>: 与 NexT 主题字体相关的 Issue 或者 Pull Request</li><li><code>PJAX</code>: 与 PJAX 相关的 Issue 或者 Pull Request</li><li><code>3rd Party Plugin</code>: 与第三方插件和服务相关的 Issue 或者 Pull Request</li><li><code>Docs</code>: 与文档说明相关的 Issue 或者 Pull Request</li><li><code>Configurations</code>: 与 NexT 主题设置相关的 Issue 或者 Pull Request</li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.cnblogs.com/daysme/p/7722474.html" target="_blank" rel="noopener">Git 提交的正确姿势：Commit message 编写指南</a></li><li><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/CONTRIBUTING.md" target="_blank" rel="noopener">Next 主题贡献规范</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化</title>
      <link href="/2019/09/06/web-speed/"/>
      <url>/2019/09/06/web-speed/</url>
      
        <content type="html"><![CDATA[<h2 id="网络传输性能优化"><a href="#网络传输性能优化" class="headerlink" title="网络传输性能优化"></a>网络传输性能优化</h2><blockquote><p>重定向 → 拉取缓存 →DNS 查询 → 建立 TCP 链接 → 发起请求 → 接收响应 → 处理 HTML 元素 → 元素加载完成</p></blockquote><a id="more"></a><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>缓存一般分为强缓存和协商缓存，主要区别是：使用本地缓存的时候，是否需要向服务器验证本地缓存是否依旧有效。</p></blockquote><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>主要通过 http 请求头中的 Cache-Control 和 Expire 两个字段控制</p><p>一般，我们会设置 Cache-Control 的值为“public, max-age=xxx”，表示在 xxx 秒内再次访问该资源，均使用本地的缓存，不再向服务器发起请求。</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>每次都向服务器验证一下缓存的有效性</p><h4 id="前端缓存方案"><a href="#前端缓存方案" class="headerlink" title="前端缓存方案"></a>前端缓存方案</h4><ul><li>HTML：使用协商缓存</li><li>CSS JS Image：使用强缓存，文件名带上 hash 值</li></ul><p>浏览器默认的缓存是放在内存内的，但我们知道，内存里的缓存会因为进程的结束或者说浏览器的关闭而被清除，而存在硬盘里的缓存才能够被长期保留下去。很多时候，我们在 network 面板中各请求的 size 项里，会看到两种不同的状态：from memory cache 和 from disk cache，前者指缓存来自内存，后者指缓存来自硬盘。而控制缓存存放位置的，不是别人，就是我们在服务器上设置的 Etag 字段。在浏览器接收到服务器响应后，会检测响应头部（Header），如果有 Etag 字段，那么浏览器就会将本次缓存写入硬盘中。</p><h3 id="资源打包压缩"><a href="#资源打包压缩" class="headerlink" title="资源打包压缩"></a>资源打包压缩</h3><blockquote><p>网络性能优化措施归结为三大方面：减少请求数、减小请求资源体积、提升网络传输速率</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp grunt webpack parcel</span><br></pre></td></tr></table></figure><h3 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3><ul><li>不要在 HTML 里缩放图像</li><li>使用雪碧图（CSS Sprite）- <code>webpack-spritesmith</code></li><li>使用字体图标（iconfont）- icomoon</li><li>使用 WebP - 图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间</li></ul><h3 id="网络传输性能检测工具"><a href="#网络传输性能检测工具" class="headerlink" title="网络传输性能检测工具"></a>网络传输性能检测工具</h3><ul><li><code>Page Speed | PageSpeed Insights</code></li></ul><h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><h2 id="页面渲染性能优化"><a href="#页面渲染性能优化" class="headerlink" title="页面渲染性能优化"></a>页面渲染性能优化</h2><h3 id="浏览器渲染过程（webkit）"><a href="#浏览器渲染过程（webkit）" class="headerlink" title="浏览器渲染过程（webkit）"></a>浏览器渲染过程（webkit）</h3><ul><li>《Webkit 技术内幕》</li></ul><blockquote><p>浏览器的解释器，是包括在渲染引擎内的，我们常说的 Chrome（现在使用的是 Blink 引擎）和 Safari 使用的 Webkit 引擎，Firefox 使用的 Gecko 引擎，指的就是渲染引擎。而在渲染引擎内，还包括着我们的 HTML 解释器（渲染时用于构造 DOM 树）、CSS 解释器（渲染时用于合成 CSS 规则）还有我们的 JS 解释器。不过后来，由于 JS 的使用越来越重要，工作越来越繁杂，所以 JS 解释器也渐渐独立出来，成为了单独的 JS 引擎，就像众所周知的 V8 引擎，我们经常接触的 Node.js 也是用的它。</p></blockquote><h3 id="DOM-渲染层与-GPU-硬件加速"><a href="#DOM-渲染层与-GPU-硬件加速" class="headerlink" title="DOM 渲染层与 GPU 硬件加速"></a>DOM 渲染层与 GPU 硬件加速</h3><ul><li>① 浏览器会先获取 DOM 树并依据样式将其分割成多个独立的渲染层</li><li>②CPU 将每个层绘制进绘图中</li><li>③ 将位图作为纹理上传至 GPU（显卡）绘制</li><li>④GPU 将所有的渲染层缓存（如果下次上传的渲染层没有发生变化，GPU 就不需要对其进行重绘）并复合多个渲染层最终形成我们的图像</li></ul><h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><p>不论是重排还是重绘，都会阻塞浏览器。要提高网页性能，就要降低重排和重绘的频率和成本，近可能少地触发重新渲染。</p><p>重排是由 CPU 处理的，而重绘是由 GPU 处理的，CPU 的处理效率远不及 GPU，并且重排一定会引发重绘，而重绘不一定会引发重排。所以在性能优化工作中，我们更应当着重减少重排的发生。</p><h4 id="重排-reflow"><a href="#重排-reflow" class="headerlink" title="重排 reflow"></a>重排 reflow</h4><p>渲染层内的元素布局发生修改，都会导致页面重写排列。</p><p>比如：窗口的尺寸发生变化、删除或添加 DOM 元素；修改了影响元素盒子大小的 css 属性（width height padding…）</p><h4 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘 repaint"></a>重绘 repaint</h4><p>绘制，所有对元素的视觉表现属性的修改，都会引起重绘。</p><h3 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h3><ul><li>CSS 属性读写分离</li><li>通过切换 class 或者 style.csstext 属性去批量操作元素样式</li><li>DOM 元素离线更新</li><li>将没用的元素设为不可见：visibility: hidden，减少重绘的压力</li><li>压缩 DOM 的深度：少用 DOM 完成页面样式，多使用伪元素或者 box-shadow 取代。</li><li>图片在渲染前指定大小：因为 img 元素是内联元素，所以在加载图片后会改变宽高，严重的情况会导致整个页面重排，所以最好在渲染前就指定其大小，或者让其脱离文档流。</li><li>对页面中可能发生大量重排重绘的元素单独触发渲染层，使用 GPU 分担 CPU 压力。（慎重）</li></ul><h2 id="JS-阻塞性能"><a href="#JS-阻塞性能" class="headerlink" title="JS 阻塞性能"></a>JS 阻塞性能</h2><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="Node-js-处理-IO-密集型请求"><a href="#Node-js-处理-IO-密集型请求" class="headerlink" title="Node.js 处理 IO 密集型请求"></a>Node.js 处理 IO 密集型请求</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513044&amp;idx=1&amp;sn=9b8526e9d641b970ee5ddac02dae3c57&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Node.js : 我只需要一个店小二</a></li></ul><p>node 的核心是事件驱动，通过 loop 去异步处理用户请求，相对于传统的后端服务，他们都是将用户的每个请求分配到异步队列中进行处理。</p><p>事件驱动的优势：在高并发 IO 时，不会造成堵塞。</p><p>Frond-End(Browser) <- nodejs="" -=""> Back-End(Java Server)</-></p><h3 id="pm2-实现-Node-js“多线程”"><a href="#pm2-实现-Node-js“多线程”" class="headerlink" title="pm2 实现 Node.js“多线程”"></a>pm2 实现 Node.js“多线程”</h3><ul><li><a href="https://www.zhihu.com/question/19653241/answer/15993549" target="_blank" rel="noopener">使用 Node.js 的优势和劣势都有哪些？</a></li></ul><p>pm2。这是它的官网：pm2.keymetrics.io/</p><p>它是一款 node.js 进程管理器，具体的功能，就是能在你的计算机里的每一个内核都启动一个 node.js 服务。</p><p>也就是说如果你的电脑或者服务器是多核处理器（现在也少见单核了吧），它就能启动多个 node.js 服务，并且它能够自动控制负载均衡，会自动将用户的请求分发至压力小的服务进程上处理。</p><h3 id="nginx-搭建反向代理"><a href="#nginx-搭建反向代理" class="headerlink" title="nginx 搭建反向代理"></a>nginx 搭建反向代理</h3><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://juejin.im/post/5c136bd16fb9a049d37efc47" target="_blank" rel="noopener">前端缓存最佳实践</a></li><li><a href="https://juejin.im/post/5b6fa8c86fb9a0099910ac91" target="_blank" rel="noopener">网站性能优化实战——从 12.67s 到 1.06s 的故事</a></li><li><a href="https://juejin.im/post/5ae081aaf265da0b767d263a" target="_blank" rel="noopener">你应该知道的前端——缓存</a></li><li>《大型网站性能监测、分析与优化》</li><li><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">【原】雅虎前端优化的 35 条军规</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS如何使用 tree 生成目录结构</title>
      <link href="/2019/09/02/tool-tree/"/>
      <url>/2019/09/02/tool-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h2><p><a href="https://brew.sh/" target="_blank" rel="noopener">homebrew官网</a></p><p><a href="[https://www.jianshu.com/p/de6f1d2d37bf](https://www.jianshu.com/p/de6f1d2d37bf">Homebrew介绍和使用</a></p><a id="more"></a><p>根据官网的方法安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p><p>比如我的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==&gt; This script will install:</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/brew</span><br><span class="line">/usr/<span class="built_in">local</span>/share/doc/homebrew</span><br><span class="line">/usr/<span class="built_in">local</span>/share/man/man1/brew.1</span><br><span class="line">/usr/<span class="built_in">local</span>/share/zsh/site-functions/_brew</span><br><span class="line">/usr/<span class="built_in">local</span>/etc/bash_completion.d/brew</span><br><span class="line">/usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line"></span><br><span class="line">Press RETURN to <span class="built_in">continue</span> or any other key to abort</span><br></pre></td></tr></table></figure></p><p>一路按照提示操作即可，不出意外的话，就安装成功了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew -v</span><br><span class="line">Homebrew 2.1.9</span><br><span class="line">Homebrew/homebrew-core (git revision c8ff; last commit 2019-08-01)</span><br><span class="line">Homebrew/homebrew-cask (git revision 04bff; last commit 2019-08-02)</span><br></pre></td></tr></table></figure></p><h2 id="Tree-安装"><a href="#Tree-安装" class="headerlink" title="Tree 安装"></a>Tree 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><p>常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">brew install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件夹下的所有文件</span></span><br><span class="line">tree -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示文件夹</span></span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示项目的层级，如三级</span></span><br><span class="line">tree -L 3  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤，如除node_modules文件</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">tree &gt; tree.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># Help</span></span><br><span class="line">tree --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p>最后，我的输出：<code>tree -I &quot;node_modules&quot; &gt; tree.md</code><br>查看 <code>tree.md</code> 的内容如下：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   ├── font-awesome</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── FontAwesome.otf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.eot</span><br><span class="line">│   │   │   ├── fontawesome-webfont.svg</span><br><span class="line">│   │   │   ├── fontawesome-webfont.ttf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.woff</span><br><span class="line">│   │   │   └── fontawesome-webfont.woff2</span><br><span class="line">│   │   └── scss</span><br><span class="line">│   │       ├── _animated.scss</span><br><span class="line">│   │       ├── _bordered-pulled.scss</span><br><span class="line">│   │       ├── _core.scss</span><br><span class="line">│   │       ├── _fixed-width.scss</span><br><span class="line">│   │       ├── _icons.scss</span><br><span class="line">│   │       ├── _larger.scss</span><br><span class="line">│   │       ├── _list.scss</span><br><span class="line">│   │       ├── _mixins.scss</span><br><span class="line">│   │       ├── _path.scss</span><br><span class="line">│   │       ├── _rotated-flipped.scss</span><br><span class="line">│   │       ├── _screen-reader.scss</span><br><span class="line">│   │       ├── _stacked.scss</span><br><span class="line">│   │       ├── _variables.scss</span><br><span class="line">│   │       └── font-awesome.scss</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── index.jsx</span><br><span class="line">│   ├── react.png</span><br><span class="line">│   └── style.css</span><br><span class="line">├── tree.md</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line">5 directories, 31 files</span><br></pre></td></tr></table></figure></p><h2 id="tree命令行参数"><a href="#tree命令行参数" class="headerlink" title="tree命令行参数"></a>tree命令行参数</h2><table><thead><tr><th>命令行参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件和目录。</td></tr><tr><td>-A</td><td>使用ASNI绘图字符显示树状图而非以ASCII字符组合。</td></tr><tr><td>-C</td><td>在文件和目录清单加上色彩，便于区分各种类型。</td></tr><tr><td>-d</td><td>显示目录名称而非内容。</td></tr><tr><td>-D</td><td>列出文件或目录的更改时间。</td></tr><tr><td>-f</td><td>在每个文件或目录之前，显示完整的相对路径名称。</td></tr><tr><td>-F</td><td>在末尾追加描述性字符，如 ls -F</td></tr><tr><td>-g</td><td>列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</td></tr><tr><td>-i</td><td>不以阶梯状列出文件或目录名称。</td></tr><tr><td>-I</td><td>不显示符合范本样式的文件或目录名称。</td></tr><tr><td>-l</td><td>如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</td></tr><tr><td>-n</td><td>不在文件和目录清单加上色彩。</td></tr><tr><td>-N</td><td>直接列出文件和目录名称，包括控制字符。</td></tr><tr><td>-p</td><td>列出权限标示。</td></tr><tr><td>-P</td><td>只显示符合范本样式的文件或目录名称。</td></tr><tr><td>-q</td><td>用”?”号取代控制字符，列出文件和目录名称。</td></tr><tr><td>-s</td><td>列出文件或目录大小。</td></tr><tr><td>-t</td><td>用文件和目录的更改时间排序。</td></tr><tr><td>-u</td><td>列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</td></tr><tr><td>-x</td><td>将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/ayseeing/p/4097066.html" target="_blank" rel="noopener">mac tree命令</a></li><li><a href="https://blog.csdn.net/qq673318522/article/details/53713903" target="_blank" rel="noopener">Mac使用tree生成目录结构</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习 React 的一些记录日志</title>
      <link href="/2019/08/24/react-doc/"/>
      <url>/2019/08/24/react-doc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习 React 的一些记录日志<br><a id="more"></a></p></blockquote><h2 id="Video-Course"><a href="#Video-Course" class="headerlink" title="Video Course"></a>Video Course</h2><h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><ul><li><a href="https://www.imooc.com/learn/1045" target="_blank" rel="noopener">基于实例的 react16 傻瓜课程</a> — 用一系列有趣的、简洁明快的实例由浅入深的阐述了 React 的特色，概念和基本使用</li><li><a href="https://www.imooc.com/learn/1023" target="_blank" rel="noopener">react16.4 快速上手</a> — 通过 Todolist 功能的实现，给大家讲解了 React 组件间的通信方式</li></ul><h3 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h3><ul><li><a href="https://www.imooc.com/learn/1061" target="_blank" rel="noopener">react 16 实现订单列表及评价功能</a> — 介绍了从项目创建、到组件划分、再到组件及页面逻辑实现的开发流程</li><li><a href="https://www.imooc.com/learn/944" target="_blank" rel="noopener">react 组件</a> — 比较详细地讲解组件和生命周期</li></ul><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><ul><li><a href="https://www.imooc.com/learn/953" target="_blank" rel="noopener">react响应用户输入</a> — 学习如何让数据逻辑与 UI 的结合使用、react 的事件处理机制以及 react 对 DOM 模型的操作</li><li><a href="https://www.imooc.com/learn/971" target="_blank" rel="noopener">react知识点综合运用实例</a> — 综合实例操作</li><li><a href="https://www.imooc.com/learn/1075" target="_blank" rel="noopener">react高级教程之高阶组件</a> — 高阶组件的应用：代理和继承</li></ul><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><ul><li><a href="https://zh-hans.reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React 官方文档</a></li><li><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design of React</a> — antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</li><li><a href="https://pro.ant.design/docs/getting-started-cn" target="_blank" rel="noopener">Ant Design Pro</a> — 是一个企业级中后台前端/设计解决方案</li><li><a href="https://mobile.ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design Mobile of React</a> — 是 Ant Design 的移动规范的 React 实现，服务于蚂蚁及口碑无线业务</li><li><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack 官方文档</a></li><li><a href="https://typescript.bootcss.com/tutorials/react-&amp;-webpack.html" target="_blank" rel="noopener">React 与 webpack</a></li></ul><h2 id="Learning-Materials"><a href="#Learning-Materials" class="headerlink" title="Learning Materials"></a>Learning Materials</h2><ul><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/index.html" target="_blank" rel="noopener">《react 入门教程》</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">《react 入门实例教程》</a> — 阮一峰</li><li><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">《typescript 热门教程》</a></li><li><a href="https://zhuanlan.zhihu.com/p/23412169" target="_blank" rel="noopener">《6 周学习计划，攻克 javascript 难关(react/redux/es6 etc.)》</a></li></ul><h2 id="My-Learning"><a href="#My-Learning" class="headerlink" title="My Learning"></a>My Learning</h2><h3 id="入门学习-React-的几个例子"><a href="#入门学习-React-的几个例子" class="headerlink" title="入门学习 React 的几个例子"></a>入门学习 React 的几个例子</h3><blockquote><p><a href="https://github.com/yangtao2o/myreact/tree/master/demo" target="_blank" rel="noopener">Demo 地址，戳我</a></p></blockquote><ol><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/01/index.html" target="_blank" rel="noopener">ReactDOM.render()</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/02/index.html" target="_blank" rel="noopener">Use Array in JSX</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/03/index.html" target="_blank" rel="noopener">组件</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/04/index.html" target="_blank" rel="noopener">this.props.children</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/05/index.html" target="_blank" rel="noopener">PropTypes</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/06/index.html" target="_blank" rel="noopener">获取真实的 DOM 节点</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/07/index.html" target="_blank" rel="noopener">this.state</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/08/index.html" target="_blank" rel="noopener">表单</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/09/index.html" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">使用 Promise 获取 Github 的数据</a></li><li><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Todo List</a></li><li><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">井字棋（Tic Tac Toe）</a></li></ol><h3 id="Nextjs-—-配合-React-打造静态化和服务端渲染应用"><a href="#Nextjs-—-配合-React-打造静态化和服务端渲染应用" class="headerlink" title="Nextjs — 配合 React 打造静态化和服务端渲染应用"></a>Nextjs — 配合 React 打造静态化和服务端渲染应用</h3><p><strong><a href="https://github.com/yangtao2o/myreact/tree/master/nextjs/01-hello-next" target="_blank" rel="noopener">Nextjs</a></strong></p><ul><li>Demo1: 学习官方文档</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nextjs/01-hello-next</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="My-Project"><a href="#My-Project" class="headerlink" title="My Project"></a>My Project</h2><ul><li><a href="https://github.com/yangtao2o/myreact/tree/master/product/01-ttt" target="_blank" rel="noopener">学习「井字游戏」</a></li><li><a href="https://github.com/yangtao2o/myreact/tree/master/product/02-news-app" target="_blank" rel="noopener">学习体验 Ant Design of React</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门 Webpack@3 的配置过程</title>
      <link href="/2019/08/05/webpack-v3/"/>
      <url>/2019/08/05/webpack-v3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>入门 Webpack@3 的配置过程<br><a id="more"></a></p></blockquote><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><ul><li><a href="https://webpack.docschina.org/guides/" target="_blank" rel="noopener">webpack 指南</a></li><li><a href="https://www.jianshu.com/p/0e01ca947e50" target="_blank" rel="noopener">React 的 Webpack 配置</a></li></ul><p><em>PS：</em> 文章结尾有完整实例启动方法：<a href="https://github.com/yangtao2o/happymmall/tree/webpack%403-react" target="_blank" rel="noopener">Github地址</a></p><p>本次配置练习主要是针对 <code>webpack-v3</code>，切换分支至 <code>webpack@3-react</code> ，每一次 <code>Commits</code>，基本上对应着相应的文件配置，可以对照着瞅瞅。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h4 id="配置-Webpack"><a href="#配置-Webpack" class="headerlink" title="配置 Webpack"></a>配置 Webpack</h4><p>准备环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) ✗ node -v</span><br><span class="line">v11.13.0</span><br><span class="line">➜  happymmall git:(webpack@3-react) ✗ npm -v</span><br><span class="line">6.10.1</span><br><span class="line">➜  happymmall git:(webpack@3-react) ✗ git --version</span><br><span class="line">git version 2.17.2 (Apple Git-113)</span><br><span class="line">➜  happymmall git:(webpack@3-react) ✗ yarn -v</span><br><span class="line">1.17.3</span><br></pre></td></tr></table></figure><h5 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 <a href="https://yarn.bootcss.com/docs/install/#mac-stable" target="_blank" rel="noopener">yarn</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># homebrew 安装</span></span><br><span class="line">brew install yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm/cnpm 安装</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line">cnpm install yarn -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">➜  ~ yarn --version</span><br><span class="line">1.17.3</span><br></pre></td></tr></table></figure><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn init  <span class="comment"># 初始化</span></span><br><span class="line">yarn add [package]  <span class="comment"># 添加依赖包</span></span><br><span class="line">yarn add [package] --dev   <span class="comment"># 添加到 devDependencies</span></span><br><span class="line">yarn remove [package]  <span class="comment"># 删除依赖包</span></span><br><span class="line">yarn install   <span class="comment"># 安装所有依赖包</span></span><br></pre></td></tr></table></figure><h5 id="安装-webpack-3"><a href="#安装-webpack-3" class="headerlink" title="安装 webpack@3"></a>安装 webpack@3</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn add webpack@3.10.0 --dev</span><br></pre></td></tr></table></figure><p>根目录新建 <code>webpack.config.js</code>,并新建 <code>src/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"app.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello, world"</span>);</span><br></pre></td></tr></table></figure><p>运行：<code>node_modules/.bin/webpack</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) ✗ node_modules/.bin/webpack</span><br><span class="line">Hash: 62e68b9cc366c7b50ac6</span><br><span class="line">Version: webpack 3.10.0</span><br><span class="line">Time: 34ms</span><br><span class="line"> Asset    Size  Chunks             Chunk Names</span><br><span class="line">app.js  2.5 kB       0  [emitted]  main</span><br><span class="line">   [0] ./src/index.js 28 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><p>打开 <code>dist/app.js</code>，搜索 <code>Hello</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p>一个简单的文件就此打包成功，开心吧…</p><h4 id="配置-HMTL-模板"><a href="#配置-HMTL-模板" class="headerlink" title="配置 HMTL 模板"></a>配置 HMTL 模板</h4><p>文档：<a href="https://webpack.js.org/plugins/html-webpack-plugin/#root" target="_blank" rel="noopener">HtmlWebpackPlugin</a> 简化了 HTML 文件的创建，以便为你的 webpack 包提供服务。这对于在文件名中包含每次会随着编译而发生变化哈希的 webpack bundle 尤其有用。</p><p>安装 html-webpack-plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin@2.30.1 --dev</span><br></pre></td></tr></table></figure><p>新建：<code>src/index.html</code>, 并初始化一个 html 内容，然后配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"app.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着跑一下：<code>node_modules/.bin/webpack</code>，不出意外的话，dist 下会出现一个 index.html，打开查看就会发现，不仅有我们自己指定的内容，还把<code>app.js</code>也自动引入了，这波操作够可以。</p><h4 id="Babel-处理脚本"><a href="#Babel-处理脚本" class="headerlink" title="Babel 处理脚本"></a>Babel 处理脚本</h4><p>文档：<a href="https://www.webpackjs.com/loaders/babel-loader/" target="_blank" rel="noopener">babel-loader</a></p><p>安装 babel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader@7.1.2 babel-core@6.26.0 babel-preset-env@1.6.1 --dev</span><br></pre></td></tr></table></figure><p>设置 config 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules)/</span>, <span class="comment">// 忽略此文件</span></span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">"env"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>src/index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"people"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">27</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<code>node_modules/.bin/webpack</code>，然后再去<code>dist/app.js</code>，就会发现已经转译成功：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> People = <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  _classCallCheck(<span class="keyword">this</span>, People);</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"people"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Man = (<span class="function"><span class="keyword">function</span>(<span class="params">_People</span>) </span>&#123;</span><br><span class="line">  _inherits(Man, _People);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Man);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _this = _possibleConstructorReturn(</span><br><span class="line">      <span class="keyword">this</span>,</span><br><span class="line">      (Man.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(Man)).call(<span class="keyword">this</span>, name)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _this.age = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Man;</span><br><span class="line">&#125;)(People);</span><br></pre></td></tr></table></figure><h4 id="配置-React"><a href="#配置-React" class="headerlink" title="配置 React"></a>配置 React</h4><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-preset-react@6.24.1 --dev</span><br><span class="line">yarn add react@16.2.0 react-dom@16.2.0</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">"env"</span>, <span class="string">"react"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候的入口文件也需要更改下测试</span></span><br><span class="line">entry: <span class="string">'./src/index.jsx'</span>,</span><br></pre></td></tr></table></figure><p>然后修改 <code>src/index.js</code> 为 <code>src/index.jsx</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, React.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p>运行：<code>node_modules/.bin/webpack</code>，然后再去<code>dist/app.js</code>，查找如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">_reactDom2.default.render(</span><br><span class="line">  _react2.default.createElement(<span class="string">"h1"</span>, <span class="literal">null</span>, <span class="string">"Hello, React."</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>那么，表示解析 .jsx 成功。</p><h4 id="解析-CSS"><a href="#解析-CSS" class="headerlink" title="解析 CSS"></a>解析 CSS</h4><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader@0.19.1 css-loader@0.28.8 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 index.jsx 里添加：<code>import &#39;./style.css&#39;;</code>，在<code>style.css</code>添加一些：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着跑一下：<code>node_modules/.bin/webpack</code>，再接着去 dist 下的 app.js 找找：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module</span></span><br><span class="line">exports.push([<span class="built_in">module</span>.i, <span class="string">"body &#123;\n  color: red;\n  font-size: 16px;\n&#125;"</span>, <span class="string">""</span>]);</span><br></pre></td></tr></table></figure><p>嗯，已经被解析并添加到 app.js 文件中。但是，我们有时候需要大量的 css 文件，并需要 js 解析，那就需要个插件单独处理：<a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/#root" target="_blank" rel="noopener">ExtractTextWebpackPlugin</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add extract-text-webpack-plugin@3.0.2 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"./src/index.html"</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// Add</span></span><br><span class="line">  <span class="keyword">new</span> ExtractTextWebpackPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">],</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    <span class="comment">// Add</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">        use: <span class="string">"css-loader"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跑一下，dist 下就会出现我们设置的 <code>styles.css</code> 文件，并且会自动添加至 <code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解析-scss"><a href="#解析-scss" class="headerlink" title="解析 scss"></a>解析 scss</h4><p>安装: sass-loader node-sass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add sass-loader@6.0.6 node-sass@4.7.2 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">    fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">    use: [<span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，我们去 src 下新建一个 <code>app.scss</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">blue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在 <code>index.jsx</code> 中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./app.scss"</span>;</span><br></pre></td></tr></table></figure><p>接着，跑一下看看，刷~的一声，打开 dist 下的 <code>styles.css</code>，看看是不是我们引入的内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试通过，完美！</p><h4 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h4><p>安装：<a href="https://webpack.js.org/loaders/url-loader/#root" target="_blank" rel="noopener">url-loader</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add file-loader@1.1.6 url-loader@0.6.2 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">8192</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的 src 下找张图片，测试下是否通过，在 <code>index.jsx</code> 里添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ImgSrc <span class="keyword">from</span> <span class="string">"./react.png"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello, React.&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img src=&#123;ImgSrc&#125; alt="react" /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>然后跑一下，发现：如果图片大于 limit 的设置（8kb=8192/1024kb）就会出现在 dist 目录下，否则会以 base64 格式直接引入使用。</p><h4 id="处理-fonts-字体"><a href="#处理-fonts-字体" class="headerlink" title="处理 fonts 字体"></a>处理 fonts 字体</h4><p>先下载个<a href="http://www.fontawesome.com.cn/get-started/" target="_blank" rel="noopener">Font Awesome</a>试试水：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add font-awesome</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">8192</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按照以下几个步骤来试水：</p><ul><li>复制 <code>font-awesome/</code> 目录到你的项目中</li><li>只保留 fonts 文件 和 scss 文件里的内容，其他可以删除</li><li>最后去你的主文件：<code>app.scss</code> 添加它：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fa-font-path</span>: <span class="string">"./font-awesome/fonts"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"./font-awesome/scss/font-awesome.scss"</span>;</span><br></pre></td></tr></table></figure><p>接着我们跑一下：<code>node_modules/.bin/webpack</code>，dist 下瞬间就会出现一堆文件，表示测试通过。</p><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p><a href="https://webpack.docschina.org/plugins/commons-chunk-plugin/#%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">CommonsChunkPlugin</a>插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 chunk 的公共模块。</p><p>先访问缓存中的公共代码，加快浏览器的访问速度。</p><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'commons'</span>, <span class="comment">// 公共 chunk 的名称</span></span><br><span class="line">  filename: <span class="string">'js/base.js'</span>  <span class="comment">// 公共 chunk 的文件名</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h4 id="使用-webpack-dev-server"><a href="#使用-webpack-dev-server" class="headerlink" title="使用 webpack-dev-server"></a>使用 webpack-dev-server</h4><p><code>webpack-dev-server</code> 为你提供了一个简单的 <code>web server</code>，并且具有 <code>live reloading</code>(实时重新加载) 功能。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server@2.9.7 --dev</span><br></pre></td></tr></table></figure><p>修改配置文件，告诉 <code>dev server</code>，从什么位置查找文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着去 <code>package.json</code>里添加一个可以直接运行 <code>dev server</code> 的 script：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --open",</span><br><span class="line">  "build": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样就不用每次都去访问 <code>node_modules/.bin/webpack</code> 了，直接启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 dev server</span></span><br><span class="line">npm start</span><br><span class="line"><span class="comment"># 打包构建</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="清理-dist-文件夹"><a href="#清理-dist-文件夹" class="headerlink" title="清理 /dist 文件夹"></a>清理 /dist 文件夹</h4><p>需求：每次 <code>build</code> 的时候，发现 <code>/dist</code> 下的文件一直会堆砌，能不能每次构建的时候，只生成项目中真正在使用的文件？</p><p>方法：在每次构建前清理 <code>/dist</code> 文件夹，这样只会生成用到的文件。</p><p>使用 <code>clean-webpack-plugin</code> 插件来进行清理:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clean-webpack-plugin --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin();</span><br></pre></td></tr></table></figure><h4 id="模块热替换-HMR"><a href="#模块热替换-HMR" class="headerlink" title="模块热替换 HMR"></a>模块热替换 HMR</h4><p>需求：在开发环境下，可不可以每次保存之后，不用刷新浏览器，就自动更新了呢？</p><p>方法：<a href="https://webpack.docschina.org/guides/hot-module-replacement/" target="_blank" rel="noopener">模块热替换</a>(<code>hot module replacement</code> 或 <code>HMR</code>)，只更新改动的文件。</p><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">],</span><br><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  hot: <span class="literal">true</span>,  <span class="comment">// 开启</span></span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，重启服务，然后修改 <code>index.jsx</code> 文件，就会发现自动更新了，妈妈再也不用担心我的 F5 了…</p><h4 id="启动-Server"><a href="#启动-Server" class="headerlink" title="启动 Server"></a>启动 Server</h4><p><code>webpack-dev-middleware</code> 是一个封装器(<code>wrapper</code>)，它可以把 <code>webpack</code> 处理过的文件发送到一个 <code>server</code>。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-middleware@2.0.6 --dev</span><br><span class="line">yarn add express --dev</span><br></pre></td></tr></table></figure><p>根目录新建一个 <code>server.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">"./webpack.config.js"</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 告诉 express 使用 webpack-dev-middleware，</span></span><br><span class="line"><span class="comment">// 以及将 webpack.config.js 配置文件作为基础配置</span></span><br><span class="line">app.use(</span><br><span class="line">  webpackDevMiddleware(compiler, &#123;</span><br><span class="line">    publicPath: config.output.publicPath</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置文件的端口号</span></span><br><span class="line">app.listen(config.devServer.port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;config.devServer.port&#125;</span>!\n`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们将会在 server 脚本使用 publicPath，以确保文件资源能够正确地 serve 在 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a> 下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">  filename: <span class="string">"app.js"</span>,</span><br><span class="line">  publicPath: <span class="string">'/'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接着，添加一个 <code>npm script</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"server": "node server.js"</span><br></pre></td></tr></table></figure><p>跑一下：<code>npm run server</code>，访问 <code>http://localhost:8082/</code>，完美运行。</p><h4 id="最后的配置文件"><a href="#最后的配置文件" class="headerlink" title="最后的配置文件"></a>最后的配置文件</h4><p>webpack.config.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.jsx"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"app.js"</span>,</span><br><span class="line">    publicPath: <span class="string">"/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">8082</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"commons"</span>,</span><br><span class="line">      filename: <span class="string">"js/base.js"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">"env"</span>, <span class="string">"react"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|c)ss$/</span>,</span><br><span class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: [<span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"url-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"url-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><p>关于 tree 的使用总结：<a href="https://www.jianshu.com/p/6b57f6e40d64" target="_blank" rel="noopener">MacOS 如何使用 tree 生成目录结构</a></p><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">brew install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件夹下的所有文件</span></span><br><span class="line">tree -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示文件夹</span></span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示项目的层级，如三级</span></span><br><span class="line">tree -L 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤，如除node_modules文件</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">tree &gt; tree.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># Help</span></span><br><span class="line">tree --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我的输出：</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span> &gt; tree.md</span><br></pre></td></tr></table></figure><p>tree.md 的内容为：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist</span><br><span class="line">├── package.json</span><br><span class="line">├── server.js</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   ├── font-awesome</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── FontAwesome.otf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.eot</span><br><span class="line">│   │   │   ├── fontawesome-webfont.svg</span><br><span class="line">│   │   │   ├── fontawesome-webfont.ttf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.woff</span><br><span class="line">│   │   │   └── fontawesome-webfont.woff2</span><br><span class="line">│   │   └── scss</span><br><span class="line">│   │   ├── \_animated.scss</span><br><span class="line">│   │   ├── \_bordered-pulled.scss</span><br><span class="line">│   │   ├── \_core.scss</span><br><span class="line">│   │   ├── \_fixed-width.scss</span><br><span class="line">│   │   ├── \_icons.scss</span><br><span class="line">│   │   ├── \_larger.scss</span><br><span class="line">│   │   ├── \_list.scss</span><br><span class="line">│   │   ├── \_mixins.scss</span><br><span class="line">│   │   ├── \_path.scss</span><br><span class="line">│   │   ├── \_rotated-flipped.scss</span><br><span class="line">│   │   ├── \_screen-reader.scss</span><br><span class="line">│   │   ├── \_stacked.scss</span><br><span class="line">│   │   ├── \_variables.scss</span><br><span class="line">│   │   └── font-awesome.scss</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── index.jsx</span><br><span class="line">│   ├── react.png</span><br><span class="line">│   └── style.css</span><br><span class="line">├── tree.md</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line">5 directories, 32 files</span><br></pre></td></tr></table></figure><h4 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h4><blockquote><p>项目里的每一次 <code>Commits</code>，基本上对应着相应的文件配置，可以对照着瞅瞅。</p></blockquote><p>克隆一份项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/happymmall.git</span><br></pre></td></tr></table></figure><p>进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> happymmall</span><br></pre></td></tr></table></figure><p>切换分支至 webpack@3-react</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(master) git checkout webpack@3-react</span><br></pre></td></tr></table></figure><p>下载依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) yarn install</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) npm start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门学习 React 一些实例</title>
      <link href="/2019/08/02/react-demo/"/>
      <url>/2019/08/02/react-demo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是几个入门学习 React 的小 Demo，帮助自己学习了解 React 的运行机制，结合 <a href="https://zh-hans.reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React官方文档</a>，会更佳噢…</p></blockquote><a id="more"></a><h2 id="DEMO-目录"><a href="#DEMO-目录" class="headerlink" title="DEMO 目录"></a>DEMO 目录</h2><ol><li><a href="https://istaotao.com/myreact/demo/01/" target="_blank" rel="noopener">ReactDOM.render()</a></li><li><a href="https://istaotao.com/myreact/demo/02/" target="_blank" rel="noopener">Use Array in JSX</a></li><li><a href="https://istaotao.com/myreact/demo/03/" target="_blank" rel="noopener">组件</a></li><li><a href="https://istaotao.com/myreact/demo/04/" target="_blank" rel="noopener">this.props.children</a></li><li><a href="https://istaotao.com/myreact/demo/05/" target="_blank" rel="noopener">PropTypes</a></li><li><a href="https://istaotao.com/myreact/demo/06/" target="_blank" rel="noopener">获取真实的 DOM 节点</a></li><li><a href="https://istaotao.com/myreact/demo/07/" target="_blank" rel="noopener">this.state</a></li><li><a href="https://istaotao.com/myreact/demo/08/" target="_blank" rel="noopener">表单</a></li><li><a href="https://istaotao.com/myreact/demo/09/" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">使用 Promise 获取 Github 的数据</a></li><li><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Todo List</a></li><li><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">井字棋（Tic Tac Toe）</a></li></ol><p>引入资源 <a href="https://babeljs.io/en/setup/#installation" target="_blank" rel="noopener">With babel-standalone</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"output"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- Load Babel --&gt;</span><br><span class="line">&lt;!-- v6 &lt;script src=<span class="string">"https://unpkg.com/babel-standalone@6/babel.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/@babel/standalone/babel.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- Your custom script here --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> getMessage = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'output'</span>).innerHTML = getMessage();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Demo01-ReactDOM-render"><a href="#Demo01-ReactDOM-render" class="headerlink" title="Demo01: ReactDOM.render()"></a>Demo01: ReactDOM.render()</h3><p><a href="https://istaotao.com/myreact/demo/01/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/01/index.html" target="_blank" rel="noopener">Source</a></p><p>初始化咱先 Hello 一下，使用 jsx 语法，碰到代码块使用（{ }）包起来，碰到 html 标签，就使用（&lt; /&gt;）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"AAA"</span>, <span class="string">"BBB"</span>, <span class="string">"CCC"</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;names.map(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("example")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="Demo02-Use-Array-in-JSX"><a href="#Demo02-Use-Array-in-JSX" class="headerlink" title="Demo02: Use Array in JSX"></a>Demo02: Use Array in JSX</h3><p><a href="https://istaotao.com/myreact/demo/02/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/02/index.html" target="_blank" rel="noopener">Source</a></p><p>如果 JavaScript 的变量是个数组，会展开这个数组的所有项.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">"h1"</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, &lt;h2 key=<span class="string">"h2"</span>&gt;React is awesome!<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>];</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;arr&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo03-组件"><a href="#Demo03-组件" class="headerlink" title="Demo03: 组件"></a>Demo03: 组件</h3><p><a href="https://istaotao.com/myreact/demo/03/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/03/index.html" target="_blank" rel="noopener">Source</a></p><p>变量 HelloMsg 是一个组件类。模板插入 <hellomsg> 时，会自动生成 HelloMsg 的一个实例。所有组件类都必须有自己的 render 方法，用于输出组件。</hellomsg></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMsg</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;HelloMsg name=<span class="string">"Dataozi"</span> /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Demo04-this-props-children"><a href="#Demo04-this-props-children" class="headerlink" title="Demo04: this.props.children"></a>Demo04: this.props.children</h3><p><a href="https://istaotao.com/myreact/demo/04/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/04/index.html" target="_blank" rel="noopener">Source</a></p><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。</p><p>ps: 注意大小写 <code>React.Children</code>、<code>React.Component</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">        &#123;React.Children.map(<span class="keyword">this</span>.props.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NotesList&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;Hello&lt;/</span>span&gt;</span><br><span class="line">    &lt;span&gt;World&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;React&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/NotesList&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("example")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="Demo05-PropTypes"><a href="#Demo05-PropTypes" class="headerlink" title="Demo05: PropTypes"></a>Demo05: PropTypes</h3><p><a href="https://istaotao.com/myreact/demo/05/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/05/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://react.docschina.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">使用 PropTypes 进行类型检查</a></li></ul><p>React 内置了一些类型检查的功能。要在组件的 props 上进行类型检查，你只需配置特定的 propTypes 属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  tilte: <span class="string">"Hello"</span>,</span><br><span class="line">  age: <span class="number">19</span>,</span><br><span class="line">  isStudent: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    tilte: PropTypes.string,</span><br><span class="line">    age: PropTypes.number,</span><br><span class="line">    isStudent: PropTypes.bool</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.props.data.tilte&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;&#123;this.props.data.age&#125;&lt;/</span>h2&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.data.isStudent ? <span class="string">"Yes"</span> : <span class="string">"No"</span>&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyTitle</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>, document.getElementById("root"));</span></span><br></pre></td></tr></table></figure><p>还可以通过配置特定的 defaultProps 属性来定义 props 的默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定 props 的默认值：</span></span><br><span class="line">DefaultTitle.defaultProps = &#123;</span><br><span class="line">  title: <span class="string">"Hello React!"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">DefaultTitle</span> /&gt;</span>, document.getElementById("root2"));</span></span><br></pre></td></tr></table></figure><h3 id="Demo06-获取真实的-DOM-节点"><a href="#Demo06-获取真实的-DOM-节点" class="headerlink" title="Demo06: 获取真实的 DOM 节点"></a>Demo06: 获取真实的 DOM 节点</h3><p><a href="https://istaotao.com/myreact/demo/06/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/06/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">Refs and the DOM</a></li></ul><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</p><ul><li>创建 Refs: Refs 是由<code>React.createRef()</code>创建的，并通过 ref 属性附加到 React 元素（比如 input）</li><li>访问 Refs: 当 ref 被传递给 render 中的元素时，对该节点的引用可以在 ref 的 current 属性中被访问，<code>this.myTextFocus.current.focus();</code></li></ul><p><strong><em>你不能在函数组件上使用 ref 属性，因为它们没有实例</em></strong></p><p>组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 创建一个 ref 来存储 myTextFocus 的 DOM 元素</span></span><br><span class="line">    <span class="keyword">this</span>.myTextFocus = React.createRef();</span><br><span class="line">    <span class="keyword">this</span>.handerClick = <span class="keyword">this</span>.handerClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handerClick() &#123;</span><br><span class="line">    <span class="comment">// 直接使用原生 API 使 text 输入框获得焦点</span></span><br><span class="line">    <span class="comment">// 通过 "current" 来访问 DOM 节点</span></span><br><span class="line">    <span class="keyword">this</span>.myTextFocus.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 告诉 React 我们想把 &lt;input&gt; ref 关联到</span></span><br><span class="line">    <span class="comment">// 构造器里创建的 `myTextFocus` 上</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;<span class="keyword">this</span>.myTextFocus&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"点击聚焦"</span> onClick=&#123;<span class="keyword">this</span>.handerClick&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;MyComponent /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo07-this-state"><a href="#Demo07-this-state" class="headerlink" title="Demo07: this.state"></a>Demo07: this.state</h3><p><a href="https://istaotao.com/myreact/demo/07/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/07/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">State &amp; 生命周期</a></li></ul><p>学习如何封装真正可复用的 Clock 组件。它将设置自己的计时器并每秒更新一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;; <span class="comment">//为 this.state 赋初值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// Clock初次被渲染到DOM时，为其挂载一个计时器</span></span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// Clock被删除时，卸载其计时器</span></span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="comment">// 使用 this.setState() 来时刻更新组件 state</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, React!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;现在是北京时间：&#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>, document.getElementById("root"));</span></span><br></pre></td></tr></table></figure><h3 id="Demo08-表单"><a href="#Demo08-表单" class="headerlink" title="Demo08: 表单"></a>Demo08: 表单</h3><p><a href="https://istaotao.com/myreact/demo/08/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/08/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/forms.html" target="_blank" rel="noopener">表单</a></li></ul><p>受控组件：渲染表单的 React 组件还控制着用户输入过程中表单发生的操作，被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。</p><p>即：表单数据是由 React 组件来管理的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      <span class="comment">// 唯一数据源</span></span><br><span class="line">      value: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value: event.target.value <span class="comment">// 显示的值将随着用户输入而更新</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.value) &#123;</span><br><span class="line">      alert(<span class="string">"接受到的name值是："</span> + <span class="keyword">this</span>.state.value);</span><br><span class="line">    &#125;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          value=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;NameForm /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p><a href="https://zh-hans.reactjs.org/docs/uncontrolled-components.html" target="_blank" rel="noopener">非受控组件</a>：表单数据将交由 DOM 节点来处理，即使用 ref 来从 DOM 节点中获取表单数据</p><p><a href="https://istaotao.com/myreact/demo/08-1/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/08-1/index.html" target="_blank" rel="noopener">Source</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.input = React.createRef();</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="string">"接受到的name值是："</span> + <span class="keyword">this</span>.input.current.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;<span class="keyword">this</span>.input&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;NameForm /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo09-组件的生命周期"><a href="#Demo09-组件的生命周期" class="headerlink" title="Demo09: 组件的生命周期"></a>Demo09: 组件的生命周期</h3><p><a href="https://istaotao.com/myreact/demo/09/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/09/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/react-component.html" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">生命周期图谱速查表</a></li><li><a href="https://www.yuque.com/ant-design/course/lifemethods" target="_blank" rel="noopener">React 的生命周期</a> — Ant Design 语雀</li></ul><p>主要路线顺序：挂载 - 更新 - 卸载 - 错误处理</p><p><strong>挂载</strong></p><p>当组件实例被创建并插入 DOM 中时，其生命周期调用如下：</p><ul><li>consctructor() — React 组件的构造函数，不初始化 state 或不进行方法绑定，则不需要</li><li>static getDerivedStateFromProps() — 不常用</li><li>render() — 唯一必须实现的方法，并且应该是纯函数</li><li>componentDidMount() — 依赖于 DOM 节点的初始化应该在这里</li></ul><p><strong>更新</strong></p><p>当组件的 props 或 state 发生变化时，会触发更新：</p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate() — 不常用</li><li>componentDidUpdate() — 在更新后会被立即调用</li></ul><p><strong>卸载</strong></p><p>当组件从 DOM 中移除时：</p><ul><li>componentWillUnmount() — 会在组件卸载及销毁之前直接调用</li></ul><p><strong>错误处理</strong></p><p>当渲染过程，生命周期，或子组件的构造函数中抛出错误时：</p><ul><li>static getDerivedStateFromError()</li><li>componentDidCatch()</li></ul><p>过期的生命周期方法：</p><ul><li>UNSAFE_componentWillMount() — 挂载前调用，目前使用 constructor()初始化 state</li><li>UNSAFE_componentWillReceiveProps()</li><li>UNSAFE_componentWillUpdate()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      fontSize: <span class="number">12</span>,</span><br><span class="line">      opacity: <span class="number">0.01</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> opacity = <span class="keyword">this</span>.state.opacity;</span><br><span class="line">      <span class="keyword">let</span> fontSize = <span class="keyword">this</span>.state.fontSize;</span><br><span class="line">      opacity += <span class="number">0.02</span>;</span><br><span class="line">      fontSize += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (opacity &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        opacity = <span class="number">0.01</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fontSize &gt;= <span class="number">63</span>) &#123;</span><br><span class="line">        fontSize = <span class="number">12</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        fontSize,</span><br><span class="line">        opacity</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1</span><br><span class="line">        style=&#123;&#123; <span class="attr">opacity</span>: <span class="keyword">this</span>.state.opacity, <span class="attr">fontSize</span>: <span class="keyword">this</span>.state.fontSize &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Hello, &#123;<span class="keyword">this</span>.props.name&#125;</span><br><span class="line">      &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Hello name="React" /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo10-使用-Promise-获取-Github-的数据"><a href="#Demo10-使用-Promise-获取-Github-的数据" class="headerlink" title="Demo10: 使用 Promise 获取 Github 的数据"></a>Demo10: 使用 Promise 获取 Github 的数据</h3><p><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/10/index.html" target="_blank" rel="noopener">Source</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ReportList</span><br><span class="line">    promise=&#123;$.getJSON(</span><br><span class="line">      <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span></span><br><span class="line">    )&#125;</span><br><span class="line">  /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>从 Github 的 API 抓取数据，然后将 Promise 对象作为属性，传给 ReportList 组件。</p><p>如果 Promise 对象正在抓取数据（pending 状态），组件显示”loading…”；</p><p>如果 Promise 对象报错（rejected 状态），组件显示报错信息；</p><p>如果 Promise 对象抓取数据成功（fulfilled 状态），组件显示获取的数据。</p><p><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">在这里查看完整 Demo</a>/<a href="https://github.com/yangtao2o/myreact/blob/master/demo/11/index.html" target="_blank" rel="noopener">源码</a> — 谷歌浏览器有时候会报跨域的问题，可以使用火狐等浏览器试看</p><h2 id="接下来来几个混合实战吧"><a href="#接下来来几个混合实战吧" class="headerlink" title="接下来来几个混合实战吧"></a>接下来来几个混合实战吧</h2><h3 id="Demo11-Todo-List"><a href="#Demo11-Todo-List" class="headerlink" title="Demo11: Todo List"></a>Demo11: Todo List</h3><p><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/11/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://codepen.io/marekdano/pen/bVNYpq" target="_blank" rel="noopener">React todo list</a></li></ul><p>主要练习使用 <code>props</code> 和 <code>state</code>，使用 state 保存现有的待办事项列表及用户的一些操作（删除、完成）等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      items: []</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.addItem = <span class="keyword">this</span>.addItem.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.deleteItem = <span class="keyword">this</span>.deleteItem.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.doneItem = <span class="keyword">this</span>.doneItem.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addItem(item) &#123;</span><br><span class="line">    <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">      text: item.text,</span><br><span class="line">      id: <span class="built_in">Date</span>.now(),</span><br><span class="line">      done: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      items: <span class="keyword">this</span>.state.items.concat(newItem)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deleteItem(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.items.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      items: <span class="keyword">this</span>.state.items</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  doneItem(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">this</span>.state.items;</span><br><span class="line">    <span class="keyword">const</span> todo = items[index];</span><br><span class="line">    items.splice(index, <span class="number">1</span>);</span><br><span class="line">    todo.done = !todo.done;</span><br><span class="line">    todo.done ? items.unshift(todo) : items.push(todo);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; items &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;h1&gt;TODO&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList</span></span><br><span class="line"><span class="regexp">          items=&#123;this.state.items&#125;</span></span><br><span class="line"><span class="regexp">          deleteClick=&#123;this.deleteItem&#125;</span></span><br><span class="line"><span class="regexp">          doneClick=&#123;this.doneItem&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;TodoForm addItem=&#123;<span class="keyword">this</span>.addItem&#125; items=&#123;<span class="keyword">this</span>.state.items&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Demo12-井字棋（Tic-Tac-Toe）"><a href="#Demo12-井字棋（Tic-Tac-Toe）" class="headerlink" title="Demo12: 井字棋（Tic Tac Toe）"></a>Demo12: 井字棋（Tic Tac Toe）</h3><p><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/12/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://codepen.io/gaearon/pen/gWWZgR?editors=0010" target="_blank" rel="noopener">Tic Tac Toe</a></li><li><a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#inspecting-the-starter-code" target="_blank" rel="noopener">井字棋游戏教程文档</a></li><li><a href="https://www.bbsmax.com/A/8Bz8kVodxg/" target="_blank" rel="noopener">React 的井字过三关</a></li></ul><h4 id="tic-tac-toe-三连棋-游戏的功能"><a href="#tic-tac-toe-三连棋-游戏的功能" class="headerlink" title="tic-tac-toe(三连棋)游戏的功能"></a>tic-tac-toe(三连棋)游戏的功能</h4><ul><li>能够判定玩家何时获胜</li><li>能够记录游戏进程</li><li>允许玩家查看游戏的历史记录，也可以查看任意一个历史版本的游戏棋盘状态</li><li>在游戏历史记录列表显示每一步棋的坐标，格式为 (列号, 行号)</li><li>在历史记录列表中加粗显示当前选择的项目</li><li>当无人获胜时，显示一个平局的消息</li><li style="list-style: none"><input type="checkbox"> 使用两个循环来渲染出棋盘的格子，而不是在代码里写死（hardcode）</li><li style="list-style: none"><input type="checkbox"> 添加一个可以升序或降序显示历史记录的按钮</li><li style="list-style: none"><input type="checkbox"> 每当有人获胜时，高亮显示连成一线的 3 颗棋子</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程</a> — 阮一峰</li><li><a href="https://github.com/ruanyf/react-demos" target="_blank" rel="noopener">react-demos</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs 日常杂记</title>
      <link href="/2019/07/10/node-learning/"/>
      <url>/2019/07/10/node-learning/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Node.js® is a JavaScript runtime built on <code>Chrome&#39;s V8 JavaScript engine</code>. Node.js uses an <code>event-driven</code>, <code>non-blocking I/O model</code> that makes it lightweight and efficient. Node.js’ package ecosystem, <code>npm</code>, is the largest ecosystem of open source libraries in the world.</p></blockquote><a id="more"></a><h2 id="学习书籍-视频"><a href="#学习书籍-视频" class="headerlink" title="学习书籍|视频"></a>学习书籍|视频</h2><ul><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a> - 文档</li><li><a href="http://nqdeng.github.io/7-days-nodejs/#1.1" target="_blank" rel="noopener">7-days-nodejs</a> - 文章</li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">《Node.js 包教不包会》</a> – 文章</li><li>《了不起的 Node.js：将 JavaScript 进行到底》- 书籍</li><li>《新时期的 Node.js 入门》- 书籍</li><li><a href="https://coding.imooc.com/class/320.html" target="_blank" rel="noopener">Node.js 从零开发 Web Server 博客项目 前端晋升全栈工程师必备</a> - 视频</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://cnodejs.org/getstart" target="_blank" rel="noopener">Node.js 入门</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js 官方文档</a></li><li><a href="https://cnodejs.org/" target="_blank" rel="noopener">CNode：Node.js 专业中文社区</a></li><li><a href="https://segmentfault.com/a/1190000013933520" target="_blank" rel="noopener">【全文】狼叔：如何正确的学习 Node.js</a></li><li><a href="http://www.expressjs.com.cn/guide/routing.html" target="_blank" rel="noopener">Express-4.x 官方指南</a></li><li><a href="https://www.jianshu.com/p/406f6df0f916" target="_blank" rel="noopener">react 全家桶+express 实战个人博客系列教程</a></li><li><a href="https://www.jianshu.com/p/c65ecdcffed1" target="_blank" rel="noopener">详解如何从零开始搭建 Express+Vue 开发环境</a></li><li><a href="https://www.jianshu.com/p/4940ae61b752" target="_blank" rel="noopener">vue 项目-前端 Vue 后台 express</a></li><li><a href="https://segmentfault.com/a/1190000015866331" target="_blank" rel="noopener">【实战】用 express+MongoDB 搭建一个完整的前端项目</a></li><li><a href="https://www.jianshu.com/p/92fa50ea0b84" target="_blank" rel="noopener">基于 Vue+express 的博客项目</a></li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li><a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de" target="_blank" rel="noopener">Node.js 最新技术栈之 Promise 篇</a> - 2015</li><li><a href="https://blog.coding.net/blog/how-do-promises-work" target="_blank" rel="noopener">理解 Promise 的工作原理</a></li><li><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">JavaScript Promise 迷你书（中文版）</a></li></ul><h2 id="周边大咖"><a href="#周边大咖" class="headerlink" title="周边大咖"></a>周边大咖</h2><ul><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">wesome-nodejs</a></li><li>@justjavac 大神的<a href="https://github.com/justjavac/free-programming-books-zh_CN/#%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">免费的计算机编程类中文书籍</a></li><li><a href="https://github.com/i5ting/How-to-learn-node-correctly" target="_blank" rel="noopener">【知乎 Live】狼叔：如何正确的学习 Node.js</a></li></ul><h2 id="学习日志"><a href="#学习日志" class="headerlink" title="学习日志"></a>学习日志</h2><ul><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/http.md" target="_blank" rel="noopener">Http</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/tcp.md" target="_blank" rel="noopener">Tcp</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/connect.md" target="_blank" rel="noopener">Connect</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/event.md" target="_blank" rel="noopener">Event</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/express-init.md" target="_blank" rel="noopener">Express-init</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/express-spider.md" target="_blank" rel="noopener">Express-spider</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/express-spider-more.md" target="_blank" rel="noopener">Express-spider-more</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/tree/master/cnodejs" target="_blank" rel="noopener">npm package</a> 积累</li></ul><h2 id="Node-相关"><a href="#Node-相关" class="headerlink" title="Node 相关"></a>Node 相关</h2><ul><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-01-init.md" target="_blank" rel="noopener">网站初始化，实现 GET 和 POST 的 Ajax 请求</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">登录模块</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">上传图片模块</a></li><li><a href="https://github.com/yangtao2o/node-blog-express-koa2" target="_blank" rel="noopener">node-blog-express-koa2</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb" target="_blank" rel="noopener">node-express-mongodb</a></li><li><a href="https://github.com/yangtao2o/node-express-spider" target="_blank" rel="noopener">node-express-spider</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用 superagent 与 cheerio 完成简单爬虫</title>
      <link href="/2019/07/06/node-express-spider/"/>
      <url>/2019/07/06/node-express-spider/</url>
      
        <content type="html"><![CDATA[<h2 id="爬一下-CNode-专业中文社区"><a href="#爬一下-CNode-专业中文社区" class="headerlink" title="爬一下 CNode 专业中文社区"></a>爬一下 CNode 专业中文社区</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">"https://cnodejs.org"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当在浏览器中访问 http://localhost:8000/ 时，输出 CNode(https://cnodejs.org/ ) 社区首页的所有帖子标题和链接，以 json 的形式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用 superagent 获取 url</span></span><br><span class="line">  superagent.get(URL, (err, sres) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">    <span class="keyword">const</span> items = [];</span><br><span class="line">    <span class="keyword">const</span> $target = $(<span class="string">"#topic_list .topic_title"</span>);</span><br><span class="line">    <span class="keyword">let</span> itemsHtml = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    $target.each(<span class="function">(<span class="params">i, item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> $<span class="keyword">this</span> = $(item);</span><br><span class="line">      items.push(&#123;</span><br><span class="line">        title: $<span class="keyword">this</span>.attr(<span class="string">"title"</span>),</span><br><span class="line">        url: URL + $<span class="keyword">this</span>.attr(<span class="string">"href"</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"items---&gt;"</span>, items); <span class="comment">// 以 JSON 格式打印</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (items) &#123;</span><br><span class="line">      $(items).each(<span class="function">(<span class="params">i, item</span>) =&gt;</span> &#123;</span><br><span class="line">        itemsHtml += <span class="string">`&lt;li&gt;&lt;a href="<span class="subst">$&#123;item.url&#125;</span>" title="<span class="subst">$&#123;item.title&#125;</span>"&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/a&gt;&lt;/li&gt;`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      itemsHtml = <span class="string">`&lt;ol id="listItem"&gt;<span class="subst">$&#123;itemsHtml&#125;</span>&lt;/ol&gt;`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      itemsHtml = <span class="string">`&lt;p&gt;暂时还获取不到数据...&lt;/p&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.send(itemsHtml);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App is listening at port "</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="并发请求处理"><a href="#并发请求处理" class="headerlink" title="并发请求处理"></a>并发请求处理</h2><p>输出 <a href="https://cnodejs.org/" target="_blank" rel="noopener">CNode</a> 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">"morgan"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">"async"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">"https://cnodejs.org"</span>;</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"ejs"</span>);</span><br><span class="line">app.use(morgan(<span class="string">"dev"</span>));</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制并发请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"loading..."</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`正在请求<span class="subst">$&#123;URL&#125;</span>`</span>);</span><br><span class="line">  superagent.get(URL).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> topicUrls = [];</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">    <span class="keyword">let</span> concurrencyCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> fetchUrl = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> getItem = &#123;&#125;;</span><br><span class="line">      superagent.get(url).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">        concurrencyCount++;</span><br><span class="line"></span><br><span class="line">        getItem = &#123;</span><br><span class="line">          href: url,</span><br><span class="line">          title: $(<span class="string">".topic_full_title"</span>)</span><br><span class="line">            .text()</span><br><span class="line">            .replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">""</span>),</span><br><span class="line">          comment: $(<span class="string">".reply_content"</span>)</span><br><span class="line">            .eq(<span class="number">0</span>)</span><br><span class="line">            .text()</span><br><span class="line">            .replace(<span class="regexp">/[\ \r\n]/g</span>, <span class="string">""</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">`\r\n正在请求第 <span class="subst">$&#123;concurrencyCount&#125;</span> 条的数据data:\r\n<span class="subst">$&#123;[</span></span></span><br><span class="line"><span class="string"><span class="subst">            <span class="built_in">JSON</span>.stringify(getItem)</span></span></span><br><span class="line"><span class="string"><span class="subst">          ]&#125;</span>`</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        callback(<span class="literal">null</span>, getItem);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#topic_list .topic_title"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> $element = $(element);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> href = URL + $element.attr(<span class="string">"href"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`正在获取第 <span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span> 条列表的url：<span class="subst">$&#123;href&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">      topicUrls.push(href);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (topicUrls.length &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`\r\n开始并发请求...\r\n`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span>.mapLimit(</span><br><span class="line">      topicUrls,</span><br><span class="line">      <span class="number">3</span>,</span><br><span class="line">      (url, callback) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">"delay"</span>);</span><br><span class="line">        fetchUrl(url, callback);</span><br><span class="line">        <span class="built_in">console</span>.timeEnd(<span class="string">"delay"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      (err, results) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"\r获取到的数据: \r\n"</span>, results);</span><br><span class="line">        res.json(results);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App is listening at port "</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="优化下"><a href="#优化下" class="headerlink" title="优化下"></a>优化下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">"morgan"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">"async"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">"https://cnodejs.org"</span>;</span><br><span class="line"><span class="keyword">const</span> ALLNUMS = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> TIEMS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"ejs"</span>);</span><br><span class="line">app.use(morgan(<span class="string">"dev"</span>));</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制并发请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"loading..."</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`正在请求<span class="subst">$&#123;URL&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getHomePageUrls = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    superagent.get(URL).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> topicUrls = [];</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">"#topic_list .topic_title"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> $element = $(element);</span><br><span class="line">        <span class="keyword">const</span> href = URL + $element.attr(<span class="string">"href"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`正在获取第 <span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span> 条列表的url：<span class="subst">$&#123;href&#125;</span>`</span>);</span><br><span class="line">        topicUrls.push(href);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (topicUrls.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        resolve(topicUrls.slice(<span class="number">0</span>, ALLNUMS));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> concurrencyCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> fetchUrl = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> getItem = &#123;&#125;;</span><br><span class="line">    superagent.get(url).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">      concurrencyCount++;</span><br><span class="line"></span><br><span class="line">      getItem = &#123;</span><br><span class="line">        href: url,</span><br><span class="line">        title: $(<span class="string">".topic_full_title"</span>)</span><br><span class="line">          .text()</span><br><span class="line">          .replace(<span class="regexp">/[\ \r\n]/g</span>, <span class="string">""</span>),</span><br><span class="line">        comment: $(<span class="string">".reply_content"</span>)</span><br><span class="line">          .eq(<span class="number">0</span>)</span><br><span class="line">          .text()</span><br><span class="line">          .replace(<span class="regexp">/[\ \r\n]/g</span>, <span class="string">""</span>)</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`\r\n正在请求第 <span class="subst">$&#123;concurrencyCount&#125;</span> 条的数据data:\r\n<span class="subst">$&#123;[</span></span></span><br><span class="line"><span class="string"><span class="subst">          <span class="built_in">JSON</span>.stringify(getItem)</span></span></span><br><span class="line"><span class="string"><span class="subst">        ]&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      callback(<span class="literal">null</span>, getItem);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.race([getHomePageUrls])</span><br><span class="line">    .then(<span class="function"><span class="params">itemUrls</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`\r\n开始并发 <span class="subst">$&#123;TIEMS&#125;</span> 次请求...\r\n`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span>.mapLimit(</span><br><span class="line">        itemUrls,</span><br><span class="line">        TIEMS,</span><br><span class="line">        (url, callback) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.time(<span class="string">"delay"</span>);</span><br><span class="line">          fetchUrl(url, callback);</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">"delay"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        (err, results) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"\r获取到的数据: \r\n"</span>, results);</span><br><span class="line">          res.json(results);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App is listening at port "</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs系列之Events</title>
      <link href="/2019/06/25/node-events/"/>
      <url>/2019/06/25/node-events/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h2><p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p><a id="more"></a><p>Node.js 几乎每一个 API 都是支持回调函数的。</p><p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p><p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p><p><code>EventEmitter</code> 提供了多个属性，如<code>on</code>和<code>emit</code>。</p><p><code>on</code> 函数用于绑定事件函数，<code>emit</code> 属性用于触发一个事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'建立连接...'</span>)</span><br><span class="line">  <span class="comment">// 触发 dataReceived 事件</span></span><br><span class="line">  eventEmitter.emit(<span class="string">'dataReceived'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定 dataReceived 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'dataReceived'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'接收数据中...'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发 connection 事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"数据接收完毕！"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜ node 02-event.js</span><br><span class="line">建立连接...</span><br><span class="line">接收数据中...</span><br><span class="line">数据接收完毕！</span><br></pre></td></tr></table></figure><p>EventEmitter 类写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// class 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line"></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发事件'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>);</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h2><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 <code>net.Server</code> 对象会在每次有新连接时触发一个事件， 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例。</p><p>EventEmitter 类由 events 模块定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure><p><code>EventEmitter</code> 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。</p><p>对于每个事件，<code>EventEmitter</code> 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个监听器。</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> <span class="title">firstListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第一个监听器'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二个监听器。</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> <span class="title">secondListener</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`第二个监听器中的事件有参数 <span class="subst">$&#123;arg1&#125;</span>、<span class="subst">$&#123;arg2&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第三个监听器</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> <span class="title">thirdListener</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parameters = args.join(<span class="string">', '</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`第三个监听器中的事件有参数 <span class="subst">$&#123;parameters&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myEmitter.listeners(<span class="string">'event'</span>));</span><br><span class="line"></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>myEmitter 为事件 event 注册了三个个事件监听器，然后触发 event 事件，输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一个监听器</span><br><span class="line">第二个监听器中的事件有参数 1、2</span><br><span class="line">第三个监听器中的事件有参数 1, 2, 3, 4, 5</span><br></pre></td></tr></table></figure><p><code>EventEmitter</code> 提供了多个属性，初了绑定事件函数的<code>on</code>和触发事件函数的<code>emit</code>，还有如下一些属性：</p><ul><li><p>addListener(event, listener)<br>为指定事件添加一个监听器到监听器数组的尾部，<code>emitter.on(eventName, listener)</code> 的别名。</p></li><li><p>once(event, listener)<br>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器</p></li><li><p>removeListener(event, listener)<br>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器</p></li><li><p>removeAllListeners([event])<br>移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器</p></li><li><p>setMaxListeners(n)<br>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</p></li><li><p>listeners(event)<br>返回名为 eventName 的事件的监听器数组的副本</p></li><li><p>on(event, listener)<br>为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数</p></li><li><p>off(eventName, listener)<br><code>removeListener()</code> 的别名</p></li><li><p>emit(event, [arg1], [arg2], […])<br>按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false</p></li><li><p>listenerCount(eventName)<br>返回正在监听的名为 eventName 的事件的监听器的数量</p></li></ul><p>练习下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器1启动'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> listener2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器2启动'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, listener1)</span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, listener2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> listeners = myEmitter.listenerCount(<span class="string">'event'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`现在有<span class="subst">$&#123;listeners&#125;</span>个监听器正在监听事件`</span>)</span><br><span class="line"></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>)</span><br><span class="line"></span><br><span class="line">myEmitter.off(<span class="string">'event'</span>, listener1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'监听器1已被移除'</span>)</span><br><span class="line"></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>)</span><br><span class="line"></span><br><span class="line">listeners = myEmitter.listenerCount(<span class="string">'event'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`现在有 <span class="subst">$&#123;listeners&#125;</span> 个监听器正在监听事件`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[nodemon] starting `node 04-event.js`</span><br><span class="line">现在有2个监听器正在监听事件</span><br><span class="line">监听器1启动</span><br><span class="line">监听器2启动</span><br><span class="line">监听器1已被移除</span><br><span class="line">监听器2启动</span><br><span class="line">现在有 1 个监听器正在监听事件</span><br><span class="line">End!</span><br></pre></td></tr></table></figure><h2 id="错误事件"><a href="#错误事件" class="headerlink" title="错误事件"></a>错误事件</h2><p>当 EventEmitter 实例出错时，应该触发 ‘error’ 事件。 这些在 Node.js 中被视为特殊情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误信息'</span>));</span><br></pre></td></tr></table></figure><p>如果没有为 ‘error’ 事件注册监听器，则当 ‘error’ 事件触发时，会抛出错误、打印堆栈跟踪、并退出 Node.js 进程。</p><p>所以最佳实践是，应该始终为 ‘error’ 事件注册监听器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'错误信息'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误'</span>));</span><br><span class="line"><span class="comment">// 打印: 错误信息</span></span><br></pre></td></tr></table></figure><h2 id="Node-应用程序是如何工作的"><a href="#Node-应用程序是如何工作的" class="headerlink" title="Node 应用程序是如何工作的"></a>Node 应用程序是如何工作的</h2><p>创建一个 input.txt ,文件内容如：<code>www.runoob.com</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻塞</span></span><br><span class="line"><span class="comment">// 在文件读取完后才执行完程序</span></span><br><span class="line"><span class="keyword">const</span> getData = fs.readFileSync(<span class="string">'test/input.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getData.toString())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'阻塞程序运行结束'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非阻塞</span></span><br><span class="line"><span class="comment">// 不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能</span></span><br><span class="line">fs.readFile(<span class="string">'test/input.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非阻塞程序运行结束'</span>)</span><br></pre></td></tr></table></figure><p>如果没发生错误，readFileSync 或者 readFile 跳过 err 对象的输出，文件内容就通过回调函数输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www.runoob.com</span><br><span class="line">阻塞程序运行结束</span><br><span class="line">非阻塞程序运行结束</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><p>接下来我们删除 input.txt 文件，执行结果如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: ENOENT: no such file or directory, open <span class="string">'input.txt'</span>] errno: -2, code: <span class="string">'ENOENT'</span>, syscall: <span class="string">'open'</span>, path: <span class="string">'input.txt'</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>菜鸟教程之 <a href="https://www.runoob.com/nodejs/nodejs-event.html" target="_blank" rel="noopener">Node.js 学习</a></li><li>官方文档之 <a href="http://nodejs.cn/api/events.html" target="_blank" rel="noopener">events（事件触发器）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs系列之HTTP</title>
      <link href="/2019/06/14/node-http/"/>
      <url>/2019/06/14/node-http/</url>
      
        <content type="html"><![CDATA[<blockquote><p>超文本传输协议，是一种 Web 协议，属于 TCP 上层的协议。</p></blockquote><p>HTTP 模块式 Node 的核心模块，主要提供了一系列用于网络传输的 API。</p><a id="more"></a><p>HTTP 消息头如下所示(键是小写的，值不能被修改)：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content-length"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="attr">"content-type"</span>: <span class="string">"text/plain"</span>,</span><br><span class="line">  <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"mysite.com"</span>,</span><br><span class="line">  <span class="attr">"accept"</span>: <span class="string">"*/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建-HTTP-服务器"><a href="#创建-HTTP-服务器" class="headerlink" title="创建 HTTP 服务器"></a>创建 HTTP 服务器</h2><p>使用 NodeJS 内置的 http 模块简单实现一个 HTTP 服务器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    response.end(<span class="string">"Hello World!"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>以上程序创建了一个 HTTP 服务器并监听 3000 端口，打开浏览器访问该端口<code>http://127.0.0.1:3000/</code>就能够看到效果。</p><p>使用 createServer 创建一个 HTTP 服务器，该方法返回一个 http.server 类的实例。</p><p>createServer 方法包含了一个匿名的回调函数，该函数有两个参数 request，response，它们是 IncomingMessage 和 ServerResponse 的实例。</p><p>分别表示 HTTP 的 request 和 response 对象，当服务器创建完成后，Node 进程开始循环监听 3000 端口。</p><p>http.server 类定义了一系列的事件，如 connection 和 request 事件。</p><h2 id="处理-HTTP-请求"><a href="#处理-HTTP-请求" class="headerlink" title="处理 HTTP 请求"></a>处理 HTTP 请求</h2><h3 id="method，URL-和-header"><a href="#method，URL-和-header" class="headerlink" title="method，URL 和 header"></a>method，URL 和 header</h3><p>Node 将相关的信息封装在一个对象（request）中，该对象是 IncomingMessage 的实例。</p><p>获取 method、URL：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> method = req.method;</span><br><span class="line"><span class="keyword">const</span> url = req.url;</span><br></pre></td></tr></table></figure><p>比如访问<code>http://127.0.0.1:8000/index.html?name=tao</code>，就会输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"/index.html?name=tao"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL 的值为去除网站服务器地址之外的完整值。</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>获取 HTTP header 信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = req.headers;</span><br><span class="line"><span class="keyword">const</span> userAgent = headers[<span class="string">"user-agent"</span>];</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1:8000"</span>,</span><br><span class="line">    <span class="attr">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0"</span>,</span><br><span class="line">    <span class="attr">"accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="attr">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">    <span class="attr">"accept-encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="attr">"upgrade-insecure-requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"cache-control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"userAgent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>header 是一个 JSON 对象，可以对属性名进行单独索引。</p><h3 id="request-body"><a href="#request-body" class="headerlink" title="request body"></a>request body</h3><p>Node 使用 stream 处理 HTTP 的请求体，并且注册了两个事件：data 和 end。</p><p>获取完整的 HTTP 内容体：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> body = [];</span><br><span class="line"></span><br><span class="line">request.on(<span class="string">"data"</span>, chunk =&gt; &#123;</span><br><span class="line">  body.push(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">  body = Buffer.concat(body).toString();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h2><h2 id="get-post-请求"><a href="#get-post-请求" class="headerlink" title="get/post 请求"></a>get/post 请求</h2><p>综上所述，我们来组织一个简易的 get、post 请求实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = req.method;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">const</span> path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> query = querystring.parse(url.split(<span class="string">"?"</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">const</span> headers = req.headers;</span><br><span class="line">    <span class="keyword">const</span> userAgent = headers[<span class="string">"user-agent"</span>];</span><br><span class="line">    <span class="keyword">const</span> resData = &#123;</span><br><span class="line">      method,</span><br><span class="line">      url,</span><br><span class="line">      path,</span><br><span class="line">      query,</span><br><span class="line">      headers,</span><br><span class="line">      userAgent</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">"Content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> postData = [];</span><br><span class="line"></span><br><span class="line">      req.on(<span class="string">"data"</span>, chunk =&gt; &#123;</span><br><span class="line">        postData.push(chunk);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">        resData.postData = Buffer.concat(postData).toString();</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><p>比如<code>POST</code>请求 <code>http://127.0.0.1:8000/api/blog?ip=2</code>，然后使用 Postman 工具测试结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"/api/blog?ip=2"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/api/blog"</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"ip"</span>: <span class="string">"2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="attr">"cache-control"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">    <span class="attr">"postman-token"</span>: <span class="string">"9e6cb382-8551-4a3f-b352-0581bb377cbc"</span>,</span><br><span class="line">    <span class="attr">"user-agent"</span>: <span class="string">"PostmanRuntime/7.6.0"</span>,</span><br><span class="line">    <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1:8000"</span>,</span><br><span class="line">    <span class="attr">"accept-encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="attr">"content-length"</span>: <span class="string">"62"</span>,</span><br><span class="line">    <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"userAgent"</span>: <span class="string">"PostmanRuntime/7.6.0"</span>,</span><br><span class="line">  <span class="attr">"postData"</span>: <span class="string">"&#123;\n\t\"title\": \"你说什么\",\n\t\"content\": \"我知道你知道\"\n&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><a href="http://nodejs.cn/api/http.html" target="_blank" rel="noopener">http</a> 模块提供两种使用方式：</p><ol><li>作为服务端使用时，创建一个 HTTP 服务器，监听 HTTP 客户端请求并返回响应。</li><li>作为客户端使用时，发起一个 HTTP 客户端请求，获取服务端响应。</li></ol><h3 id="一个简单的-Web-服务器"><a href="#一个简单的-Web-服务器" class="headerlink" title="一个简单的 Web 服务器"></a>一个简单的 Web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"/"</span> == req.url) &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">      res.end(</span><br><span class="line">        [</span><br><span class="line">          <span class="string">'&lt;form method="POST" action="/url"&gt;'</span>,</span><br><span class="line">          <span class="string">"&lt;h1&gt;My Form&lt;/h1&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;fieldset&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;label&gt;Personal information&lt;/label&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;p&gt;What is your name?&lt;/p&gt;"</span>,</span><br><span class="line">          <span class="string">'&lt;input type="text" name="name" /&gt;'</span>,</span><br><span class="line">          <span class="string">"&lt;p&gt;&lt;button&gt;Submit&lt;/button&gt;&lt;/p&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;/fieldset&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;/form&gt;"</span></span><br><span class="line">        ].join(<span class="string">""</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"/url"</span> == req.url &amp;&amp; <span class="string">"POST"</span> == req.method) &#123;</span><br><span class="line">      <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">      req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        body += chunk;</span><br><span class="line">      &#125;);</span><br><span class="line">      req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">        res.end(</span><br><span class="line">          <span class="string">"&lt;p&gt;Content-type: "</span> +</span><br><span class="line">            req.headers[<span class="string">"content-type"</span>] +</span><br><span class="line">            <span class="string">"&lt;/p&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;p&gt;Data: "</span> +</span><br><span class="line">            qs.parse(body).name +</span><br><span class="line">            <span class="string">"&lt;/p&gt;"</span></span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>);</span><br><span class="line">      res.end(<span class="string">"Not Found."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="一个-Twitter-Web-客户端"><a href="#一个-Twitter-Web-客户端" class="headerlink" title="一个 Twitter Web 客户端"></a>一个 Twitter Web 客户端</h3><p>创建服务器：app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">    req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">      body += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>);</span><br><span class="line">      res.end(<span class="string">"Done"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"\n got name \033[90m"</span> + qs.parse(body).name + <span class="string">"\033[39m\n"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>创建客户端：client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">theName</span>) </span>&#123;</span><br><span class="line">  http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        url: <span class="string">"/"</span>,</span><br><span class="line">        method: <span class="string">"POST"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">        res.setEncoding(<span class="string">"utf8"</span>);</span><br><span class="line">        res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">          body += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line">        res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"\n  \033[90m request complete! \033[39m"</span>);</span><br><span class="line">          process.stdout.write(<span class="string">"\n your name: "</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end(qs.stringify(&#123; <span class="attr">name</span>: theName &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.stdout.write(<span class="string">"\n your name: "</span>);</span><br><span class="line">process.stdin.resume();</span><br><span class="line">process.stdin.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">process.stdin.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  send(name.replace(<span class="string">"\n"</span>, <span class="string">""</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>启动<code>node app.js</code>，再启动<code>node client.js</code></p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS 是基于 TLS/SSL 的 HTTP 协议。在 Node.js 中，作为一个单独的模块实现。</p><p>HTTPS 模块与 HTTP 模块极为类似，区别在于 HTTPS 模块需要额外处理 SSL 证书。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">"https"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">"test/fixtures/keys/agent2-key.pem"</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">"test/fixtures/keys/agent2-cert.pem"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">https</span><br><span class="line">  .createServer(options, (req, res) =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(<span class="string">"hello world\n"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>处理 HTTP 请求时 url 模块使用率超高，因为该模块允许解析 URL、生成 URL，以及拼接 URL。</p><p>首先我们来看看一个完整的 URL 的各组成部分，输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; require(<span class="string">'url'</span>).parse(<span class="string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span>);</span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'http:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'user:pass'</span>,</span><br><span class="line">  host: <span class="string">'host.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'host.com'</span>,</span><br><span class="line">  <span class="built_in">hash</span>: <span class="string">'#hash'</span>,</span><br><span class="line">  search: <span class="string">'?query=string'</span>,</span><br><span class="line">  query: <span class="string">'query=string'</span>,</span><br><span class="line">  pathname: <span class="string">'/p/a/t/h'</span>,</span><br><span class="line">  path: <span class="string">'/p/a/t/h?query=string'</span>,</span><br><span class="line">  href: <span class="string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span>&#125;</span><br></pre></td></tr></table></figure><p>当然，不完整的 url，也可以解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> body = [];</span><br><span class="line">    <span class="keyword">const</span> tmp = request.url; <span class="comment">// /foo/bar?a=b</span></span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url-parse"</span>, url.parse(tmp));</span><br><span class="line"></span><br><span class="line">    response.end(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"protocol"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"slashes"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"auth"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"port"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"hostname"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"hash"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"search"</span>: <span class="string">"?a=b"</span>,</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"a=b"</span>,</span><br><span class="line">  <span class="attr">"pathname"</span>: <span class="string">"/foo/bar"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/foo/bar?a=b"</span>,</span><br><span class="line">  <span class="attr">"href"</span>: <span class="string">"/foo/bar?a=b"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>format 方法允许将一个 URL 对象转换为 URL 字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlFormat = url.format(&#123;</span><br><span class="line">  protocol: <span class="string">"http:"</span>,</span><br><span class="line">  host: <span class="string">"www.example.com"</span>,</span><br><span class="line">  pathname: <span class="string">"/p/a/t/h"</span>,</span><br><span class="line">  search: <span class="string">"query=string"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123; urlFormat &#125;); <span class="comment">// &#123; urlFormat: 'http://www.example.com/p/a/t/h?query=string' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Query-String"><a href="#Query-String" class="headerlink" title="Query String"></a>Query String</h2><p><a href="http://nodejs.org/api/querystring.html" target="_blank" rel="noopener">querystring</a> 模块用于实现 URL 参数字符串与参数对象的互相转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">querystring.parse(<span class="string">"foo=bar&amp;baz=qux&amp;baz=quux&amp;corge"</span>);</span><br><span class="line"><span class="comment">// &#123; foo: 'bar', baz: [ 'qux', 'quux' ], corge: '' &#125;</span></span><br><span class="line"></span><br><span class="line">querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: [<span class="string">"qux"</span>, <span class="string">"quux"</span>], <span class="attr">corge</span>: <span class="string">""</span> &#125;);</span><br><span class="line"><span class="comment">// 'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='</span></span><br></pre></td></tr></table></figure><h2 id="Zlib"><a href="#Zlib" class="headerlink" title="Zlib"></a>Zlib</h2><p>zlib 模块提供了数据压缩和解压的功能。当我们处理 HTTP 请求和响应时，可能需要用到这个模块。</p><h2 id="Net"><a href="#Net" class="headerlink" title="Net"></a>Net</h2><p>net 模块可用于创建 Socket 服务器或 Socket 客户端。</p><p>由于 Socket 在前端领域的使用范围还不是很广，这里先不涉及到 WebSocket 的介绍，仅仅简单演示一下如何从 Socket 层面来实现 HTTP 请求和响应。</p><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p>使用 NodeJS 操作网络，特别是操作 HTTP 请求和响应时会遇到一些惊喜，这里对一些常见问题做解答。</p><ul><li>为什么通过 headers 对象访问到的 HTTP 请求头或响应头字段不是驼峰的？</li></ul><p>从规范上讲，HTTP 请求头和响应头字段都应该是驼峰的。但现实是残酷的，不是每个 HTTP 服务端或客户端程序都严格遵循规范，所以 NodeJS 在处理从别的客户端或服务端收到的头字段时，都统一地转换为了小写字母格式，以便开发者能使用统一的方式来访问头字段，例如<code>headers[&#39;content-length&#39;]</code>。</p><ul><li>为什么 http 模块创建的 HTTP 服务器返回的响应是 chunked 传输方式的？</li></ul><p>因为默认情况下，使用<code>.writeHead</code>方法写入响应头后，允许使用<code>.write</code>方法写入任意长度的响应体数据，并使用<code>.end</code>方法结束一个响应。由于响应体数据长度不确定，因此 NodeJS 自动在响应头里添加了<code>Transfer-Encoding: chunked</code>字段，并采用 chunked 传输方式。但是当响应体数据长度确定时，可使用<code>.writeHead</code>方法在响应头里加上<code>Content-Length</code>字段，这样做之后 NodeJS 就不会自动添加<code>Transfer-Encoding</code>字段和使用 chunked 传输方式。</p><ul><li>为什么使用 http 模块发起 HTTP 客户端请求时，有时候会发生 socket hang up 错误？</li></ul><p>答： 发起客户端 HTTP 请求前需要先创建一个客户端。http 模块提供了一个全局客户端<code>http.globalAgent</code>，可以让我们使用<code>.request</code>或<code>.get</code>方法时不用手动创建客户端。但是全局客户端默认只允许 5 个并发 Socket 连接，当某一个时刻 HTTP 客户端请求创建过多，超过这个数字时，就会发生<code>socket hang up</code>错误。解决方法也很简单，通过<code>http.globalAgent.maxSockets</code>属性把这个数字改大些即可。另外，https 模块遇到这个问题时也一样通过<code>https.globalAgent.maxSockets</code>属性来处理。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="http://nqdeng.github.io/7-days-nodejs/#1.1" target="_blank" rel="noopener">7-days-nodejs</a> - 文章</li><li>《了不起的 Node.js：将 JavaScript 进行到底》- 书籍</li><li>《新时期的 Node.js 入门》- 书籍</li><li><a href="https://coding.imooc.com/class/320.html" target="_blank" rel="noopener">Node.js 从零开发 Web Server 博客项目 前端晋升全栈工程师必备</a> - 视频</li><li><a href="http://nodejs.cn/api/http.html" target="_blank" rel="noopener">http（HTTP）</a> - 官方文档</li></ul>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs系列之TCP</title>
      <link href="/2019/06/12/node-tcp/"/>
      <url>/2019/06/12/node-tcp/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>传输控制协议（TCP）是一个面向连接的协议，保证了两台计算机之间数据传输的可靠性和顺序。</p><p>Node HTTP 服务器是构建于 Node TCP 服务器之上的。</p><a id="more"></a><p>TCP 的特性：</p><ul><li>面向连接的通信和保证顺序的传递</li><li>面向字节 - ASCII、Unicode</li><li>可靠性</li><li>流控制</li><li>拥堵控制 - Qos</li></ul><p>Socket 是对 TCP 协议的一种封装方式，Socket本身不是协议，而是一个编程接口。</p><h2 id="telnet允许在终端手动建立一个TCP连接"><a href="#telnet允许在终端手动建立一个TCP连接" class="headerlink" title="telnet允许在终端手动建立一个TCP连接"></a>telnet允许在终端手动建立一个TCP连接</h2><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>使用 Node.js 写一个web服务器，并监听 3000 端口，然后 <code>node app.js</code> 运行下是否正确<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>);</span><br><span class="line">  res.end(<span class="string">'Hello world'</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p>使用<code>telnet 127.0.0.1 3000</code>建立一个连接，然后输入<code>GET / HTTP/1.1</code>，回车两次，然后服务器端就出现了响应：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~ telnet 127.0.0.1 3000</span><br><span class="line"></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sun, 15 Sep 2019 06:20:43 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">Hello world</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></p><p>总结：</p><ul><li>成功建立了一个 TCP 连接</li><li>创建了一个HTTP请求</li><li>接收到一个HTTP响应</li><li>到达的数据和在Node.js中写的一样</li></ul><h2 id="基于TCP的聊天程序"><a href="#基于TCP的聊天程序" class="headerlink" title="基于TCP的聊天程序"></a>基于TCP的聊天程序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">  users = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nickname;</span><br><span class="line"></span><br><span class="line">  conn.setEncoding(<span class="string">'utf8'</span>)</span><br><span class="line">  conn.write(</span><br><span class="line">    <span class="string">'\n &gt; 欢迎访问 \033[92mNode-Chat\033[39m!'</span></span><br><span class="line">  + <span class="string">'\n &gt; '</span> + count + <span class="string">'个其他用户已连接'</span></span><br><span class="line">  + <span class="string">'\n &gt; 请输入你的用户名并回车：'</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  count++</span><br><span class="line"></span><br><span class="line">  conn.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    data = data.replace(<span class="string">'\r\n'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!nickname) &#123;</span><br><span class="line">      <span class="keyword">if</span>(users[data]) &#123;</span><br><span class="line">        conn.write(<span class="string">'\033[93m&gt; 昵称已被使用，请重试：\033[39m '</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nickname = data</span><br><span class="line">        users[nickname] = conn</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'users: '</span>, conn)</span><br><span class="line">        broadcast(<span class="string">'\033[90m &gt; '</span> + nickname + <span class="string">' 上线了\033[39m\n'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      broadcast(<span class="string">'\033[96m &gt; '</span> + nickname + <span class="string">':\033[39m '</span> + data + <span class="string">'\n'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  conn.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count--</span><br><span class="line">    <span class="keyword">delete</span> users[nickname]</span><br><span class="line">    broadcast(<span class="string">'\033[90m &gt; '</span> + nickname + <span class="string">' 下线了\033[39m\n'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 向每一个用户发送信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span> (<span class="params">msg, exceptMyself</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> users) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!exceptMyself || i != nickname) &#123;</span><br><span class="line">        users[i].write(msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'\033[96m  server listening on *: 3000\033[39m'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>单独运行：<code>telnet 127.0.0.1 3000</code>，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">~ telnet 127.0.0.1 3000</span><br><span class="line"></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"></span><br><span class="line"> &gt; 欢迎访问 Node-Chat!</span><br><span class="line"> &gt; 0个其他用户已连接</span><br><span class="line"> &gt; 请输入你的用户名并回车：XiaoMing</span><br><span class="line"> &gt; XiaoMing 上线了</span><br><span class="line">Hi </span><br><span class="line"> &gt; HanMeimei 上线了</span><br><span class="line"> &gt; HanMeimei: Hello</span><br><span class="line"> &gt; LiSi 上线了</span><br><span class="line"> &gt; LiSi: Ni hao ma?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二位用户</span></span><br><span class="line"> &gt; 欢迎访问 Node-Chat!</span><br><span class="line"> &gt; 1个其他用户已连接</span><br><span class="line"> &gt; 请输入你的用户名并回车：HanMeimei</span><br><span class="line"> &gt; HanMeimei 上线了</span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三位用户</span></span><br><span class="line"> &gt; 欢迎访问 Node-Chat!</span><br><span class="line"> &gt; 2个其他用户已连接</span><br><span class="line"> &gt; 请输入你的用户名并回车：LiSi</span><br><span class="line"> &gt; LiSi 上线了</span><br><span class="line">Ni hao ma?</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs系列之Connect</title>
      <link href="/2019/06/11/node-connect/"/>
      <url>/2019/06/11/node-connect/</url>
      
        <content type="html"><![CDATA[<p>Connect 是一个基于 HTTP 服务器的工具集，成为中间件（middleware）。</p><p>中间件，其实就是一个简单的 JavaScript 函数。除了处理 req 和 res 对象之外，还接受一个 next 函数来做流控制。</p><a id="more"></a><h2 id="一个简单的网站"><a href="#一个简单的网站" class="headerlink" title="一个简单的网站"></a>一个简单的网站</h2><p>初始化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</span><br><span class="line"><span class="keyword">var</span> serveStatic = <span class="built_in">require</span>(<span class="string">"serve-static"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = connect();</span><br><span class="line"></span><br><span class="line">app.use(serveStatic(path.join(__dirname, <span class="string">"public-optimized"</span>)));</span><br><span class="line">app.use(serveStatic(path.join(__dirname, <span class="string">"public"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// respond to all requests</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">"Hello from Connect!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create node.js http server and listen on port</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>中间件的使用，模拟登录登出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</span><br><span class="line"><span class="keyword">var</span> morgan = <span class="built_in">require</span>(<span class="string">"morgan"</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">"cookie-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">"express-session"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">"./config/users.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.use(morgan(<span class="string">"dev"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse an HTML body into a string</span></span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  session(&#123;</span><br><span class="line">    secret: <span class="string">"my site secret"</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/"</span> == req.url &amp;&amp; req.session.logged_in) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="string">`Welcome back, &lt;b&gt;<span class="subst">$&#123;req.session.name&#125;</span>&lt;/b&gt;&lt;a href="/logout"&gt;Logout&lt;/a&gt;`</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/"</span> == req.url &amp;&amp; <span class="string">"GET"</span> == req.method) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'&lt;form method="POST" action="/login"&gt;'</span>,</span><br><span class="line">        <span class="string">"&lt;h1&gt;Login&lt;/h1&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;fieldset&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;label&gt;Please log in&lt;/label&gt;"</span>,</span><br><span class="line">        <span class="string">'Username: &lt;input type="text" name="user" /&gt;&lt;br&gt;'</span>,</span><br><span class="line">        <span class="string">'Password: &lt;input type="password" name="password" /&gt;'</span>,</span><br><span class="line">        <span class="string">"&lt;p&gt;&lt;button&gt;Submit&lt;/button&gt;&lt;/p&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;/fieldset&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;/form&gt;"</span></span><br><span class="line">      ].join(<span class="string">""</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/login"</span> == req.url &amp;&amp; <span class="string">"POST"</span> == req.method) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !users[req.body.user] ||</span><br><span class="line">      req.body.password != users[req.body.user].password</span><br><span class="line">    ) &#123;</span><br><span class="line">      res.end(<span class="string">'Bad username/password&lt;br&gt;&lt;a href="/"&gt;Back&lt;/a&gt;'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      req.session.logged_in = <span class="literal">true</span>;</span><br><span class="line">      req.session.name = users[req.body.user].name;</span><br><span class="line">      res.end(<span class="string">"Success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/logout"</span> == req.url) &#123;</span><br><span class="line">    req.session.logged_in = <span class="literal">false</span>;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(<span class="string">"Logged out!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create node.js http server and listen on port</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js设计模式学习之单例模式</title>
      <link href="/2019/05/03/mode-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/05/03/mode-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote><a id="more"></a><h4 id="实现一个单例模式"><a href="#实现一个单例模式" class="headerlink" title="实现一个单例模式"></a>实现一个单例模式</h4><p>用一个变量标志当前是否已经为某个类型创建过对象，如果是，则下次直接返回之前创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过 <code>Singleton.getInstance</code>来获取 Singleton 类的唯一对象，里边使用了 new 来获取，导致了这个类的“不透明性”。</p><h4 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h4><p>创建一个“透明”的单例类，就是让我们从这个类中创建对象的时候可以和使用其他普通类一样：<code>var aa = new CreateDiv(&#39;Sisi1&#39;);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> CreateDiv;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>下面这段代码中，CreateDiv 的构造函数负责了两件事：创建对象和执行初始化 init 方法，及保证只有一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">  <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是，如果我们要创建很多的div，这里的 <code>return instance = this;</code> 就需要删掉。</p><h4 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h4><p>这时候，为了避免上面不能复用的尴尬，通过引入代理类的方式，把负责管理单例的逻辑移交至代理类<code>ProxySingletonCreateDiv</code>，这样<code>CreateDiv</code>只是一个普通的类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ProxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-中的单例模式"><a href="#JavaScript-中的单例模式" class="headerlink" title="JavaScript 中的单例模式"></a>JavaScript 中的单例模式</h4><p>单例模式的核心是：确保只有一个实例，并提供全局访问。</p><ol><li>使用命名空间</li></ol><p>对象字面量的方式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace1.a(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>把a和b都定义为 namespace1 的属性，减少了变量和全局作用域打交道的机会，还可以动态地创建命名空间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">MyApp.namespace = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = name.split(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">var</span> current = MyApp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> parts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!current[parts[i]]) &#123;</span><br><span class="line">      current[parts[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current[parts[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyApp.namespace(<span class="string">'event'</span>);</span><br><span class="line">MyApp.namespace(<span class="string">'dom.style'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyApp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;</span><br><span class="line">  event: &#123;&#125;,</span><br><span class="line">  dom: &#123;</span><br><span class="line">    style: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 使用闭包封装私有变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用下划线约定私有变量 _name 和 _age。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _name = <span class="string">'Seven'</span>;</span><br><span class="line">  <span class="keyword">var</span> _age = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _name + <span class="string">'-'</span> + _age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.getUserInfo()) <span class="comment">// Seven-27</span></span><br></pre></td></tr></table></figure><h4 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h4><p>宗旨：在需要的时候才创建对象！！！</p><p>栗子：QQ的登录浮窗</p><p>第一种方案：页面加载完成的时候便创建好浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是，不管我们登录与否，都会创建悬浮窗，所以我们可以修改为：在点击登录的时候再创建悬浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时候，虽然达到了惰性的目的，却失去了单例的效果，每次点击登录，都会创建一个新的悬浮窗。</p><p>所以我们需要一个变量来判断是否已经创建过悬浮窗：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!div) &#123; <span class="comment">// 判断是否已创建</span></span><br><span class="line">      div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">      div.style.display = <span class="string">'none'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h4><p>虽然上面的悬浮框是一个可用的惰性单例，但是仍然违反了单一职责原则，如果我们要创建其他的标签，就需要把创建悬浮窗的函数复制一份，再修修改改，无法做到复用。</p><p>所以，我们需要把不变的部分隔离出来，进行抽象，无论创建什么标签，都是一样的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span>(!obj) &#123;</span><br><span class="line">  obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，继续：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时，我们创建其他标签就只需要关系如何创建该标签就可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createIframe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = <span class="string">'https://baidu.com'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleIframe = getSingle(createIframe);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn2'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  createSingleIframe();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>单例模式是一种简单却非常常用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。</p><p><em>创建对象</em> 和 <em>管理单例</em> 的职责被分布在两个不同的方法中，两个方法组合起来才具有单例模式的威力。</p><p>学习资料：</p><ul><li>《JavaScript 设计模式与开发实践》第 4 章</li></ul><p>发布：</p><ul><li>掘金<a href="https://juejin.im/post/5ccb927a6fb9a0324936c2c6" target="_blank" rel="noopener">《js设计模式学习之单例模式》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery插件写法小结之重写轮播图功能</title>
      <link href="/2019/05/03/plugin-slide-photo/"/>
      <url>/2019/05/03/plugin-slide-photo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在维护老网站的时候，发现一些jQuery库的使用有些臃肿，并且大部分自定义的js文件很容易污染全局变量，所以想着重写下，虽然jQuery的辉煌时代已经过去了，但是他的思想，依旧灿烂（滚去维护去）</p></blockquote><a id="more"></a><h2 id="先举个栗子"><a href="#先举个栗子" class="headerlink" title="先举个栗子"></a>先举个栗子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> methods = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 可自定义扩展项</span></span><br><span class="line">      options = $.extend(</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;&#125;, </span><br><span class="line">        $.fn.myPlugin.defaults,</span><br><span class="line">        options</span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'options'</span>, options, <span class="keyword">this</span>)</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Name is '</span>, $.fn.myPlugin.defaults.name, <span class="string">'.'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Age is '</span>, $.fn.myPlugin.defaults.age, <span class="string">'.'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.display == <span class="string">"none"</span> &amp;&amp; (<span class="keyword">this</span>.style.display = <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (getComputedStyle(<span class="keyword">this</span>, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>) == <span class="string">"none"</span>)</span><br><span class="line">          <span class="keyword">this</span>.style.display = defaultDisplay(<span class="keyword">this</span>.nodeName)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.css(<span class="string">"display"</span>, <span class="string">"none"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 命名空间最好只有一个</span></span><br><span class="line">  $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法调用，可满足三种情况：1. method, 2. init, 3. error</span></span><br><span class="line">    <span class="keyword">if</span>(methods[method]) &#123;</span><br><span class="line">      <span class="keyword">return</span> methods[method].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));  <span class="comment">//将具有length属性的对象转成数组</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> method === <span class="string">'object'</span> || !method) &#123;</span><br><span class="line">      <span class="comment">// 如果没有参数或者参数</span></span><br><span class="line">      <span class="keyword">return</span> methods.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $.error(<span class="string">'Method'</span> + method + <span class="string">'does not exist on jQuery.myPlugin.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.myPlugin.defaults =  &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(jQuery)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- 测试 --- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化init</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改参数</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'wuwang'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'27'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调取方法</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(<span class="string">'hide'</span>)</span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(<span class="string">'show'</span>)</span><br></pre></td></tr></table></figure><p>简单易懂，但是五脏俱全，接下来简单说明：</p><h4 id="搞定复杂参数列表"><a href="#搞定复杂参数列表" class="headerlink" title="搞定复杂参数列表"></a>搞定复杂参数列表</h4><p>首先，我们一般传参如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a1, a2, a3, a4</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>那如果不传参呐？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="literal">null</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>就需要如上使用 null 来站位，参数多了，保证你晕。</p><p>所以，我们使用 <strong>可选哈希参数（options hash）</strong>，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line">foo(<span class="number">1</span>, &#123;</span><br><span class="line">    a4: <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>接着，我们使用 jQuery 的 $.extend() 工具函数合并可选参数，并设置默认值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a1, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;</span><br><span class="line">        a2: value2,</span><br><span class="line">        a3: value3,</span><br><span class="line">        a4: value4</span><br><span class="line">    &#125;, options || &#123;&#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，就有了栗子中形态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> settings = $.extend(</span><br><span class="line">    <span class="literal">true</span>,  <span class="comment">// 是否为深拷贝</span></span><br><span class="line">    &#123;&#125;,    <span class="comment">// 使用源元素属性来扩展目标对象</span></span><br><span class="line">    $.fn.myPlugin.defaults,  <span class="comment">// 默认的一个对象，将属性添加到 target（即&#123;&#125;） 目标对象中</span></span><br><span class="line">    options  <span class="comment">// 多个源后会覆盖前面同名的属性</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样，就再也不会纠结参数的不传或者多个占位传参，挺好。</p><p>实际操作下：先看一个多个参数的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).myPlugin(&#123;</span><br><span class="line">  <span class="string">'mynewname'</span>: <span class="string">'lisi'</span>,</span><br><span class="line">  <span class="string">'mynewage'</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印settings： &#123;name: "zhangsan", age: "20", mynewname: "lisi", mynewage: 22&#125;</span></span><br></pre></td></tr></table></figure><p>再看一个：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).myPlugin(&#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'lisi'</span>,</span><br><span class="line">  <span class="string">'mynewage'</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;name: "lisi", age: "20", mynewage: 22&#125;</span></span><br></pre></td></tr></table></figure></p><p>一看就懂，有则覆盖，无则添加，完美。</p><h4 id="统一命名空间"><a href="#统一命名空间" class="headerlink" title="统一命名空间"></a>统一命名空间</h4><p>由于是jQuery插件，都挂载在 jQuery 对象下，所以恰当命名空间的插件尽可能不与其他插件冲突，甚至是 jQuery 的核心库方法。</p><p>比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;&#125;  <span class="comment">// 定义默认项</span></span><br><span class="line">    <span class="keyword">var</span> methods = &#123;&#125;  <span class="comment">// 定义方法</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;&#125;  <span class="comment">// 定义 myPlugin 命名空间并赋值一个匿名函数</span></span><br><span class="line">&#125;(jQuery)</span><br></pre></td></tr></table></figure></p><h4 id="允许公开访问默认设置"><a href="#允许公开访问默认设置" class="headerlink" title="允许公开访问默认设置"></a>允许公开访问默认设置</h4><p>为了更加的定制化，我们需要暴露默认的设置，这样我们就可以修改设置了。</p><p>首先修改 defaults 变量，为了暴露给外部世界，需要把它赋值给 $.fn 属性。并且为了统一命名空间原则，需要把它作为 myPlugin 的属性，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin.defaults =  &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接着，当使用默认值来合并参数选项时，在项目中只出现一次，即在 init() 方法里，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 可自定义扩展项</span></span><br><span class="line">      options = $.extend(</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;&#125;, </span><br><span class="line">        $.fn.myPlugin.defaults,</span><br><span class="line">        options</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当我们在浏览器里直接测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line">$.fn.myPlugin.defaults.name   <span class="comment">// zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">$.fn.myPlugin.defaults.name = <span class="string">'wangwu'</span></span><br><span class="line"><span class="comment">// "wangwu"</span></span><br></pre></td></tr></table></figure></p><h4 id="维护链式调用性"><a href="#维护链式调用性" class="headerlink" title="维护链式调用性"></a>维护链式调用性</h4><p>使用 <code>return this</code> ，可以维护链式调用性。</p><h4 id="Array-prototype-slice-call"><a href="#Array-prototype-slice-call" class="headerlink" title="Array.prototype.slice.call()"></a>Array.prototype.slice.call()</h4><p><code>Array.prototype.slice.call(arguments)</code>能将具有length属性的对象转成数组 （<code>arguments.toArray().slice()</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">length</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="string">'first'</span>,<span class="number">1</span>:<span class="string">'second'</span>&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(a);   <span class="comment">//Array [ "first", "second" ]</span></span><br></pre></td></tr></table></figure><h2 id="再举个栗子"><a href="#再举个栗子" class="headerlink" title="再举个栗子"></a>再举个栗子</h2><p>项目中经常使用轮播图，我们就在前人的基础上，模仿一下吧（你就说是抄的不就行了麽）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showPhoto</span>(<span class="params">options, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $photoElement = $(options.photoElement);</span><br><span class="line">        <span class="keyword">if</span> (!$photoElement.is(<span class="string">':animated'</span>)) &#123;</span><br><span class="line">          $photoElement.animate(&#123;</span><br><span class="line">            opacity: <span class="number">0.5</span></span><br><span class="line">          &#125;, <span class="number">0</span>).attr(</span><br><span class="line">            <span class="string">'src'</span>,</span><br><span class="line">            options.transformer(options.$thumbnails[index].src)</span><br><span class="line">          ).animate(&#123;</span><br><span class="line">            opacity: <span class="number">1</span></span><br><span class="line">          &#125;, <span class="number">800</span>);</span><br><span class="line">          options.current = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">var</span> methods = &#123;</span><br><span class="line">      init: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">         options = $.extend(</span><br><span class="line">            <span class="literal">true</span>, &#123;&#125;,</span><br><span class="line">            $.fn.slidePhoto.defaults,</span><br><span class="line">            options, &#123;</span><br><span class="line">               current: <span class="number">0</span>, <span class="comment">// 初始值为0</span></span><br><span class="line">               $thumbnails: <span class="keyword">this</span>.filter(<span class="string">'img'</span>), <span class="comment">//选出所有的图片</span></span><br><span class="line">               delay: options.delay &gt;= <span class="number">1000</span> ? options.delay : <span class="number">1000</span>,</span><br><span class="line">            &#125;</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 点击图片，切换对应大图</span></span><br><span class="line">         options.$thumbnails.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, options.$thumbnails.index(<span class="keyword">this</span>));</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示下一张</span></span><br><span class="line">         $(options.nextControl + <span class="string">', '</span> + options.photoElement).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = (options.current + <span class="number">1</span>) % options.$thumbnails.length; <span class="comment">// 取模</span></span><br><span class="line"></span><br><span class="line">            showPhoto(options, index);</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示上一张</span></span><br><span class="line">         $(options.previousControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = options.current === <span class="number">0</span> ? options.$thumbnails.length - <span class="number">1</span> : options.current - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            showPhoto(options, index);</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示第一张</span></span><br><span class="line">         $(options.firstControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, <span class="number">0</span>);</span><br><span class="line">         &#125;).triggerHandler(<span class="string">'click'</span>); <span class="comment">// 主要是初始时触发，触发被选元素上指定的事件，返回事件处理函数的返回值</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示最后一张</span></span><br><span class="line">         $(options.lastControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, options.$thumbnails.length - <span class="number">1</span>);</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 自动播放</span></span><br><span class="line">         <span class="keyword">var</span> tick;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            tick = <span class="built_in">window</span>.setInterval(</span><br><span class="line">               <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  $(options.nextControl).triggerHandler(<span class="string">'click'</span>)</span><br><span class="line">               &#125;, options.delay);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 鼠标移入移出状态</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">mouserStatus</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            $(obj).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (tick) &#123;</span><br><span class="line">                  <span class="built_in">window</span>.clearInterval(tick);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;).mouseleave(autoPlay);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (options.autoPlayControl) &#123;</span><br><span class="line">            autoPlay();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 鼠标滑动暂停、播放</span></span><br><span class="line">         mouserStatus(options.photoElement);</span><br><span class="line">         mouserStatus(options.$thumbnails);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $.fn.slidePhoto = <span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (methods[method]) &#123;</span><br><span class="line">         <span class="keyword">return</span> methods[method].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($.type(method) === <span class="string">'object'</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> methods.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         $.error(<span class="string">'Method '</span> + method + <span class="string">' does not exist on jQuery.slidePhoto'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $.fn.slidePhoto.defaults = &#123;</span><br><span class="line">      photoElement: <span class="string">'img.photomatic-photo'</span>, <span class="comment">// 大图显示</span></span><br><span class="line">      transformer: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name.replace(<span class="string">'thumbnail'</span>, <span class="string">'photo'</span>); <span class="comment">// 将'thumbnail' 替换为 'photo'，即最终返回大图的src属性值</span></span><br><span class="line">      &#125;,</span><br><span class="line">      nextControl: <span class="literal">null</span>, <span class="comment">// 下一张</span></span><br><span class="line">      previousControl: <span class="literal">null</span>, <span class="comment">// 前一张</span></span><br><span class="line">      firstControl: <span class="literal">null</span>, <span class="comment">// 第一张</span></span><br><span class="line">      lastControl: <span class="literal">null</span>, <span class="comment">// 最后一张</span></span><br><span class="line">      autoPlayControl: <span class="literal">false</span>,</span><br><span class="line">      delay: <span class="number">3000</span> <span class="comment">// 延时</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure><p>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#thumbnails-pane img'</span>).slidePhoto(&#123;</span><br><span class="line">    photoElement: <span class="string">'#photo-display'</span>,</span><br><span class="line">    previousControl: <span class="string">'#previous-button'</span>,</span><br><span class="line">    nextControl: <span class="string">'#next-button'</span>,</span><br><span class="line">    firstControl: <span class="string">'#first-button'</span>,</span><br><span class="line">    lastControl: <span class="string">'#last-button'</span>,</span><br><span class="line">    autoPlayControl: <span class="literal">true</span>,</span><br><span class="line">    delay: <span class="number">3000</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>参考：</p><ul><li>《jQuery实战 第三版》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探 this、call 和 apply</title>
      <link href="/2019/05/03/js-this-apply-call/"/>
      <url>/2019/05/03/js-this-apply-call/</url>
      
        <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote><p>JavaScript 中 this 总是指向一个对象</p></blockquote><a id="more"></a><h4 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h4><ol><li>作为对象的方法调用</li></ol><p>this 指向该对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  getA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === obj); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><ol start="2"><li>作为普通函数调用</li></ol><p>当函数不作为对象的属性被调用时，普通函数的 this 总是指向全局对象，浏览器里就是 window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"globalName"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"tyang"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getName()); <span class="comment">// tyang</span></span><br><span class="line"><span class="built_in">console</span>.log(getName()); <span class="comment">// globalName</span></span><br></pre></td></tr></table></figure><p><code>obj.getName()</code> 作为 obj 对象的属性被调用，this 指向 obj 对象;</p><p><code>getName()</code> 使用变量 getName 引用 obj.getName，此时是函数调用方式，this 指向全局 window;</p><p>在严格模式，情况有所不同：this 不会指向全局对象，而是 undefined：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>当函数作为某个对象的方法调用时，this 等于那个对象。不过，匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gName = <span class="string">"The window"</span>;</span><br><span class="line"><span class="keyword">var</span> gObject = &#123;</span><br><span class="line">  gName: <span class="string">"My object"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 返回一个匿名函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.gName;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gObject.getName()()); <span class="comment">// 'The window'</span></span><br><span class="line"><span class="keyword">var</span> getNameFunc = gObject.getName();</span><br><span class="line"><span class="built_in">console</span>.log(getNameFunc()); <span class="comment">// 'The window'</span></span><br></pre></td></tr></table></figure><p>创建了一个全局对象 <code>gName</code>，这个对象包含一个方法 <code>getName()</code>， 这个方法返回一个匿名函数，这个匿名函数返回 <code>this.name</code>。因此调用 <code>gObject.getName()()</code> 会立即执行匿名函数，并返回一个字符串 <code>&#39;The window&#39;</code>。</p><p>为什么匿名函数没有取得包含作用域的 this 对象呢？</p><p>每个函数再被调用的时候，会自动取得两个特殊变量：this 和 arguments，内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。</p><p>所以，可以在外部作用域中设置一个变量来保存 this 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gName = <span class="string">"The window"</span>;</span><br><span class="line"><span class="keyword">var</span> gObject = &#123;</span><br><span class="line">  gName: <span class="string">"My object"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 将 this 对象赋值给 that 变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.gName; <span class="comment">// that 引用着 gObject</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gObject.getName()()); <span class="comment">// 'My object'</span></span><br></pre></td></tr></table></figure><p>当然，arguments 对象也可以如此使用：对该对象的引用保存到另一个闭包能够访问的变量中。</p><ol><li>构造器调用</li></ol><p>当使用 new 运算符调用函数时，该函数会返回一个对象，一般情况下，构造器里的 this 指向返回的这个对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"Lisi"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameObj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(nameObj.name); <span class="comment">// Lisi</span></span><br></pre></td></tr></table></figure><p>但是，当显式返回一个 object 类型的对象时，那最终会返回这个对象，并不是之前的 this：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"Lisi"</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 如果这里不会烦 object 类型的数据，如：return 'wangwu'，就不会返回显式对象</span></span><br><span class="line">    name: <span class="string">"wangwu"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameObj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(nameObj.name); <span class="comment">// wangwu</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Function.prototype.call 或 Function.prototype.apply 调用</li></ol><p>call 和 apply 可以动态地改变传入函数的 this：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personObj = &#123;</span><br><span class="line">  name: <span class="string">"ytao"</span>,</span><br><span class="line">  age: <span class="string">"22"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.call(personObj)); <span class="comment">// ytao22</span></span><br></pre></td></tr></table></figure><h4 id="丢失的-this"><a href="#丢失的-this" class="headerlink" title="丢失的 this"></a>丢失的 this</h4><p>我们一般会重写这个获取 id 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getId(<span class="string">"divBox"</span>);</span><br></pre></td></tr></table></figure><p>那可不可以这样呢：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getId2 = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId2(<span class="string">"divBox"</span>); <span class="comment">// Uncaught TypeError: Illegal invocation</span></span><br></pre></td></tr></table></figure><p>结果直接报错，当 <code>getElementById</code> 方法作为 document 对象的属性被调用时， 方法内部的 this 是指向 document 的。如果 <code>getId2(&#39;divBox&#39;)</code>，相当于是普通函数调用，函数内部的 this 指向的是 window。</p><p>所以，按照这个思路，我们可以这样模拟一下它的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById = (<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> func.apply(<span class="built_in">document</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="built_in">document</span>.getElementById);</span><br><span class="line"></span><br><span class="line">getId3 = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId3(<span class="string">"divBox"</span>);</span><br></pre></td></tr></table></figure><h3 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h3><blockquote><p>fun.apply(thisArg, [argsArray])</p><p>fun.call(thisArg, arg1, arg2, …)</p></blockquote><p>在函数式编程中，call 和 apply 方法尤为有用，两者用法一致，只是传参的形式上有所区别而已。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>apply() 接受两个参数，第一个参数指定了函数体内 this 对象，第二个是数组或者类数组，apply() 方法将这个集合中的元素作为参数传递给被调用的函数。</p><p>call() 方法的作用和 apply() 方法类似，区别就是 call()方法接受的是参数列表，而 apply()方法接受的是一个参数数组。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">Function​.prototype​.apply()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">Function​.prototype​.call()</a></li></ul><p>第一个参数为 null，函数体内的 this 会指向默认的宿主对象，但是在严格模式下，依然是 null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> applyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">&#125;;</span><br><span class="line">applyFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> applyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">null</span>);</span><br><span class="line">&#125;;</span><br><span class="line">applyFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ol><li>改变 this 指向</li></ol><p>假如在一个点击事件函数中有一个内部函数 func，当点击事件被触发时，就会出现如下情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"divBox"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// undefined，这里的 this 指向了 window</span></span><br><span class="line">  &#125;;</span><br><span class="line">  func();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时，我们用 call() 来改变一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"divBox"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  &#125;;</span><br><span class="line">  func.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟 bind 方法</li></ol><blockquote><p>function.bind(thisArg[, arg1[, arg2[, …]]])</p></blockquote><p>bind()方法创建一个新的函数，在调用时设置 this 关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// 保存原函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回新函数</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>); <span class="comment">// 将传入的 context 当做新函数体内的 this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindObj = &#123;</span><br><span class="line">  name: <span class="string">"tyang"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// tyang</span></span><br><span class="line">&#125;.bind(bindObj);</span><br><span class="line"></span><br><span class="line">bindFunc();</span><br></pre></td></tr></table></figure><p>这是一个简化版的 <code>Function.prototype.bind</code>实现，<code>self.apply(context, arguments)</code>才是执行原来的 bindFunc 函数，并且指定 context 对象为 bindFunc 函数体内的 this。</p><p>我们再继续修改下，使之可以预先添加一些参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">    context = [].shift.call(<span class="built_in">arguments</span>), <span class="comment">// 获取参数中第一个为绑定的this上下文</span></span><br><span class="line">    args = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将剩余的参数转化为数组</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回新函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))); <span class="comment">//arguments 为新函数的参数，即传入的 3，4</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindObj = &#123;</span><br><span class="line">  name: <span class="string">"lisisi"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// lisisi</span></span><br><span class="line">  <span class="built_in">console</span>.log([a, b, c, d]); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">&#125;.bind(bindObj, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">bindFunc(<span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><code>self.apply(context, [].concat.call(args, [].slice.call(arguments)));</code>，执行新函数的时候，会把之前传入的 context 作为 this，<code>[].slice.call(arguments)</code>将新函数传入的参数转化为数组，并作为<code>[].concat.call(args)</code>的给定参数，组合两次，作为新函数最终的参数。</p><ol start="3"><li>借用其他对象的方法</li></ol><p>第一种，”借用构造函数“实现一些类似继承的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  A.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">B.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bbb = <span class="keyword">new</span> B(<span class="string">"Yangtao"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bbb.getName()); <span class="comment">//Yangtao</span></span><br></pre></td></tr></table></figure><p>第二种，给类数组对象使用数组方法，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>再比如之前用到的，把 arguments 转成真正的数组的时候可以借用 <code>Array.prototype.slice.call(arguments)</code>，想截去头一个元素时，借用<code>Array.prototype.shift.call(arguments)</code></p><p>虽然我们可以把”任意“对象传入 <code>Array.prototype.push</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aObj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(aObj, <span class="string">"first"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aObj.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(aObj[<span class="number">0</span>]); <span class="comment">// first</span></span><br></pre></td></tr></table></figure><p>但是，这个对象也得满足以下两个条件：</p><ul><li>对象本身要可以存取属性</li><li>对象的 length 属性可读写</li></ul><p>如果是其他类型，比如 number，无法存取；比如函数，length 属性不可写，使用 call 或 apply 就会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(num, <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num.length); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(funcObj, <span class="string">"3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(funcObj.length); <span class="comment">// Uncaught TypeError: Cannot assign to read only property 'length' of function 'function () &#123;&#125;'</span></span><br></pre></td></tr></table></figure><p>学习资料：</p><ul><li>《JavaScript 高程 3》第七章</li><li>《JavaScript 设计模式与开发实践 · 曾探》第 2 章</li></ul><p>发布：</p><ul><li>掘金<a href="https://juejin.im/post/5cb915546fb9a0688539b53b" target="_blank" rel="noopener">《初探 this、call 和 apply》</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探 JavaScript 的变量</title>
      <link href="/2019/02/25/js-var/"/>
      <url>/2019/02/25/js-var/</url>
      
        <content type="html"><![CDATA[<h3 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h3><a id="more"></a><p><code>ECMAScript</code>变量一般有两种数据类型的值：<strong>基本类型和引用类型</strong>。</p><ul><li>基本类型： 简单的数据段：<code>Undefined, Null, Boolean, Number, String</code></li><li>引用类型：多个值构成的对象；</li></ul><h4 id="1-动态的属性"><a href="#1-动态的属性" class="headerlink" title="1. 动态的属性"></a>1. 动态的属性</h4><p>定义两者的值：创建一个变量并为其变量赋值；</p><p>执行两者的值：</p><ul><li>引用类型：可以添加、删除属性和方法；</li><li>基本类型：不能添加、删除属性和方法；</li></ul><p>比如：引用类型 a，可以添加属性 name age<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.name = <span class="string">"杨子龙"</span>;</span><br><span class="line">a.age = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);                      <span class="comment">//杨子龙</span></span><br></pre></td></tr></table></figure></p><p>基本类型 name 无法添加属性 age<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"杨子龙"</span>;</span><br><span class="line">name.age  = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.age);                 <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：只能给引用类型值动态地添加属性，以便将来使用。</p><h4 id="2-赋值变量值"><a href="#2-赋值变量值" class="headerlink" title="2. 赋值变量值"></a>2. 赋值变量值</h4><p>从一个变量向另一个变量复制基本类型值和引用类型值时：</p><ul><li>基本类型：在变量对象上创建一个新值，并将其值复制给新变量分配的位置上；（完全独立的两个变量）<br>例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(b);                 <span class="comment">//111</span></span><br></pre></td></tr></table></figure><p>代码中可知：变量b的值只是变量a的值的一个副本，两者的值111是完全独立的。</p><ul><li>引用类型：将存储在变量对象中的值复制一份放到为新变量分配的空间中；（引用同一个对象的两个变量）</li></ul><p>引用类型的值的副本实际是一个指针，指向存储在堆中的一个对象。<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"杨子龙"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2,name);                 <span class="comment">// Object &#123; name="杨子龙"&#125; 杨子龙</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：obj1和obj2都指向同一个对象Object；所以，为obj1添加的name属性，通过obj2也可以访问的到。</p><h4 id="3-传递参数"><a href="#3-传递参数" class="headerlink" title="3. 传递参数"></a>3. 传递参数</h4><p>我们都知道基本类型是<strong>按值访问</strong>的，因为可以访问保存在变量中的实际的值。<br>所有函数的参数都是<strong>按值传递</strong>的。</p><ul><li>基本类型：基本类型值的传递如同基本类型变量的复制一样；<br>在向参数传递值，被传递的值会被复制给一个局部变量（命名参数），因此这个局部变量的变化不会反映在函数的外部。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  num += <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result = fn(a);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(a);             <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>代码中可知：参数num和变量a互不相识，只是有着相同的值而已，用完之后，你还是你，我还是我，互不干政。</p><ul><li>引用类型：引用类型的传递如同引用类型变量的复制一样；<br>在向参数传递值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。</li></ul><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.name = <span class="string">'杨子龙'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">fn(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);           <span class="comment">//杨子龙</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：在这个函数内部，参数obj和变量person引用的是同一个对象Object，所以，你不动我也不动，你动我也动，你中有我，我中有你，情义绵绵，经久不息……</p><p>也就是说：即使变量person是按值传递的，但是参数obj（想象成局部变量）还是会按引用来访问同一个对象。</p><blockquote><p> 访问变量有按值和按引用两种方式，参数只能按值传递。</p></blockquote><h4 id="4-检测类型"><a href="#4-检测类型" class="headerlink" title="4. 检测类型"></a>4. 检测类型</h4><ul><li>基本类型：<code>typeof</code></li><li>引用类型：<code>instanceof</code>（对象或null）</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Yang Zilong'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> e;</span><br><span class="line"><span class="keyword">var</span> g = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;  <span class="comment">// 比较特殊</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">//number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d); <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> g); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> h); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><blockquote><p>所用引用类型的值都是Object的实例。</p></blockquote><p>如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/.at/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Object</span>);        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Array</span>);         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">Object</span>);    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>使用<code>instanceof</code>检测基本类型，会返回<code>false</code>，基本类型不是对象。</p></blockquote><ul><li>参考资料：《JavaScript高级程序设计》（第三版）第四章</li><li>同步于： <a href="https://juejin.im/post/5c73a28cf265da2de52d9390" target="_blank" rel="noopener">掘金</a>、<a href="https://www.imooc.com/article/280082" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探JavaScript之Prototype</title>
      <link href="/2019/02/25/js-prototype/"/>
      <url>/2019/02/25/js-prototype/</url>
      
        <content type="html"><![CDATA[<h2 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a><code>Array.prototype</code></h2><p><strong>每一个函数，都有一个 prototype 属性</strong>，不管是你自定义的，还是函数内置的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn.prototype)  <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.prototype.constructor === fn)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c93f8c42?w=410&amp;h=206&amp;f=png&amp;s=18863" alt="image"></p><p>这里的 <code>fn.prototype</code> 打印出一个对象，对象里的 <code>constructor</code> 属性又指回了该函数本身 fn。</p><p>即<strong>每个原型都有一个 consctructor 属性指向关联的构造函数</strong>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span> === <span class="built_in">Array</span>.prototype.constructor <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9502534?w=417&amp;h=258&amp;f=png&amp;s=25521" alt="image"></p><p>我们接着看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype) <span class="comment">// [constructor: ƒ, concat: ƒ, copyWithin: ƒ, fill: ƒ, find: ƒ, …]</span></span><br></pre></td></tr></table></figure><p>这里，除了 constructor 属性，还有其他内置的属性，即我们经常使用的操作数组的方法。</p><h2 id="proto-隐式原型"><a href="#proto-隐式原型" class="headerlink" title="__proto__(隐式原型)"></a><code>__proto__</code>(隐式原型)</h2><p><strong>所有通过函数 <code>new</code> （构造函数）出来的东西，都有一个 <code>__proto__</code> 指向该函数的 <code>prototype</code></strong>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span> === <span class="built_in">Array</span>.prototype.constructor <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9690ff1?w=427&amp;h=333&amp;f=png&amp;s=32313" alt="image"></p><p>说白了，通过构造函数 new 出来的函数，该函数的<code>__proto__</code>属性指向构造函数的原型对象（即<code>Array.prototype</code>），所以，该函数与构造函数之间没有什么关联，是通过 原型对象 产生了联系，这也就是原型链继承的雏形吧。</p><p>举个关于继承 extends 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog()</span><br><span class="line"></span><br><span class="line">dog.eat()  <span class="comment">// Animal eat</span></span><br><span class="line">dog.bark()  <span class="comment">// Dog bark</span></span><br></pre></td></tr></table></figure><p>上面看明白了，那么ES6的继承我们也就可以明白原理了，即 <code>class Dog extends Animal</code> 相当于 <code>Dog.prototype = new Animal()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name) </span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)</span><br><span class="line">dog.eat()</span><br><span class="line">dog.bark()</span><br></pre></td></tr></table></figure><p>接下来，我们就清楚为什么能这样：</p><p><strong>当我们要使用一个对象（数组）的某个功能时，如果该对象本身具有这个功能，直接调用，没有的话，那就去自身的<code>__proto__</code>属性中去找</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  myfn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'myfn'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.myfn() <span class="comment">// 'myfn'</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">'myfn'</span>)  <span class="comment">//true</span></span><br><span class="line">obj.toString()  <span class="comment">// "[object Object]"</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">'toString'</span>)  <span class="comment">// false</span></span><br><span class="line">obj.__proto__.hasOwnProperty(<span class="string">'toString'</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>hasOwnProperty()</code>就可以得出这个属性是否是属于该对象本身的属性:</p><ul><li>myfn 是我们自定义的，<code>obj.hasOwnProperty(&#39;myfn&#39;)</code>为 true</li><li>toString() 我们不是自定义的，却可以使用，查一下是否属于自定义属性，<code>obj.hasOwnProperty(&#39;toString&#39;)</code>，答案为false</li><li>既然不属于自定义属性，那就去自身的<code>__proto__</code>去找，然后去原型对象上查一下，<code>obj.__proto__.hasOwnProperty(&#39;toString&#39;)</code>，哦，原来在这儿</li></ul><p>在源码中，我们经常看到<code>Array.prototype.concat</code>，其实就是我们使用的<code>[].concat</code>，<code>[]</code>，因为<code>[].__proto__ === Array.prototype</code></p><h2 id="proto-是可修改的"><a href="#proto-是可修改的" class="headerlink" title="__proto__是可修改的"></a><code>__proto__</code>是可修改的</h2><p>比如，我们新增一个<code>addClass()</code>方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.__proto__.addClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">arr.addClass();   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9bd1a05?w=542&amp;h=407&amp;f=png&amp;s=46941" alt="image"></p><p>但是，这里要注意，如下重写之后，就没有了诸如 push、concat等方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.__proto__ = &#123;</span><br><span class="line">    addClass: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">arr.push(<span class="number">3</span>)  <span class="comment">//Uncaught TypeError: arr.push is not a function</span></span><br></pre></td></tr></table></figure><h3 id="Object-prototype的原型"><a href="#Object-prototype的原型" class="headerlink" title="Object.prototype的原型"></a><code>Object.prototype</code>的原型</h3><p>万物皆对象，到最后依旧是对象，最后这个东东是个啥，我们来看一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数 Person</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例对象 myfn，它的 隐式原型 指向了其构造函数的 原型对象</span></span><br><span class="line"><span class="keyword">var</span> myfn = <span class="keyword">new</span> Person()</span><br><span class="line">myfn.__proto__ === Person.prototype  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那构造函数 Person 的 隐式原型又指向了谁呢</span></span><br><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function呐</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个呢</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">fn.prototype.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>  <span class="comment">//"object"</span></span><br></pre></td></tr></table></figure></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><p>所有的函数都有一个 <code>prototype</code>属性，该属性指向了一个对象，该对象就是调用该构造函数而创建出来的实例（如myfn）的原型（如<code>myfn.__proto__</code>）,即：<code>myfn.__proto__ === Person.prototype</code></p></li><li><p>所有的对象（除null）都具有一个<code>__proto__</code>属性，该属性指向该对象的原型，比如：<code>myfn.__proto__ === Person.prototype</code></p></li><li><p>原型也是一个对象，根据上条，那原型的原型，就是<code>Object.prototype</code></p></li><li><p>最后的null对象，可以当做是 什么都没有</p></li></ul><p>盗一张图，我们就更加清楚了（蓝色这条表示的是原型链）<br><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9a3b9c5?w=590&amp;h=525&amp;f=png&amp;s=40652" alt="image"></p><p>PS: 关于原型对象这一块本来就很绕，自己看懂了不一定就真的懂了，自己梳理的时候还是漏洞百出，而且还乱，就算现在我梳理了一遍，过些日子，我要是不再继续翻阅，应该又讲不通了，下面的资料很详细，在我学习的过程中提供了很大的帮助，在此感谢作者们！</p><p>参考资料：</p><ul><li><a href="https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684" target="_blank" rel="noopener">js原型链基础</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript深入之从原型到原型链 </a></li><li><a href="https://www.cnblogs.com/wangfupeng1988/p/3978131.html" target="_blank" rel="noopener">深入理解javascript原型和闭包（3）——prototype原型</a></li></ul><p>同步于 <a href="https://juejin.im/post/5c73950651882562276c4bb2" target="_blank" rel="noopener">掘金</a> 、<a href="https://www.qdfuns.com/article.php?mod=view&amp;id=27061d05c8bcf1e650ddddc75ad9c127&amp;uid=32286" target="_blank" rel="noopener">QDfuns</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Debounce 和 Throttle</title>
      <link href="/2019/02/24/debounce-throttle/"/>
      <url>/2019/02/24/debounce-throttle/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://www.tuicool.com/articles/YvyQRrv" target="_blank" rel="noopener">Debounce 和 Throttle 的原理及实现</a><br><a id="more"></a></p><h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>如输入框时，只在最后提交的时候校验，即：将多次高频率操作优化为只在最后一次执行</p><p>思路：每次触发事件时，清除之前的定时器方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'in'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(immediate &amp;&amp; !timer) &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timer) clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'timer'</span>)</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, wait);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'被触发了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onfocus = debounce(test, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>降低频率，每隔一段时间后执行一次，将高频率操作优化为低频率操作，如滚动条事件，resize事件</p><p>思路：每次触发事件时都判断当前是否有等待执行的延时函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throtte</span>(<span class="params">fn, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> callNow = immediate</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(callNow) &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">      callNow = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, throtte(test, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探Class、继承、Promise 及 ES6 常用功能</title>
      <link href="/2019/02/24/es6-class/"/>
      <url>/2019/02/24/es6-class/</url>
      
        <content type="html"><![CDATA[<h3 id="Class-语法糖"><a href="#Class-语法糖" class="headerlink" title="Class - 语法糖"></a>Class - 语法糖</h3><ul><li>Class 在语法上更贴合面向对象的写法</li><li>Class 实现继承更加易读、易理解</li><li>更易于写 java 等后端语言的使用</li><li>本质还是语法糖，使用 prototype</li></ul><a id="more"></a><h4 id="ES5中的写法"><a href="#ES5中的写法" class="headerlink" title="ES5中的写法"></a>ES5中的写法</h4><p>获取实例对象的原型对象<code>Object.getPrototypeOf(m2)</code></p><p>判断实例与构造函数的原型对象是否有关系<code>MathHandle2.prototype.isPrototypeOf(m2)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathHandle2</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x</span><br><span class="line">  <span class="keyword">this</span>.y = y</span><br><span class="line">&#125;</span><br><span class="line">MathHandle2.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">new</span> MathHandle2(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m2.add())</span><br><span class="line"><span class="built_in">console</span>.log(m2.__proto__ === MathHandle2.prototype)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例对象的原型对象Object.getPrototypeOf()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(m2) === MathHandle2.prototype)  <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 判断实例与构造函数的原型对象是否有关系isPrototypeOf()</span></span><br><span class="line"><span class="built_in">console</span>.log(MathHandle2.prototype.isPrototypeOf(m2))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h4 id="ES6中的写法"><a href="#ES6中的写法" class="headerlink" title="ES6中的写法"></a>ES6中的写法</h4><p>对象实例的隐式原型（属性）指向构造函数的原型对象<code>m.__proto__ === MathHandle.prototype</code></p><p>构造函数的原型对象的constructor属性指回了构造函数本身<code>MathHandle.prototype.constructor === MathHandle</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathHandle</span> </span>&#123;   <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m.add())  <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象实例的隐式原型（属性）指向构造函数的原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(m.__proto__ === MathHandle.prototype)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的原型对象的constructor属性指回了构造函数本身</span></span><br><span class="line"><span class="built_in">console</span>.log(MathHandle.prototype.constructor === MathHandle)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog()</span><br><span class="line">hashiqi.eat()  <span class="comment">// Animal eat</span></span><br><span class="line">hashiqi.bark()  <span class="comment">// Dog bark</span></span><br></pre></td></tr></table></figure><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name) </span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashiqi = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)</span><br><span class="line">hashiqi.eat()</span><br><span class="line">hashiqi.bark()</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>new Promise 实例，而且要 return</li><li>new Promise 时要传入函数，函数有 resolve、reject 两个函数</li><li>成功时执行 resolve()，失败时执行 reject()</li><li>then 监听结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject()</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> src1 = <span class="string">'https://img3.mukewang.com/5c611772085966af06000338-240-135.jpg'</span></span><br><span class="line">  <span class="keyword">var</span> src2 = <span class="string">'https://img2.mukewang.com/5c6b7cff08d6895906000338-240-135.jpg'</span></span><br><span class="line">  <span class="keyword">var</span> result1 = loadImg(src1)</span><br><span class="line">  <span class="keyword">var</span> result2 = loadImg(src2)</span><br><span class="line"></span><br><span class="line">  result1.then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一张图片'</span>, img.src)</span><br><span class="line">    <span class="keyword">return</span> result2  <span class="comment">//串联操作</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第二张图片'</span>, img.src)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>) </span>&#123;  <span class="comment">// 统一捕获错误信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(ex)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Promise.all 接受一个 promise 对象的数组，待全部完成之后，统一执行 success</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> result3 = loadImg(src1)</span><br><span class="line">  <span class="keyword">var</span> result4 = loadImg(src2)</span><br><span class="line">  <span class="built_in">Promise</span>.all([result3, result4]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Promise.race 接受一个包含多个 promise 对象的数组，只要有一个完成，就执行 success</span></span><br><span class="line">  <span class="built_in">Promise</span>.race([result3,result4]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'race:'</span>, data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="ES6常用功能"><a href="#ES6常用功能" class="headerlink" title="ES6常用功能"></a>ES6常用功能</h3><ul><li>let const</li><li>多行字符串、模板变量</li><li>解构赋值</li><li>块级作用域</li><li>函数默认参数</li><li>箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let const</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span>;</span><br><span class="line">i = <span class="number">20</span>;  <span class="comment">// Uncaught SyntaxError: Identifier 'i' has already been declared</span></span><br><span class="line"><span class="keyword">const</span> j = <span class="number">100</span></span><br><span class="line">j = <span class="number">20</span>  <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串、模板变量</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'yangtao'</span>, age = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构赋值</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;a, b&#125; = obj</span><br><span class="line"><span class="comment">// 等同于（对象按照属性）</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = obj.a,</span><br><span class="line">    b = obj.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'xxx'</span>, <span class="string">'yyy'</span>, <span class="string">'zzz'</span>]</span><br><span class="line"><span class="keyword">const</span> [x, z] = arr</span><br><span class="line"><span class="comment">// 等同于(数组按照索引)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'xxx'</span>, <span class="string">'yyy'</span>, <span class="string">'zzz'</span>]</span><br><span class="line"><span class="keyword">var</span> x = arr[<span class="number">0</span>],</span><br><span class="line">    z = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域</span></span><br><span class="line"><span class="keyword">const</span> myObj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(_item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">a,b=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> myarr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">myarr.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br><span class="line">myarr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="built_in">console</span>.log(item, index))</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> myarr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">myarr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">myarr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this指向很诡异</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>)  <span class="comment">// real &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">// window</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">10</span>&#125;)</span><br><span class="line"><span class="comment">// 使用箭头函数修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>)  <span class="comment">// real &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  arr.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>))  <span class="comment">// &#123;a: 10&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">10</span>&#125;)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>); <span class="comment">// real &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(_this);</span><br><span class="line">  &#125;); <span class="comment">// &#123;a: 10&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123; <span class="attr">a</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="关于-JS-众多模块化标准"><a href="#关于-JS-众多模块化标准" class="headerlink" title="关于 JS 众多模块化标准"></a>关于 JS 众多模块化标准</h3><ul><li>没有模块化</li><li>AMD成为标准，require.js(也有CMD)</li><li>前端打包工具，是node.js模块化可以被使用</li><li>ES6出现，想统一现在所有模块化标准</li><li>nodejs积极支持，浏览器尚未统一</li></ul><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><ul><li>语法：import export(注意有无default)</li><li>环境：babel编译 ES6 语法，模块化可用 webpack 和 rollup</li><li>扩展：对模块化标准统一的期待</li></ul><h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><ul><li>rollup 功能单一，webpack 功能强大</li><li>参考设计原则和《Linux/Unix设计思想》</li><li>工具要尽量功能单一，可集成，可扩展</li><li>gulp + rollup</li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>说一说常见的请求头和相应头都有什么呢</title>
      <link href="/2019/02/20/header-response/"/>
      <url>/2019/02/20/header-response/</url>
      
        <content type="html"><![CDATA[<h3 id="1-请求-客户端-gt-服务端-request"><a href="#1-请求-客户端-gt-服务端-request" class="headerlink" title="1.请求(客户端-&gt;服务端[request])"></a>1.请求(客户端-&gt;服务端[request])</h3><a id="more"></a><ul><li><code>GET(请求的方式) /newcoder/hello.html</code>(请求的目标资源) <code>HTTP/1.1</code>(请求采用的协议和版本号) </li><li><code>Accept: */*</code>(客户端能接收的资源类型) </li><li><code>Accept-Language: en-us</code>(客户端接收的语言类型) </li><li><code>Connection: Keep-Alive</code>(维护客户端和服务端的连接关系) </li><li><code>Host: localhost:8080</code>(连接的目标主机和端口号) </li><li><code>Referer: http://localhost/links.asp</code>(告诉服务器我来自于哪里) </li><li><code>User-Agent: Mozilla/4.0</code>(客户端版本号的名字) </li><li><code>Accept-Encoding: gzip, deflate</code>(客户端能接收的压缩数据的类型) </li><li><code>If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT</code>(缓存时间)  </li><li><code>Cookie</code>(客户端暂存服务端的信息) </li><li><code>Date: Tue, 11 Jul 2000 18:23:51 GMT</code>(客户端请求服务端的时间)</li></ul><h3 id="2-响应-服务端-gt-客户端-response"><a href="#2-响应-服务端-gt-客户端-response" class="headerlink" title="2.响应(服务端-&gt;客户端[response])"></a>2.响应(服务端-&gt;客户端[response])</h3><ul><li><code>HTTP/1.1</code>(响应采用的协议和版本号) <code>200</code>(状态码) <code>OK</code>(描述信息)</li><li><code>Location: http://www.baidu.com</code>(服务端需要客户端访问的页面路径) </li><li><code>Server:apache tomcat</code>(服务端的Web服务端名)</li><li><code>Content-Encoding: gzip</code>(服务端能够发送压缩编码类型) </li><li><code>Content-Length: 80</code>(服务端发送的压缩数据的长度) </li><li><code>Content-Language: zh-cn</code>(服务端发送的语言类型) </li><li><code>Content-Type: text/html; charset=GB2312</code>(服务端发送的类型及采用的编码方式)</li><li><code>Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT</code>(服务端对该资源最后修改的时间)</li><li><code>Refresh: 1;url=http://www.it315.org</code>(服务端要求客户端1秒钟后，刷新，然后访问指定的页面路径)</li><li><code>Content-Disposition: attachment; filename=aaa.zip</code>(服务端要求客户端以下载文件的方式打开该文件)</li><li><code>Transfer-Encoding: chunked</code>(分块传递数据到客户端）  </li><li><code>Set-Cookie:SS=Q0=5Lb_nQ; path=/search</code>(服务端发送到客户端的暂存数据)</li><li><code>Expires: -1</code>//3种(服务端禁止客户端缓存页面数据)</li><li><code>Cache-Control: no-cache</code>(服务端禁止客户端缓存页面数据)  </li><li><code>Pragma: no-cache</code>(服务端禁止客户端缓存页面数据)   </li><li><code>Connection: close(1.0)/(1.1)Keep-Alive</code>(维护客户端和服务端的连接关系)  </li><li><code>Date: Tue, 11 Jul 2000 18:23:51 GMT</code>(服务端响应客户端的时间)</li></ul><blockquote><p>在服务器响应客户端的时候，带上<code>Access-Control-Allow-Origin</code>头信息，解决跨域的一种方法。</p></blockquote><p>原文地址：<a href="https://www.nowcoder.com/test/question/done?tid=21233299&amp;qid=55682#summary" target="_blank" rel="noopener">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于闭包的一道面试题</title>
      <link href="/2019/02/19/js-closure/"/>
      <url>/2019/02/19/js-closure/</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="https://www.nowcoder.com/questionTerminal/da4115e308c948169a9a73e50d09a3e7?toCommentId=2555046" target="_blank" rel="noopener">依次点击 4 个 li 标签，哪一个选项是正确的运行结果</a></p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>现有如下 html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依次点击 4 个 li 标签，运行结果是什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> length = elements.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">  elements[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回答（依次弹出-4，4，4，4）"><a href="#回答（依次弹出-4，4，4，4）" class="headerlink" title="回答（依次弹出 4，4，4，4）"></a>回答（依次弹出 4，4，4，4）</h3><p>以下是我当时在牛客网回答时从《JavaScript 高级程序设计》书中抄的：</p><blockquote><p>这是由于作用域链的这种配置机制引出的一个副作用，即闭包只能取得包含函数中任何变量的最后一个值。闭包所保存的是整个变量对象，而不是某个特殊的变量。</p></blockquote><p>这里的闭包函数<code>elements[i].onclick=function(){alert(i);}</code>的作用域链中保存着闭包的活动对象（这里为空）和全局变量对象（主要是 i）,所以，它们引用的是同一个变量 i；当点击完成后，变量 i=4,也就是每个内部函数 i 的值都是 4；</p><p>可以通过创建另一个匿名函数强制让闭包的行为符合预期：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line">  <span class="keyword">var</span> length = elements.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    elements[i].onclick = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(num);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在调用匿名函数时，我们传入变量 i，由于参数是按值传递的，所以就会将变量 i 的当前值复制给参数 num。而这个匿名函数内部，又创建并 alert 了一个访问 num 的闭包。这样，每一次点击都有 num 变量的一个副本，因此可以返回各自不同的数值。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Node.js+Express+MongoDB 建站实例</title>
      <link href="/2019/02/17/node-express/"/>
      <url>/2019/02/17/node-express/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化一个-Express"><a href="#初始化一个-Express" class="headerlink" title="初始化一个 Express"></a>初始化一个 Express</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createError = <span class="built_in">require</span>(<span class="string">'http-errors'</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'morgan'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载路由控制</span></span><br><span class="line"><span class="keyword">var</span> indexRouter = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"><span class="keyword">var</span> usersRouter = <span class="built_in">require</span>(<span class="string">'./routes/users'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 ejs 模板引擎即模板文件位置</span></span><br><span class="line">app.set(<span class="string">'views'</span>, path.join(__dirname, <span class="string">'views'</span>));</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'ejs'</span>);</span><br><span class="line"><span class="comment">// 定义日志和输出级别</span></span><br><span class="line">app.use(logger(<span class="string">'dev'</span>));  </span><br><span class="line"><span class="comment">// JSON 解析中间件</span></span><br><span class="line">app.use(express.json());</span><br><span class="line"><span class="comment">// application/x-www-form-urlencode请求解析中间件</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"><span class="comment">// 定义cookie解析器</span></span><br><span class="line">app.use(cookieParser());</span><br><span class="line"><span class="comment">// HTTP 伪造中间件</span></span><br><span class="line">app.use(express.methodOverride())</span><br><span class="line"><span class="comment">// 定义静态文件目录</span></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配路径和路由</span></span><br><span class="line">app.use(<span class="string">'/'</span>, indexRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 404 错误处理</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  next(createError(<span class="number">404</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 500 错误处理及错误堆栈跟踪</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// set locals, only providing error in development</span></span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(<span class="string">'env'</span>) === <span class="string">'development'</span> ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render the error page</span></span><br><span class="line">  res.status(err.status || <span class="number">500</span>);</span><br><span class="line">  res.render(<span class="string">'error'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><h2 id="实例目录"><a href="#实例目录" class="headerlink" title="实例目录"></a>实例目录</h2><ul><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-01-init.md" target="_blank" rel="noopener">网站初始化，实现 GET 和 POST 的 Ajax 请求</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">登录模块</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">上传图片模块</a></li></ul><blockquote><p>原文地址：<a href="https://github.com/jiaoyanlin/myNodeProject" target="_blank" rel="noopener">Node.js+Express+MongoDB 建站实例</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue经典实例 ToDoList</title>
      <link href="/2019/02/17/vue-todolist/"/>
      <url>/2019/02/17/vue-todolist/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用webpack构建一个vue的简易开发环境并添加一个Todo demo</p></blockquote><h3 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h3><h4 id="传送门：Demo-amp-amp-Github"><a href="#传送门：Demo-amp-amp-Github" class="headerlink" title="传送门：Demo &amp;&amp; Github"></a>传送门：<a href="https://istaotao.com/todo/dist/" target="_blank" rel="noopener">Demo</a> &amp;&amp; <a href="https://github.com/yangtao2o/todo" target="_blank" rel="noopener">Github</a></h4><a id="more"></a><p>下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/todo.git</span><br></pre></td></tr></table></figure></p><p>下载依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>本地运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>访问地址：<code>http://localhost:8000</code></p><p>生产运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Vue.js实战》之前端路由与vue-router</title>
      <link href="/2019/02/04/vue-router/"/>
      <url>/2019/02/04/vue-router/</url>
      
        <content type="html"><![CDATA[<h3 id="前端路由与-vue-router"><a href="#前端路由与-vue-router" class="headerlink" title="前端路由与 vue-router"></a>前端路由与 vue-router</h3><a id="more"></a><h4 id="什么是前端路由"><a href="#什么是前端路由" class="headerlink" title="什么是前端路由"></a>什么是前端路由</h4><blockquote><p>每次 GET 或者 POST 请求在服务端有一个专门的正则配置列表，然后匹配到具体的一条路径后，分发到不同的 Controller，进行各种操作，最终将 html 或数据返回给前端，这就完成了一次 IO。</p></blockquote><p>前端路由的实现有两种：</p><ul><li>URL的hash，即锚点（#），js 通过 hashChange 事件监听 url 的变化</li><li>HTML5 的 History 模式</li></ul><p>优点：</p><ul><li>页面持久性，如音乐网站</li><li>前后端彻底分离，如 Angular 的 ngRouter，React 的 ReactRouter，还有 Vue 的 vue-router</li></ul><p>需要考虑的问题：</p><ul><li>页面的拔插性</li><li>页面的生命周期</li><li>内存管理等</li></ul><h4 id="vue-router-基本用法"><a href="#vue-router-基本用法" class="headerlink" title="vue-router 基本用法"></a>vue-router 基本用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建目录 router</span></span><br><span class="line"><span class="comment"># 安装 vue-router</span></span><br><span class="line">npm i -S vue-router</span><br><span class="line"></span><br><span class="line"><span class="comment"># index.js添加</span></span><br><span class="line">import VueRouter from <span class="string">'vue-router'</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure><p>在目录 router 新建 views 目录，接着新建 about.vue、 index.vue、 user.vue等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> Routers = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../router/views/index.vue'</span>], resolve)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../router/views/about.vue'</span>], resolve)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'../index'</span>  <span class="comment">// 404指向首页</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouterConfig = &#123;</span><br><span class="line">  <span class="comment">// 使用HTML5的history路由模式</span></span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: Routers</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(RouterConfig);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(root);</span><br></pre></td></tr></table></figure><p>路由模式通过HTML5的History路由模式，通过 ‘/’设置路径。修改package.json:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack-dev-server --config webpack.config.js --mode=development --history-api-fallback"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>增加了 <code>--history-api-fallback</code>，所有的路由都指向<code>index.html</code>。</p><p>然后在根实例<code>App.vue</code>中添加<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p>vue-router 有两种跳转页面的方式：</p><ul><li><code>&lt;router-link&gt;</code>组件，会渲染成 <code>&lt;a&gt;</code> 标签，如：<code>&lt;router-link to=&quot;/about&quot;&gt;跳转到 about&lt;/router-link&gt;</code><ul><li>tag : <code>tag=&quot;li&quot;</code> 标签会被渲染成指定的 <code>&lt;li&gt;</code></li><li>replace : 无历史记录</li><li>active-class</li></ul></li><li>使用router实例： <code>$router</code> 方法，如：<code>this.$router.push(&#39;/index&#39;);</code><ul><li>replace : <code>this.$router.replace(&#39;/index&#39;)</code>;</li><li>go : <code>this.$router.go(-1)</code>;<h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><blockquote><p>问题：如何在SPA项目中，修改网页的标题？</p></blockquote></li></ul></li></ul><p>一般我们是通过<code>window.document.title = &#39;标题&#39;</code>来修改，但是在什么时候修改，这是个问题。</p><p>vue-router 提供了导航钩子 <code>beforeEach()</code> 和 <code>afterEach()</code>，它们会在路由即将改变前和改变后触发。</p><p>这样就解决了页面众多，维护麻烦的问题。（mounted钩子）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 从路由对象 to 里获取 meta 信息</span></span><br><span class="line">  <span class="built_in">window</span>.document.title = to.meta.title;</span><br><span class="line">  <span class="comment">// 判断页面是否登录</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'token'</span>)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 页面跳转回来滚动条默认在顶端</span></span><br><span class="line">  <span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="状态管理与-Vuex"><a href="#状态管理与-Vuex" class="headerlink" title="状态管理与 Vuex"></a>状态管理与 Vuex</h3><h4 id="状态管理与使用场景"><a href="#状态管理与使用场景" class="headerlink" title="状态管理与使用场景"></a>状态管理与使用场景</h4><p>组件的基本运行模式：一个组件分为数据和视图，数据更新时，视图也跟着更新…视图中又可以绑定一些事件，它们触发methods里指定的方法，从而可以改变数据、更新视图。</p><p>如果需要跨组件共享数据的需求，那就需要借助 Vuex 来管理组件状态。</p><h4 id="Vuex-基本用法"><a href="#Vuex-基本用法" class="headerlink" title="Vuex 基本用法"></a>Vuex 基本用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S vuex</span><br></pre></td></tr></table></figure><h4 id="高级用法-1"><a href="#高级用法-1" class="headerlink" title="高级用法"></a>高级用法</h4><h3 id="实战：中央事件总线插件-vue-bus-loading…"><a href="#实战：中央事件总线插件-vue-bus-loading…" class="headerlink" title="实战：中央事件总线插件 vue-bus(loading…)"></a>实战：中央事件总线插件 vue-bus(loading…)</h3><blockquote><p><a href="https://github.com/yangtao2o/vue-webpack-iview" target="_blank" rel="noopener">练习地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Vue.js实战》之使用webpack</title>
      <link href="/2019/02/04/vue-webpack/"/>
      <url>/2019/02/04/vue-webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="使用-webpack"><a href="#使用-webpack" class="headerlink" title="使用 webpack"></a>使用 webpack</h3><a id="more"></a><h4 id="前端工程化与webpack"><a href="#前端工程化与webpack" class="headerlink" title="前端工程化与webpack"></a>前端工程化与webpack</h4><p>前端工程化主要解决的问题：</p><ul><li>JavaScript、css 代码的合并与压缩</li><li>CSS 预处理：Less、Sass、Stylus 的编译</li><li>生成雪碧图</li><li>ES6 -&gt; ES5</li><li>模块化等</li></ul><p>webpack 的主要使用场景是<code>单页面富应用（SPA）</code>，将一些诸如：typescript、less、jpg、vue等格式的文件通过特定的<code>加载器（Loader）</code>编译后，最终统一生成 .js、.css、.png等静态资源文件。</p><p>如何文件都可称为是一个模块。webpack就是处理模块间的依赖关系，并把他们进行打包。</p><h3 id="webpack-基础配置"><a href="#webpack-基础配置" class="headerlink" title="webpack 基础配置"></a>webpack 基础配置</h3><h4 id="安装-webpack-与-webpack-dev-server"><a href="#安装-webpack-与-webpack-dev-server" class="headerlink" title="安装 webpack 与 webpack-dev-server"></a>安装 webpack 与 webpack-dev-server</h4><p>初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init  </span><br><span class="line"><span class="comment"># 按照提示一步步往下走</span></span><br></pre></td></tr></table></figure></p><p>本地局部安装 webpack:（书中是v2，我的需要下载脚手架 -cli）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br><span class="line">npm i -D webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会多出下面一项“</span></span><br><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"webpack"</span>: <span class="string">"^4.28.4"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>安装 <code>webpack-dev-server</code>，可以启动一个服务器、热更新、接口代理等<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>最终的 package.json 文件内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"vue-webpack-iview"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"学习《Vue.js实战》之进阶篇"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/yangtao2o/vue-webpack-iview.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"vue"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"iview"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"yangtao"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/yangtao2o/vue-webpack-iview/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/yangtao2o/vue-webpack-iview#readme"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.28.4"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.1.14"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="就是一个-js-文件而已"><a href="#就是一个-js-文件而已" class="headerlink" title="就是一个 js 文件而已"></a>就是一个 js 文件而已</h4><p>创建 <code>webpack.config.js</code>，并初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>接着，在 package.json 里配置启动项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">  "dev": "webpack-dev-server --open --config webpack.config.js --mode=development"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// --open：会在启动服务时自动打开浏览器</span><br><span class="line">// --config：指向 webpack-dev-server 读取的配置文件路径</span><br><span class="line">// --host --port：可配置 IP 和端口，如：--host 172.172.172.1 --port 8888</span><br><span class="line">// --mode=development：需要说明是什么环境，不然会显示警告</span><br></pre></td></tr></table></figure><p>webpack 的入口（Entry）和出口（Output），重中之重，新建 <code>main.js</code>，并在 <code>webpack.config.js</code> 中进行入口和输出的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: &apos;./main&apos;  // 入口文件为 main.js</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, &apos;./dist&apos;),  // 输出目录</span><br><span class="line">    publicPath: &apos;./dist&apos;,  //指定资源文件引用的目录</span><br><span class="line">    filename: &apos;main.js&apos;  // 指定输出文件的名称</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure></p><p>然后：<code>npm run dev</code>，浏览器会自动打开页面了。</p><h4 id="逐步完善配置文件"><a href="#逐步完善配置文件" class="headerlink" title="逐步完善配置文件"></a>逐步完善配置文件</h4><p>webpack 对于不同的模块需要不同的加载器来处理，通过安装不同的加载器，就可以对各种后缀名的文件进行处理。</p><p>如处理 .css 文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># css</span></span><br><span class="line">npm install css-loader --save-dev</span><br><span class="line">npm install style-loader --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># rules 属性中可以指定一系列的 loaders</span></span><br><span class="line"><span class="comment"># 每一个 loader 都必须包含 test 和 use </span></span><br><span class="line"><span class="comment"># 处理名为 .css 的文件时，先通过 css-loader 转换，再通过 style-loader 转换，然后继续打包</span></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [  </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">test</span>: <span class="string">'/\.css$/'</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        <span class="string">'css-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在实际的业务中，需要使用插件 <code>extract-text-webpack-plugin</code> 把各处的css文件提取出来。，并生成一个 main.css 文件，最终在 index.html 里加载它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure><p>config<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="string">'/\.css$/'</span>,</span><br><span class="line">      use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: <span class="string">'css-loader'</span>,</span><br><span class="line">        fallback: <span class="string">'style-loader'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'main.css'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="单文件组件与-vue-loader"><a href="#单文件组件与-vue-loader" class="headerlink" title="单文件组件与 vue-loader"></a>单文件组件与 vue-loader</h3><p>安装加载器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev vue vue-loader vue-style-loader</span><br><span class="line">npm install --save-dev vue-template-compiler</span><br><span class="line">npm install --save-dev vue-hot-reload-api</span><br><span class="line">npm i -D babel babel-loader</span><br><span class="line">npm i -D @babel/core</span><br><span class="line">npm i -D @babel/preset-env</span><br></pre></td></tr></table></figure></p><p>配置：<br><a href="https://www.babeljs.cn/docs/setup/#installation" target="_blank" rel="noopener">Babel-loader</a>、<a href="https://vue-loader.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue-loader</a></p><h4 id="结合自己配置的过程中关于版本冲突的解决办法"><a href="#结合自己配置的过程中关于版本冲突的解决办法" class="headerlink" title="结合自己配置的过程中关于版本冲突的解决办法"></a>结合自己配置的过程中关于版本冲突的解决办法</h4><p>参考：<a href="https://blog.csdn.net/weixin_40814356/article/details/80625747" target="_blank" rel="noopener">webpack4配置vue环境和一些小坑</a></p><p>主要修改：</p><ul><li><p>index.js(之前的 <code>main.js</code>，目录也放在了<code>/src/</code>下)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(root);</span><br></pre></td></tr></table></figure></li><li><p>App.vue</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Hello &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'Vue.js'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>package.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --config webpack.config.js --mode=development"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --progress --hide-modules --mode=production"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"@babel/core"</span>: <span class="string">"^7.2.2"</span>,</span><br><span class="line">  <span class="string">"@babel/preset-env"</span>: <span class="string">"^7.2.3"</span>,</span><br><span class="line">  <span class="string">"babel"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">  <span class="string">"babel-loader"</span>: <span class="string">"^8.0.5"</span>,</span><br><span class="line">  <span class="string">"css-loader"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">  <span class="string">"extract-text-webpack-plugin"</span>: <span class="string">"^4.0.0-beta.0"</span>,</span><br><span class="line">  <span class="string">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">  <span class="string">"vue"</span>: <span class="string">"^2.5.22"</span>,</span><br><span class="line">  <span class="string">"vue-hot-reload-api"</span>: <span class="string">"^2.3.1"</span>,</span><br><span class="line">  <span class="string">"vue-loader"</span>: <span class="string">"^15.5.1"</span>,</span><br><span class="line">  <span class="string">"vue-style-loader"</span>: <span class="string">"^4.1.2"</span>,</span><br><span class="line">  <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.5.22"</span>,</span><br><span class="line">  <span class="string">"webpack"</span>: <span class="string">"^4.28.4"</span>,</span><br><span class="line">  <span class="string">"webpack-cli"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">  <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.1.14"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">'./src/index.js'</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),  <span class="comment">// 输出目录</span></span><br><span class="line">    publicPath: <span class="string">'/dist'</span>,  <span class="comment">//指定资源文件引用的目录</span></span><br><span class="line">    filename: <span class="string">'main.js'</span>  <span class="comment">// 指定输出文件的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">            css: ExtractTextPlugin.extract(&#123;</span><br><span class="line">              use: <span class="string">'css-loader'</span>,</span><br><span class="line">              fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: <span class="string">'css-loader'</span>,</span><br><span class="line">          fallback: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'main.css'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>.babelrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@babel/plugin-transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./dist/main.css"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="用于生产环境-loading…"><a href="#用于生产环境-loading…" class="headerlink" title="用于生产环境(loading…)"></a>用于生产环境(loading…)</h3><blockquote><p><a href="https://github.com/yangtao2o/vue-webpack-iview" target="_blank" rel="noopener">练习地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面滑动时的动画插件 WOW.js</title>
      <link href="/2019/02/04/plugin-wow/"/>
      <url>/2019/02/04/plugin-wow/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当初次加载页面的时候，需要一些动画渐入，并且当滑动到当前内容时也会出现动画，之后就恢复正常，所以就用到了 <code>WOW.js</code>。</p></blockquote><p>比如：<a href="https://www.rt-thread.org/" target="_blank" rel="noopener">RT-Thread</a></p><p>再比如设计师必备：<a href="https://www.sketchapp.com/" target="_blank" rel="noopener">sketchapp</a></p><a id="more"></a><h3 id="WOW-js"><a href="#WOW-js" class="headerlink" title="WOW.js"></a>WOW.js</h3><p>文档：<a href="https://www.delac.io/wow/index.html" target="_blank" rel="noopener">WOW</a></p><h3 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h3><p>模拟：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate</a></p><p><code>animate.css</code> 包含了一组炫酷、有趣、跨浏览器的动画，可以在你的项目中直接使用。</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/animate.css/3.7.0/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/wow/1.1.2/wow.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>文档：<a href="https://www.delac.io/wow/docs.html" target="_blank" rel="noopener">Setup WOW.js</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```html</span><br><span class="line">&lt;div class=&quot;wow bounceInUp&quot;  data-wow-duration=&quot;2s&quot; data-wow-delay=&quot;5s&quot;&gt;</span><br><span class="line">    Content to Reveal Here</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new WOW().init();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>ps：初始加载页面的时候，很有可能会出现内容再动画渲染，所以直接设置：<br><code>`</code>css<br>.wow {<br>    visibility: hidden;<br>}</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm run 报错：getaddrinfo ENOTFOUND localhost</title>
      <link href="/2019/01/13/localhost/"/>
      <url>/2019/01/13/localhost/</url>
      
        <content type="html"><![CDATA[<p>安装 Angular 的时候，启动 <code>ng serve --open</code>，报错如下：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  my-app git:(master) ng serve</span><br><span class="line">getaddrinfo ENOTFOUND localhost</span><br><span class="line">Error: getaddrinfo ENOTFOUND localhost</span><br><span class="line">    at errnoException (dns.js:50:10)</span><br><span class="line">    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)</span><br></pre></td></tr></table></figure></p><p>查了一下自己的hosts，原来我把默认的host给关掉了，重新启动即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">255.255.255.255broadcasthost</span><br><span class="line">::1             localhost</span><br></pre></td></tr></table></figure><p>重新 <code>ng serve --open</code>，然后：<code>ℹ ｢wdm｣: Compiled successfully.</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下Node.js 多版本管理器-Gnvm</title>
      <link href="/2018/12/21/tool-gnvm/"/>
      <url>/2018/12/21/tool-gnvm/</url>
      
        <content type="html"><![CDATA[<p>我们在平时的项目开发中，经常需要指定 Node 的版本，所有版本控制管理，就很有必要，需要哪个切哪个。<br><a id="more"></a></p><h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><p>主要有 <code>n</code> 和 <code>nvm</code>,具体可以自行百度，查之，用之</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输入 n ,然后回车，可上下选择版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版/稳定版</span></span><br><span class="line">n latest/stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">n rm 8.11.3</span><br></pre></td></tr></table></figure><h4 id="主要安利-Windows下的-gnvm"><a href="#主要安利-Windows下的-gnvm" class="headerlink" title="主要安利 Windows下的 gnvm"></a>主要安利 Windows下的 gnvm</h4><p>官方地址：<a href="https://github.com/kenshin/gnvm" target="_blank" rel="noopener">GNVM - Node.js 多版本管理器</a></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 git bash，其它下载方式如 go、curl等可查看官方文档</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:Kenshin/gnvm-bin.git</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>将解压后的 <code>gnvm.exe</code> 保存到 <code>node.js</code> 所在的文件夹下，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs</span><br></pre></td></tr></table></figure></p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>管理员身份进入 <code>cmd</code>，输入 <code>gnvm version</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm version</span><br><span class="line">Current version 0.2.0 64 bit.</span><br><span class="line">Copyright (C) 2014-2016 Kenshin Wang &lt;kenshin@ksria.com&gt;</span><br><span class="line">See https://github.com/kenshin/gnvm <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm config</span><br><span class="line">Waring: config file C:\Program Files\nodejs\\.gnvmrc is not exist.</span><br><span class="line">Notice: Config file C:\Program Files\nodejs\\.gnvmrc create success.</span><br><span class="line">Notice: config file path C:\Program Files\nodejs\\.gnvmrc</span><br><span class="line">gnvm config registry is http://nodejs.org/dist/</span><br><span class="line">gnvm config noderoot is C:\Program Files\nodejs\</span><br><span class="line">gnvm config globalversion is 10.14.2-x86</span><br><span class="line">gnvm config latestversion is unknown</span><br></pre></td></tr></table></figure><h5 id="查询需要下载的-node-版本"><a href="#查询需要下载的-node-版本" class="headerlink" title="查询需要下载的 node 版本"></a>查询需要下载的 node 版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm search 8.*.*</span><br><span class="line">Search Node.js version rules [8.*.*] from http://nodejs.org/dist/index.json, please <span class="built_in">wait</span>.</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">| No.   date         node ver    <span class="built_in">exec</span>      npm ver |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">  1     2018-12-18   8.14.1      x86 x64   6.4.1</span><br><span class="line">  2     2018-11-27   8.14.0      x86 x64   6.4.1</span><br><span class="line">  3     2018-11-20   8.13.0      x86 x64   6.4.1</span><br><span class="line">  4     2018-09-10   8.12.0      x86 x64   6.4.1</span><br><span class="line">  5     2018-08-15   8.11.4      x86 x64   5.6.0</span><br><span class="line">  6     2018-06-12   8.11.3      x86 x64   5.6.0</span><br><span class="line">  7     2018-05-15   8.11.2      x86 x64   5.6.0</span><br><span class="line">  8     2018-03-29   8.11.1      x86 x64   5.6.0</span><br><span class="line">  9     2018-03-28   8.11.0      x86 x64   5.6.0</span><br><span class="line">  10    2018-03-06   8.10.0      x86 x64   5.6.0</span><br><span class="line">  11    2018-01-02   8.9.4       x86 x64   5.6.0</span><br><span class="line">  12    2017-12-07   8.9.3       x86 x64   5.5.1</span><br><span class="line">  13    2017-12-05   8.9.2       x86 x64   5.5.1</span><br><span class="line">  14    2017-11-07   8.9.1       x86 x64   5.5.1</span><br><span class="line">  15    2017-10-31   8.9.0       x86 x64   5.5.1</span><br><span class="line">  16    2017-10-25   8.8.1       x86 x64   5.4.2</span><br><span class="line">  17    2017-10-24   8.8.0       x86 x64   5.4.2</span><br><span class="line">  18    2017-10-11   8.7.0       x86 x64   5.4.2</span><br><span class="line">  19    2017-09-26   8.6.0       x86 x64   5.3.0</span><br><span class="line">  20    2017-09-12   8.5.0       x86 x64   5.3.0</span><br><span class="line">  21    2017-08-15   8.4.0       x86 x64   5.3.0</span><br><span class="line">  22    2017-08-08   8.3.0       x86 x64   5.3.0</span><br><span class="line">  23    2017-07-20   8.2.1       x86 x64   5.3.0</span><br><span class="line">  24    2017-07-19   8.2.0       x86 x64   5.3.0</span><br><span class="line">  25    2017-07-11   8.1.4       x86 x64   5.0.3</span><br><span class="line">  26    2017-06-29   8.1.3       x86 x64   5.0.3</span><br><span class="line">  27    2017-06-15   8.1.2       x86 x64   5.0.3</span><br><span class="line">  28    2017-06-13   8.1.1       x86 x64   5.0.3</span><br><span class="line">  29    2017-06-08   8.1.0       x86 x64   5.0.3</span><br><span class="line">  30    2017-05-30   8.0.0       x86 x64   5.0.0</span><br><span class="line">+--------------------------------------------------+</span><br></pre></td></tr></table></figure><h5 id="下载帮助文档"><a href="#下载帮助文档" class="headerlink" title="下载帮助文档"></a>下载帮助文档</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm <span class="built_in">help</span> node-version</span><br><span class="line">Show and fix [global] [latest] Node.js version e.g. :</span><br><span class="line">gnvm node-version            :Show Node.js global and latest version, and fix it.</span><br><span class="line">gnvm node-version latest     :Show Node.js latest version, and fix it.</span><br><span class="line">gnvm node-version global     :Show Node.js global version, and fix it.</span><br></pre></td></tr></table></figure><h5 id="下载node"><a href="#下载node" class="headerlink" title="下载node"></a>下载node</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm install 8.11.3 --global</span><br></pre></td></tr></table></figure><h5 id="查看已下载的版本列表"><a href="#查看已下载的版本列表" class="headerlink" title="查看已下载的版本列表"></a>查看已下载的版本列表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm ls</span><br><span class="line">Notice: gnvm.exe root is C:\Program Files\nodejs\\</span><br><span class="line">v10.14.2 -- x86</span><br><span class="line">v8.11.2</span><br><span class="line">v8.11.3 -- global</span><br></pre></td></tr></table></figure><h5 id="使用指定版本"><a href="#使用指定版本" class="headerlink" title="使用指定版本"></a>使用指定版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm use 8.11.3</span><br><span class="line">Set success, global Node.js version is 8.11.3.</span><br></pre></td></tr></table></figure><h5 id="查看当前Node版本"><a href="#查看当前Node版本" class="headerlink" title="查看当前Node版本"></a>查看当前Node版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;node -v</span><br><span class="line">v8.11.3</span><br></pre></td></tr></table></figure><p>基本上可以解决版本切换问题，详情可查询<a href="http://ksria.com/gnvm/" target="_blank" rel="noopener">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
            <tag> gnvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通俗点理解Nodejs的非阻塞及事件驱动</title>
      <link href="/2018/12/18/node-event-io/"/>
      <url>/2018/12/18/node-event-io/</url>
      
        <content type="html"><![CDATA[<h3 id="node-js是什么"><a href="#node-js是什么" class="headerlink" title="node.js是什么"></a>node.js是什么</h3><blockquote><p>node.js是什么？</p></blockquote><ul><li>这是一种通过JavaScript语言开发web服务端的东西</li></ul><blockquote><p>为什么我们要用node.js？</p></blockquote><ul><li>node.js有非阻塞，事件驱动I/O等特性，从而让高并发（high concurrency）在的轮询（Polling）和comet构建的应用中成为可能。<a id="more"></a><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3></li></ul><p>浏览器给网站发请求的过程一直没怎么变过。</p><p>当浏览器给网站发了请求。服务器收到了请求，然后开始搜寻被请求的资源。如果有需要，服务器还会查询一下数据库，最后把响应结果传回浏览器。</p><p>不过，在传统的web服务器中（比如<code>Apache</code>），每一个请求都会让服务器创建一个新的进程来处理这个请求。</p><p>后来有了Ajax。有了Ajax，我们就不用每次都请求一个完整的新页面了，取而代之的是，每次只请求需要的部分页面信息就可以了。</p><p>这显然是一个进步。</p><h3 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h3><p>但是比如你要建一个<code>FriendFeed</code>这样的社交网站（类似人人网那样的刷朋友新鲜事的网站），你的好友会随时的推送新的状态，然后你的新鲜事会实时自动刷新。</p><p>要达成这个需求，我们需要让用户一直与服务器保持一个有效连接。目前最简单的实现方法，就是让用户和服务器之间保持<code>长轮询（long polling）</code>。</p><p>HTTP请求不是持续的连接，你请求一次，服务器响应一次，然后就完了。</p><p><code>长轮询是一种利用HTTP模拟持续连接的技巧</code>。具体来说，只要页面载入了，不管你需不需要服务器给你响应信息，你都会给服务器发一个Ajax请求。这个请求不同于一般的Ajax请求，服务器不会直接给你返回信息，而是它要等着，直到服务器觉得该给你发信息了，它才会响应。</p><p>比如，你的好友发了一条新鲜事，服务器就会把这个新鲜事当做响应发给你的浏览器，然后你的浏览器就刷新页面了。浏览器收到响应刷新完之后，再发送一条新的请求给服务器，这个请求依然不会立即被响应。</p><p>于是就开始重复以上步骤。</p><p>利用这个方法，可以让浏览器始终保持等待响应的状态。虽然以上过程依然只有非持续的Http参与，但是我们模拟出了一个看似持续的连接状态。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>我们再看传统的服务器（比如Apache）。</p><p>每次一个新用户连到你的网站上，你的服务器就得开一个连接。每个连接都需要占一个进程，这些进程大部分时间都是闲着的（比如等着你好友发新鲜事，等好友发完才给用户响应信息。或者等着数据库返回查询结果什么的）。</p><p>虽然这些进程闲着，但是照样占用内存。这意味着，如果用户连接数的增长到一定规模，你服务器没准就要耗光内存直接瘫了。</p><h3 id="非阻塞和事件驱动"><a href="#非阻塞和事件驱动" class="headerlink" title="非阻塞和事件驱动"></a>非阻塞和事件驱动</h3><p>这种情况怎么解决？</p><p>解决方法就是刚才上边说的：<em>非阻塞和事件驱动</em>。</p><p>这些概念在我们谈的这个情景里面其实没那么难理解。</p><p>你把非阻塞的服务器想象成一个loop循环，这个loop会一直跑下去。</p><p>一个新请求来了，这个loop就接了这个请求，把这个请求传给其他的进程（比如传给一个搞数据库查询的进程），然后响应一个回调（callback）。</p><p>完事了这loop就接着跑，接其他的请求。</p><p>这样下来。服务器就不会像之前那样傻等着数据库返回结果了。</p><p>如果数据库把结果返回来了，loop就把结果传回用户的浏览器，接着继续跑。</p><p>在这种方式下，你的服务器的进程就不会闲着等着。</p><p>从而在理论上说，同一时刻的数据库查询数量，以及用户的请求数量就没有限制了。服务器只在用户那边有事件发生的时候才响应，这就是事件驱动。</p><p>FriendFeed是用基于Python的非阻塞框架Tornado (知乎也用了这个框架) 来实现上面说的新鲜事功能的。不过，Node.js就比前者更妙了。</p><h3 id="再看Node-js"><a href="#再看Node-js" class="headerlink" title="再看Node.js"></a>再看Node.js</h3><p>Node.js的应用是通过javascript开发的，然后直接在Google的变态V8引擎上跑。</p><p>用了Node.js，你就不用担心用户端的请求会在服务器里跑了一段能够造成阻塞的代码了。</p><p>因为javascript本身就是事件驱动的脚本语言。</p><p>你回想一下，在给前端写javascript的时候，更多时候你都是在搞事件处理和回调函数。</p><p>javascript本身就是给事件处理量身定制的语言。</p><p>Node.js还是处于初期阶段。如果你想开发一个基于Node.js的应用，你应该会需要写一些很底层代码。</p><p>但是下一代浏览器很快就要采用<code>WebSocket</code>技术了，从而长轮询也会消失。</p><p>在Web开发里，Node.js这种类型的技术只会变得越来越重要。</p><p>英文原文：<a href="https://www.sitepoint.com/node-js-is-the-new-black/" target="_blank" rel="noopener">Node.js is the New Black</a></p><p>中文原文：<a href="https://www.zhihu.com/question/33578075/answer/56951771" target="_blank" rel="noopener">Node.js是用来做什么的？</a></p>]]></content>
      
      
      <categories>
          
          <category> Nodejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git push 报错之 Permission to userA.git denied to userB</title>
      <link href="/2018/12/17/git-push-error/"/>
      <url>/2018/12/17/git-push-error/</url>
      
        <content type="html"><![CDATA[<p>报错信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  git-command git:(master) git push</span><br><span class="line">remote: Permission to xxx.git denied to zguii.</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/xxx.git/'</span>: The requested URL returned error: 403</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>之前我有登录过其他账号，如zguii，并进行了一系列操作，后来我要使用自己的账号的时候，就会出现如上的报错信息。</p><p>刚开始嫌麻烦，我使用客户端发布操作，正常，后来，多次使用 <code>git bash</code>，就很痛苦了，索性就改一下。 </p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>既然是用户权限被占用了，而且我也不需要那个用户了，那就删除吧。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新创建文件，暂时设置密码为空，并且会产生 `id_rsa`、`id_rsa.pub`，（有可能会产生 config ，但有可能是空文件）</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"yangtaobanner@foxmail.com"</span></span><br><span class="line"></span><br><span class="line">➜  git-command git:(master) ssh-keygen -t rsa -C <span class="string">"yangtaobanner@foxmail.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/yangtao/.ssh/id_rsa): </span><br><span class="line">/Users/yangtao/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/yangtao/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/yangtao/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 `id_rsa.pub` 里的所有内容，将此粘贴到你要新建的 `SSH key`里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line">git config --list --global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否可以连接</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">Hi yangtao2o! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>设置完毕，再次 <code>git push</code>，额…依旧报错…<br>想到可能是缓存，好吧，清！呃呃…依然如此…</p><p>好多分钟之后，忽然想起还能访问默认账户，说明账户依然存在，笨！</p><p>然后，我就去钥匙串查看了一下 <code>github.com</code>，我去，还真是岿然不动地躺在那儿…</p><p>恶狠狠地删之！！！</p><p>然后，<code>git push</code>，输入用户、密码，熬过几秒，刷刷刷，看到了久违的 <code>Done</code></p><p>其实，归根结底，如果Git设置里的账户是你自己的，只要删除钥匙串账户就行，我竟然走了这么久的弯路，脚很疼，哦不，脑瓜子疼！</p><p>PS：MacOS 隐藏文件开启快捷键：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> + ^ + .</span><br></pre></td></tr></table></figure></p><h3 id="windows解决方法"><a href="#windows解决方法" class="headerlink" title="windows解决方法"></a>windows解决方法</h3><p><a href="https://blog.csdn.net/klxh2009/article/details/76019742" target="_blank" rel="noopener">解决 github push failed （remote: Permission to userA/repo.git denied to userB.）</a></p><p>➜ 主要是删除之前的用户，如我的之前的账户是 <code>zguii</code></p><h3 id="MacOS解决方法"><a href="#MacOS解决方法" class="headerlink" title="MacOS解决方法"></a>MacOS解决方法</h3><p><a href="https://www.jianshu.com/p/6621c42ef112" target="_blank" rel="noopener">mac下配置多个git账号并进行账号切换</a></p><p><a href="https://www.jianshu.com/p/b29a3c275f68" target="_blank" rel="noopener">解决git本地多ssh key的问题</a></p><p><a href="https://www.zybuluo.com/yangfch3/note/172120" target="_blank" rel="noopener">多个 SSH KEY 的管理</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令练习</title>
      <link href="/2018/12/14/git-command/"/>
      <url>/2018/12/14/git-command/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 <code>git bash</code> 的过程中，除了常用的那几条，其它的总需要查找手册，索性跟着大牛总结的文章走一遍吧</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Workspace: 工作区</li><li>Index / Stage: 暂存区</li><li>Repository: 仓库区（或本地仓库）</li><li>Remote: 远程仓库<a id="more"></a><img src="https://user-images.githubusercontent.com/19526072/49999253-4c690980-ffd1-11e8-892a-bff60b374d12.png" alt="image"></li></ul><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录 git-command 下新建 Git 代码库，（会生成 .git 文件）</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建目录 git-command 并将其初始化为 Git 代码库</span></span><br><span class="line">git init git-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从线上获取一个完整的项目代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/git-command.git</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git的设置文件为 <code>.gitconfig</code> ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示配置信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">git config --global</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">"yangtao"</span></span><br><span class="line">git config --global user.email <span class="string">"xxx@.qq.com"</span></span><br></pre></td></tr></table></figure><h3 id="增加、删除文件"><a href="#增加、删除文件" class="headerlink" title="增加、删除文件"></a>增加、删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add assets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并将这次删除加入暂存区</span></span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名，并放入暂存区</span></span><br><span class="line">git mv index.html index-new.html</span><br></pre></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存区提交到仓库区 ( -m (msg) )</span></span><br><span class="line">git commit -m <span class="string">"My first commit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定文件提交</span></span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次 commit 之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有的 diff 信息</span></span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的 commit ，提交上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何变化，则用来改写上一次 commit 的提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">"new commit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次 commit ，并包括指定文件的新变化</span></span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的远程分支 ( -r (remotes))</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch primary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，并切换至 该分支</span></span><br><span class="line">git checkout -b primary-yt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，指向指定 commit</span></span><br><span class="line">git branch [branch] [commitID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支 master-yt 到当前分支 master</span></span><br><span class="line">git merge master-yt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个 commit，合并进当前分支</span></span><br><span class="line">git cherry-pick [commitid]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d master-ytt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出标签</span></span><br><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="参考目录"><a href="#参考目录" class="headerlink" title="参考目录"></a>参考目录</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">Git 常用命令</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程 - 廖雪峰的官方网站</a></li></ul><p><a href="https://github.com/yangtao2o/git-command" target="_blank" rel="noopener">练习 Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 开发工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小片段代码简汇之CSS篇</title>
      <link href="/2018/12/09/code-css/"/>
      <url>/2018/12/09/code-css/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总结在平时开发中遇到的一些小问题，大概很长一段时间就会来这么一次，小片段剧场.</p></blockquote><p>Show Time:<br><a id="more"></a></p><h4 id="兼容Windows、Mac的-font-family"><a href="#兼容Windows、Mac的-font-family" class="headerlink" title="兼容Windows、Mac的 font-family"></a>兼容Windows、Mac的 font-family</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span> <span class="selector-tag">Neue</span> <span class="selector-tag">For</span> <span class="selector-tag">Number</span>,<span class="selector-tag">-apple-system</span>,<span class="selector-tag">BlinkMacSystemFont</span>,<span class="selector-tag">Segoe</span> <span class="selector-tag">UI</span>,<span class="selector-tag">Roboto</span>,<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>,"<span class="selector-tag">PingFangSC-Light</span>" ,"<span class="selector-tag">Microsoft</span> <span class="selector-tag">yahei</span>", <span class="selector-tag">Arial</span>, <span class="selector-tag">Helvetica</span>, <span class="selector-tag">sans-serif</span></span><br></pre></td></tr></table></figure><h4 id="关于ios下的input输入框光标上移的问题"><a href="#关于ios下的input输入框光标上移的问题" class="headerlink" title="关于ios下的input输入框光标上移的问题"></a>关于ios下的input输入框光标上移的问题</h4><blockquote><p>一般外框设置高度为<code>auto</code>,取消掉<code>line-height</code>,input本身设置字号大小，使用padding撑开，取消’height、line-height’</p></blockquote><h4 id="下拉框箭头重写"><a href="#下拉框箭头重写" class="headerlink" title="下拉框箭头重写"></a>下拉框箭头重写</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* --ie清除--*/</span></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span>&#123; <span class="attribute">display</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --火狐、谷歌清除--*/</span></span><br><span class="line"><span class="selector-tag">select</span>&#123;</span><br><span class="line">  <span class="attribute">appearance</span>:none;  </span><br><span class="line">  <span class="attribute">-moz-appearance</span>:none;  </span><br><span class="line">  <span class="attribute">-webkit-appearance</span>:none;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">30px</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fafafb</span> <span class="built_in">url</span>(<span class="string">"/select-logo.png"</span>) <span class="number">98%</span> <span class="number">50%</span> no-repeat<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用CSS写三角形箭头"><a href="#用CSS写三角形箭头" class="headerlink" title="用CSS写三角形箭头"></a>用CSS写三角形箭头</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wx-wper-con</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">158px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> -<span class="number">2px</span> <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wx-wper-con</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.wx-wper-con</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">9.5px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">8px</span> solid <span class="number">#dadada</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wx-wper-con</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">8.5px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">8px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="border边框渐变-圆角"><a href="#border边框渐变-圆角" class="headerlink" title="border边框渐变+圆角"></a>border边框渐变+圆角</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-test</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border-test</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(155deg,red, blue);</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小片段代码简汇之JS篇</title>
      <link href="/2018/12/07/code-js/"/>
      <url>/2018/12/07/code-js/</url>
      
        <content type="html"><![CDATA[<blockquote><p>总结在平时开发中遇到的一些小问题，大概很长一段时间就会来这么一次，小片段剧场。</p></blockquote><p>Show Time:<br><a id="more"></a></p><h4 id="多行文本截取clamp-js"><a href="#多行文本截取clamp-js" class="headerlink" title="多行文本截取clamp.js"></a>多行文本截取clamp.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src = <span class="string">"https://cdn.bootcss.com/Clamp.js/0.5.1/clamp.min.js"</span> &gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">clampFunc(<span class="string">"obj-content-header"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clampFunc</span>(<span class="params">className, clampNum</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $<span class="built_in">module</span> = $(<span class="string">"."</span> + className);</span><br><span class="line">  clampNum = clampNum ? clampNum : <span class="number">1</span>;</span><br><span class="line">  $.each($<span class="built_in">module</span>, <span class="function"><span class="keyword">function</span> (<span class="params">i, index</span>) </span>&#123;</span><br><span class="line">    $clamp($(<span class="keyword">this</span>).get(<span class="number">0</span>), &#123;</span><br><span class="line">      clamp: clampNum</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断本地是否存在jquery写法"><a href="#判断本地是否存在jquery写法" class="headerlink" title="判断本地是否存在jquery写法"></a>判断本地是否存在jquery写法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> jQuery == <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">"%3Cscript src='https://cdn.bootcss.com/jquery/1.9.0/jquery.min.js' type='text/javascript'%3E%3C/script%3E"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="截流函数-AND-节流函数"><a href="#截流函数-AND-节流函数" class="headerlink" title="截流函数 AND 节流函数"></a>截流函数 AND 节流函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 截流函数 **/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * fn 执行函数</span></span><br><span class="line"><span class="comment">  * context 绑定上下文</span></span><br><span class="line"><span class="comment">  * timeout 延时数值</span></span><br><span class="line"><span class="comment">  **/</span></span><br><span class="line"><span class="keyword">let</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">fn, context, timeout</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"><span class="comment">// 使用闭包将内容传递出去</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(timer) &#123;</span><br><span class="line">clearTimeout(timer);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">fn.apply(context, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;, timeout);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 节流函数 **/</span></span><br><span class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">fn, delay, mustRunDelay</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> t_start;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"><span class="keyword">var</span> t_curr = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">clearTimeout(timer);</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">if</span>(!t_start) &#123;</span><br><span class="line">t_start = t_curr;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 超时判断</span></span><br><span class="line"><span class="keyword">if</span>(t_curr - t_start &gt;= mustRunDelay) &#123;</span><br><span class="line">fn.apply(context, args);</span><br><span class="line">t_start = t_curr;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for循环添加点击事件"><a href="#for循环添加点击事件" class="headerlink" title="for循环添加点击事件"></a>for循环添加点击事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = elems.length; i &lt; l; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    elems[index].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">      <span class="built_in">console</span>.log(index);</span><br><span class="line">    &#125;, <span class="string">'false'</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断浏览器是否开启本地cookie"><a href="#判断浏览器是否开启本地cookie" class="headerlink" title="判断浏览器是否开启本地cookie"></a>判断浏览器是否开启本地cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nd = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">nd.setSeconds(nd.getSeconds() + <span class="number">60</span>);</span><br><span class="line"><span class="built_in">document</span>.cookie = <span class="string">"cookietest=1; expires="</span> + nd.toGMTString();</span><br><span class="line"><span class="keyword">var</span> cookiesEnabled = <span class="built_in">document</span>.cookie.indexOf(<span class="string">"cookietest="</span>) != <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (!cookiesEnabled) &#123;</span><br><span class="line">  <span class="comment">//没有启用cookie   </span></span><br><span class="line">  alert(<span class="string">"没有启用cookie "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">//已经启用cookie   </span></span><br><span class="line">  alert(<span class="string">"已经启用cookie "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="解决同级元素鼠标移入移出效果"><a href="#解决同级元素鼠标移入移出效果" class="headerlink" title="解决同级元素鼠标移入移出效果"></a>解决同级元素鼠标移入移出效果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"member-card-item"</span> <span class="attr">id</span>=<span class="string">"memberCard"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"member-card-wper"</span> <span class="attr">id</span>=<span class="string">"memberProfile"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"drop-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"card-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"card-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cardTimer = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> $mCard = $(<span class="string">'#rightNav .wx-wper'</span>);</span><br><span class="line"><span class="keyword">var</span> $mProfile = $(<span class="string">'#rightNav .wx-outer'</span>);</span><br><span class="line">$mCard.get(<span class="number">0</span>).onmouseover = $mProfile.get(<span class="number">0</span>).onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  clearCardTime();</span><br><span class="line">&#125;</span><br><span class="line">$mCard.get(<span class="number">0</span>).onmouseout = $mProfile.get(<span class="number">0</span>).onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cardTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cardTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  cardTimer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $mProfile.hide();</span><br><span class="line">  &#125;, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearCardTime</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  clearTimeout(cardTimer);</span><br><span class="line">  $mProfile.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="placeholder样式兼容-amp-amp-属性IE兼容"><a href="#placeholder样式兼容-amp-amp-属性IE兼容" class="headerlink" title="placeholder样式兼容&amp;&amp;属性IE兼容"></a>placeholder样式兼容&amp;&amp;属性IE兼容</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.common-form-control</span><span class="selector-pseudo">::-webkit-input-placeholder</span>,</span><br><span class="line"><span class="selector-class">.common-form-control</span><span class="selector-pseudo">::-moz-placeholder</span>,</span><br><span class="line"><span class="selector-class">.common-form-control</span><span class="selector-pseudo">:-ms-input-placeholder</span>,</span><br><span class="line"><span class="selector-class">.common-form-control</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#9b9b9b</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.placeholder = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> opts = $.extend(&#123;&#125;, $.fn.placeholder.defaults, options);</span><br><span class="line">    <span class="keyword">var</span> isIE = <span class="built_in">document</span>.all ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        placeholderValue = _this.getAttribute(<span class="string">"placeholder"</span>); <span class="comment">//缓存默认的placeholder值</span></span><br><span class="line">      <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        _this.setAttribute(<span class="string">"value"</span>, placeholderValue);</span><br><span class="line">        _this.onfocus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $.trim(_this.value) == placeholderValue ? _this.value = <span class="string">""</span> : <span class="string">''</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">        _this.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          $.trim(_this.value) == <span class="string">""</span> ? _this.value = placeholderValue : <span class="string">''</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="string">"input"</span>).placeholder();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="返回顶部函数"><a href="#返回顶部函数" class="headerlink" title="返回顶部函数"></a>返回顶部函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回顶部</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotoTop</span>(<span class="params">acceleration,stime</span>) </span>&#123;</span><br><span class="line">  acceleration = acceleration || <span class="number">0.1</span>;</span><br><span class="line">  stime = stime || <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> x1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> x2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> x3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement) &#123;</span><br><span class="line">    x1 = <span class="built_in">document</span>.documentElement.scrollLeft || <span class="number">0</span>;</span><br><span class="line">    y1 = <span class="built_in">document</span>.documentElement.scrollTop || <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">    x2 = <span class="built_in">document</span>.body.scrollLeft || <span class="number">0</span>;</span><br><span class="line">    y2 = <span class="built_in">document</span>.body.scrollTop || <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> x3 = <span class="built_in">window</span>.scrollX || <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y3 = <span class="built_in">window</span>.scrollY || <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> x = <span class="built_in">Math</span>.max(x1, <span class="built_in">Math</span>.max(x2, x3));</span><br><span class="line">  <span class="keyword">var</span> y = <span class="built_in">Math</span>.max(y1, <span class="built_in">Math</span>.max(y2, y3));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> speeding = <span class="number">1</span> + acceleration;</span><br><span class="line">  <span class="built_in">window</span>.scrollTo(<span class="built_in">Math</span>.floor(x / speeding), <span class="built_in">Math</span>.floor(y / speeding));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(x &gt; <span class="number">0</span> || y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> run = <span class="string">"gotoTop("</span> + acceleration + <span class="string">", "</span> + stime + <span class="string">")"</span>;</span><br><span class="line">    <span class="built_in">window</span>.setTimeout(run, stime);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="滚动监听垂直联动"><a href="#滚动监听垂直联动" class="headerlink" title="滚动监听垂直联动"></a>滚动监听垂直联动</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">    sTop = $(<span class="keyword">this</span>).scrollTop(),</span><br><span class="line">    windowH = $(<span class="built_in">window</span>).height() / <span class="number">2</span>,</span><br><span class="line">    pos = <span class="built_in">parseFloat</span>($(<span class="string">'#area3'</span>).offset().top) / <span class="number">2</span>,</span><br><span class="line">    pos1 = $(<span class="string">'#area3'</span>).offset().top - windowH,</span><br><span class="line">    pos2 = $(<span class="string">'#area4'</span>).offset().top - windowH,</span><br><span class="line">    pos3 = $(<span class="string">'#area5'</span>).offset().top - windowH,</span><br><span class="line">    pos4 = $(<span class="string">'#area6'</span>).offset().top - windowH</span><br><span class="line">  $target = $(<span class="string">'#navList'</span>).parent().parent();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sTop &gt;= pos) &#123;</span><br><span class="line">    $target.show();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $target.hide();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sTop &gt;= pos4) &#123;</span><br><span class="line">    i = <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sTop &gt;= pos3) &#123;</span><br><span class="line">    i = <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sTop &gt;= pos2) &#123;</span><br><span class="line">    i = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  $(<span class="string">'#navList li'</span>).eq(i).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="右侧浮动导航平滑切换"><a href="#右侧浮动导航平滑切换" class="headerlink" title="右侧浮动导航平滑切换"></a>右侧浮动导航平滑切换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#navList a"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> href = $(<span class="keyword">this</span>).attr(<span class="string">"href"</span>);</span><br><span class="line">  <span class="keyword">var</span> pos = $(href).offset().top - <span class="number">48</span>;</span><br><span class="line">  $(<span class="keyword">this</span>).parent().addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);</span><br><span class="line">  <span class="keyword">if</span> (!$(<span class="string">"body"</span>).is(<span class="string">":animated"</span>)) &#123;</span><br><span class="line">    $(<span class="string">"html,body"</span>).animate(&#123;</span><br><span class="line">      scrollTop: pos</span><br><span class="line">    &#125;, <span class="number">600</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="判断浏览器是否为IE（包括IE11）"><a href="#判断浏览器是否为IE（包括IE11）" class="headerlink" title="判断浏览器是否为IE（包括IE11）"></a>判断浏览器是否为IE（包括IE11）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isIE</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!!<span class="built_in">window</span>.ActiveXObject || <span class="string">"ActiveXObject"</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span><br><span class="line">    alert(<span class="string">"is IE"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">"is not IE"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断浏览器是否为移动端"><a href="#判断浏览器是否为移动端" class="headerlink" title="判断浏览器是否为移动端"></a>判断浏览器是否为移动端</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isMobile = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span>(navigator.userAgent.match(<span class="regexp">/(iPhone|iPod|Android|ios)/i</span>)) &#123;</span><br><span class="line">  isMobile = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  isMobile = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将时间戳转换为时间"><a href="#将时间戳转换为时间" class="headerlink" title="将时间戳转换为时间"></a>将时间戳转换为时间</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMyDate</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> oDate = <span class="keyword">new</span> <span class="built_in">Date</span>(str),</span><br><span class="line">    oYear = oDate.getFullYear(),</span><br><span class="line">    oMonth = oDate.getMonth() + <span class="number">1</span>,</span><br><span class="line">    oDay = oDate.getDate(),</span><br><span class="line">    oHour = oDate.getHours(),</span><br><span class="line">    oMin = oDate.getMinutes(),</span><br><span class="line">    oSen = oDate.getSeconds(),</span><br><span class="line">    oTime = oYear + <span class="string">'-'</span> + getzf(oMonth) + <span class="string">'-'</span> + getzf(oDay) + <span class="string">' '</span> + getzf(oHour) + <span class="string">':'</span> + getzf(oMin) + <span class="string">':'</span> + getzf(oSen); <span class="comment">//最后拼接时间  </span></span><br><span class="line">  <span class="keyword">return</span> oTime;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getzf</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">parseInt</span>(num) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    num = <span class="string">'0'</span> + num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Node实现JavaScript模块的原理简单介绍"><a href="#Node实现JavaScript模块的原理简单介绍" class="headerlink" title="Node实现JavaScript模块的原理简单介绍"></a>Node实现JavaScript模块的原理简单介绍</h4><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434502419592fd80bbb0613a42118ccab9435af408fd000" target="_blank" rel="noopener">原文</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/** Node实现JavaScript模块的一个简单的原理介绍</span><br><span class="line"> * Node利用JavaScript的函数式编程的特性，轻而易举地实现了模块的隔离</span><br><span class="line"> * 变量module是Node在加载js文件前准备的一个变量，并将其传入加载函数</span><br><span class="line"> **/</span><br><span class="line">(function() &#123;</span><br><span class="line">  var s = &apos;Hello&apos;; //读取Hello.js代码</span><br><span class="line">  var name = &apos;Taotao&apos;;</span><br><span class="line"></span><br><span class="line">  console.log(&apos;Hell0 &apos; + name + &apos;!&apos;);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">// 准备module对象</span><br><span class="line">var module = &#123;</span><br><span class="line">  id: &apos;hello&apos;,</span><br><span class="line">  exports: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var load = function(module) &#123;</span><br><span class="line">  //读取Hello.js代码</span><br><span class="line">  function greet(module) &#123;</span><br><span class="line">    console.log(&apos;Hell0 &apos; + name + &apos;!&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">  module.exports = greet;</span><br><span class="line">  return module.exports;</span><br><span class="line">&#125;</span><br><span class="line">var exported = load(module);</span><br><span class="line">//保存</span><br><span class="line">save(module, exported);</span><br></pre></td></tr></table></figure></p><h4 id="Nodejs基本模块fs"><a href="#Nodejs基本模块fs" class="headerlink" title="Nodejs基本模块fs"></a>Nodejs基本模块fs</h4><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501497361a4e77c055f5c4a8da2d5a1868df36ad1000" target="_blank" rel="noopener">Node.js内置的fs模块就是文件系统模块，负责读写文件。</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读文件</span></span><br><span class="line">fs.readFile(<span class="string">'test1.txt'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步写文件</span></span><br><span class="line"><span class="keyword">var</span> writeData = <span class="string">'Hello,Node.js'</span>;</span><br><span class="line">fs.writeFile(<span class="string">'test1.txt'</span>, writeData, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'OK!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> data = fs.readFileSync(<span class="string">'test1.txt'</span>, <span class="string">'utf-8'</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读文件</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  fs.writeFileSync(<span class="string">'test1.txt'</span>, writeData);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"OK!"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步读取文件相关信息</span></span><br><span class="line">fs.stat(<span class="string">'test1.txt'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, stat</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'isFile: '</span> + stat.isFile()); <span class="comment">// 是否是文件</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'isDirectory: '</span> + stat.isDirectory()); <span class="comment">// 是否是目录</span></span><br><span class="line">    <span class="keyword">if</span> (stat.isFile()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'size: '</span> + stat.size);  <span class="comment">// 文件大小</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'birth time: '</span> + stat.birthtime);  <span class="comment">// 创建时间，Date对象</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'modifier time: '</span> + stat.mtime);  <span class="comment">// 修改时间，Date对象</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取文件 statSync()</span></span><br></pre></td></tr></table></figure><h4 id="Nodejs基本模块http"><a href="#Nodejs基本模块http" class="headerlink" title="Nodejs基本模块http"></a>Nodejs基本模块http</h4><p><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014345015296018cac40c198b543fead5c549865b9bd4a000" target="_blank" rel="noopener">廖雪峰的官方网站之Node中的Http</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="comment">// 导入http模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>),</span><br><span class="line">    url = <span class="built_in">require</span>(<span class="string">'url'</span>),</span><br><span class="line">    path = <span class="built_in">require</span>(<span class="string">'path'</span>),</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从命令行参数获取root目录，默认是当前目录：</span></span><br><span class="line"><span class="keyword">var</span> root = path.resolve(process.argv[<span class="number">2</span>] || <span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Static root dir: '</span> + root);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获得URL的path</span></span><br><span class="line">  <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">  <span class="comment">// 获得对应的本地文件路径</span></span><br><span class="line">  <span class="keyword">var</span> filepath = path.join(root, pathname);</span><br><span class="line">  <span class="comment">// 获取文件状态</span></span><br><span class="line">  fs.stat(filepath, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err &amp;&amp; stats.isFile()) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'200 '</span> + request.url);</span><br><span class="line">      response.writeHead(<span class="number">200</span>);</span><br><span class="line">      <span class="comment">// 将文件流导向response</span></span><br><span class="line">      fs.createReadStream(filepath).pipe(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'404 '</span> + request.url);</span><br><span class="line">      response.writeHead(<span class="number">404</span>);</span><br><span class="line">      response.end(<span class="string">'404 Not Found'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 让服务器监听8080端口</span></span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server is running at http:127.0.0.1:8080/'</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义单选框、复选框样式</title>
      <link href="/2018/12/07/style-checkout-radio/"/>
      <url>/2018/12/07/style-checkout-radio/</url>
      
        <content type="html"><![CDATA[<p>开发过程中，为了兼容IE低版本浏览器，我们重写单选框、复选框等的样式，就需要借助 js 来实现。<br><a id="more"></a><br>Javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写多选框,单选框样式</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.hcheckbox = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">':checkbox+label'</span>, <span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).addClass(<span class="string">'disabled'</span>);</span><br><span class="line">      <span class="keyword">if</span> ($(<span class="keyword">this</span>).prev().is(<span class="string">':disabled'</span>) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="keyword">this</span>).prev().is(<span class="string">':checked'</span>))</span><br><span class="line">          $(<span class="keyword">this</span>).addClass(<span class="string">"checked"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'disabled'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ischeckbox = $(<span class="keyword">this</span>).prev().is(<span class="string">':checked'</span>);</span><br><span class="line">      <span class="keyword">if</span> (!ischeckbox) &#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"checked"</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).prev().checked = <span class="literal">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $(<span class="keyword">this</span>).removeClass(<span class="string">'checked'</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).prev().checked = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125;).prev().hide();</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.hradio = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> $(<span class="string">':radio+label'</span>, <span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).addClass(<span class="string">'hRadio'</span>);</span><br><span class="line">      <span class="keyword">if</span> ($(<span class="keyword">this</span>).prev().is(<span class="string">"checked"</span>))</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">'hRadio-Checked'</span>);</span><br><span class="line"></span><br><span class="line">    &#125;).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).parent().siblings().find(<span class="string">':radio+label'</span>).removeClass(<span class="string">"hRadio-Checked"</span>);</span><br><span class="line">      <span class="keyword">if</span> (!$(<span class="keyword">this</span>).prev().is(<span class="string">':checked'</span>)) &#123;</span><br><span class="line">        $(<span class="keyword">this</span>).addClass(<span class="string">"hRadio-Checked"</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).prev()[<span class="number">0</span>].checked = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      event.stopPropagation();</span><br><span class="line">    &#125;).prev().hide();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery)</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.checkbox'</span>).hcheckbox();</span><br><span class="line">  $(<span class="string">'.radio-wper'</span>).hradio();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Style<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-class">.radio-wper</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-tag">label</span>,</span><br><span class="line"><span class="selector-class">.radio-wper</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-class">.disabled</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-class">.checked</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.radio-wper</span> <span class="selector-class">.hRadio</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.radio-wper</span> <span class="selector-class">.hRadio-Checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-position</span>:  <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-class">.disabled</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../../images/activities/adi2018/check-01.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.checkbox</span> <span class="selector-class">.checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../../images/activities/adi2018/check-02.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.radio-wper</span> <span class="selector-class">.hRadio</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../../images/activities/adi2018/radio-01.png'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.radio-wper</span> <span class="selector-class">.hRadio-Checked</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'../../images/activities/adi2018/radio-02.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现文字的无缝滚动、间歇性向上翻滚</title>
      <link href="/2018/11/29/plugin-scroll/"/>
      <url>/2018/11/29/plugin-scroll/</url>
      
        <content type="html"><![CDATA[<p>文字向上滚动分为：无缝滚动、间歇性滚动<br><a id="more"></a></p><h3 id="间歇性滚动"><a href="#间歇性滚动" class="headerlink" title="间歇性滚动"></a>间歇性滚动</h3><h4 id="使用jQuery的-animate"><a href="#使用jQuery的-animate" class="headerlink" title="使用jQuery的 animate"></a>使用jQuery的 <code>animate</code></h4><p>一般情况下，向上翻滚一行内容，即一个<code>&lt;li&gt;&lt;/li&gt;</code>，但是如果是一行有多个<code>li</code>标签，要使用常见的插件就会出现问题了…</p><p>所以自己改吧改吧：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.myScroll = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> init = &#123;</span><br><span class="line">      items: <span class="number">1</span>,  <span class="comment">//一行有几项内容</span></span><br><span class="line">      speed: <span class="number">3000</span>,  <span class="comment">//滚动速度</span></span><br><span class="line">      moveHeight: <span class="number">22</span>  <span class="comment">// 行高</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> intId = [];</span><br><span class="line">    <span class="keyword">var</span> opts = $.extend(&#123;&#125;, init, options);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">moveUp</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">      obj.animate(&#123;</span><br><span class="line">        marginTop: <span class="string">'-'</span> + opts.moveHeight + <span class="string">'px'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="number">1000</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line">        $<span class="keyword">this</span>.find(<span class="string">'li'</span>).slice(<span class="number">0</span>, opts.items).appendTo($<span class="keyword">this</span>);</span><br><span class="line">        $<span class="keyword">this</span>.css(<span class="string">'margin-top'</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> sh = opts.moveHeight,</span><br><span class="line">        speed = opts.speed,</span><br><span class="line">        items = opts.items,</span><br><span class="line">        $<span class="keyword">this</span> = $(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">      intId[i] = setInterval(timerEvent, speed);</span><br><span class="line"></span><br><span class="line">      $<span class="keyword">this</span>.hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(intId[i]);</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        intId[i] = setInterval(timerEvent, speed);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">var</span> len = $<span class="keyword">this</span>.find(<span class="string">'li'</span>).length;</span><br><span class="line">      <span class="keyword">if</span>(len &gt; items &amp;&amp; len &lt;= items * <span class="number">2</span>) &#123;</span><br><span class="line">        $<span class="keyword">this</span>.html($<span class="keyword">this</span>.html() + $<span class="keyword">this</span>.html());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">timerEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = $<span class="keyword">this</span>.find(<span class="string">'li'</span>).length;</span><br><span class="line">        <span class="keyword">if</span>(len &gt; items &amp;&amp; len &lt;= items * <span class="number">2</span>) &#123;</span><br><span class="line">          len /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= items) &#123;</span><br><span class="line">          clearInterval(intId[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          moveUp($<span class="keyword">this</span>, sh);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">$(<span class="string">'#scrollLists'</span>).myScroll(&#123;</span><br><span class="line">  items: <span class="number">3</span>,</span><br><span class="line">  speed: <span class="number">3000</span>,</span><br><span class="line">  moveHeight: <span class="number">22</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>以下的都是单行内容翻滚，搬过来记录下：</p><h4 id="使用JavaScript"><a href="#使用JavaScript" class="headerlink" title="使用JavaScript"></a>使用JavaScript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Scroll</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Scroll.prototype.upScroll = <span class="function"><span class="keyword">function</span> (<span class="params">dom, _h, interval</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dom = <span class="built_in">document</span>.getElementById(dom);</span><br><span class="line">  <span class="keyword">var</span> timer = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _field = dom.children[<span class="number">0</span>];</span><br><span class="line">    _field.style.marginTop = _h;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _field = dom.children[<span class="number">0</span>];</span><br><span class="line">    _field.style.marginTop = <span class="string">"0px"</span>;</span><br><span class="line">    dom.appendChild(_field);</span><br><span class="line">    <span class="keyword">var</span> _field = dom.children[<span class="number">0</span>]</span><br><span class="line">    _field.style.marginTop = _h;</span><br><span class="line">  &#125;, interval)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myScroll = <span class="keyword">new</span> Scroll();</span><br></pre></td></tr></table></figure><p>用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * demo 父容器(ul)的id</span></span><br><span class="line"><span class="comment"> * -36px 子元素li的高度</span></span><br><span class="line"><span class="comment"> * 3000  滚动间隔时间</span></span><br><span class="line"><span class="comment"> * 每次滚动持续时间可到css文件中修改</span></span><br><span class="line"><span class="comment"> * （找不到原文了-.-）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">myScroll.upScroll(<span class="string">"demo"</span>,<span class="string">"-36px"</span>,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p><h3 id="无缝滚动"><a href="#无缝滚动" class="headerlink" title="无缝滚动"></a>无缝滚动</h3><p>下载地址：<a href="http://www.jq22.com/jquery-info6631" target="_blank" rel="noopener">简单的jQuery无缝向上滚动效果</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $.fn.myScroll = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//默认配置</span></span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">      speed: <span class="number">40</span>, <span class="comment">//滚动速度,值越大速度越慢</span></span><br><span class="line">      rowHeight: <span class="number">24</span> <span class="comment">//每行的高度</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> opts = $.extend(&#123;&#125;, defaults, options),</span><br><span class="line">      intId = [];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">marquee</span>(<span class="params">obj, step</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      obj.find(<span class="string">"ul"</span>).animate(&#123;</span><br><span class="line">        marginTop: <span class="string">'-=1'</span></span><br><span class="line">      &#125;, <span class="number">0</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="built_in">Math</span>.abs(<span class="built_in">parseInt</span>($(<span class="keyword">this</span>).css(<span class="string">"margin-top"</span>)));</span><br><span class="line">        <span class="keyword">if</span> (s &gt;= step) &#123;</span><br><span class="line">          $(<span class="keyword">this</span>).find(<span class="string">"li"</span>).slice(<span class="number">0</span>, <span class="number">1</span>).appendTo($(<span class="keyword">this</span>));</span><br><span class="line">          $(<span class="keyword">this</span>).css(<span class="string">"margin-top"</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> sh = opts[<span class="string">"rowHeight"</span>],</span><br><span class="line">        speed = opts[<span class="string">"speed"</span>],</span><br><span class="line">        _this = $(<span class="keyword">this</span>);</span><br><span class="line">      intId[i] = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (_this.find(<span class="string">"ul"</span>).height() &lt;= _this.height()) &#123;</span><br><span class="line">          clearInterval(intId[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          marquee(_this, sh);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, speed);</span><br><span class="line"></span><br><span class="line">      _this.hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(intId[i]);</span><br><span class="line">      &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        intId[i] = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (_this.find(<span class="string">"ul"</span>).height() &lt;= _this.height()) &#123;</span><br><span class="line">            clearInterval(intId[i]);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            marquee(_this, sh);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, speed);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery);</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'.myscroll'</span>).myScroll(&#123;</span><br><span class="line">    speed: <span class="number">40</span>, <span class="comment">//数值越大，速度越慢</span></span><br><span class="line">    rowHeight: <span class="number">26</span> <span class="comment">//li的高度</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>九宫格抽奖</title>
      <link href="/2018/11/27/plugin-lottery/"/>
      <url>/2018/11/27/plugin-lottery/</url>
      
        <content type="html"><![CDATA[<p>九宫格抽奖记录：</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 九宫格抽奖</span></span><br><span class="line"><span class="keyword">var</span> click=<span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> luck=&#123;</span><br><span class="line"></span><br><span class="line">  index: <span class="number">0</span>,<span class="comment">//当前转动到哪个位置，起点位置</span></span><br><span class="line">  count: <span class="number">0</span>,<span class="comment">//总共有多少个位置</span></span><br><span class="line">  timer: <span class="number">0</span>,<span class="comment">//setTimeout的ID，用clearTimeout清除</span></span><br><span class="line">  speed: <span class="number">30</span>,<span class="comment">//初始转动速度</span></span><br><span class="line">  times: <span class="number">0</span>,<span class="comment">//转动次数</span></span><br><span class="line">  cycle: <span class="number">70</span>,<span class="comment">//转动基本次数：即至少需要转动多少次再进入抽奖环节</span></span><br><span class="line">  prize: <span class="number">-1</span>,<span class="comment">//中奖位置</span></span><br><span class="line"></span><br><span class="line">  init:<span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="string">"#"</span>+id).find(<span class="string">".luck-unit"</span>).length&gt;<span class="number">0</span>) &#123;</span><br><span class="line">      $luck = $(<span class="string">"#"</span>+id);</span><br><span class="line">      $units = $luck.find(<span class="string">".luck-unit"</span>);</span><br><span class="line">      <span class="keyword">this</span>.obj = $luck;</span><br><span class="line">      <span class="keyword">this</span>.count = $units.length;</span><br><span class="line">      <span class="comment">// $luck.find(".luck-unit-"+this.index).addClass("active");</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  roll:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.index;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="keyword">this</span>.count;</span><br><span class="line">    <span class="keyword">var</span> luck = <span class="keyword">this</span>.obj;</span><br><span class="line">    $(luck).find(<span class="string">".luck-unit-"</span>+index).removeClass(<span class="string">"active"</span>);</span><br><span class="line">    index += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (index&gt;count<span class="number">-1</span>) &#123;</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    $(luck).find(<span class="string">".luck-unit-"</span>+index).addClass(<span class="string">"active"</span>);</span><br><span class="line">    <span class="keyword">this</span>.index=index;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  stop:<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.prize=index;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roll</span>(<span class="params">which</span>)</span>&#123;</span><br><span class="line">  luck.times += <span class="number">1</span>;</span><br><span class="line">  luck.roll();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (luck.times &gt; luck.cycle+<span class="number">10</span> &amp;&amp; luck.prize==luck.index) &#123;</span><br><span class="line">    <span class="keyword">var</span> title = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> prize = <span class="string">''</span>;</span><br><span class="line">    <span class="comment">// 最终停下来的位置</span></span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    clearTimeout(luck.timer);</span><br><span class="line">    luck.prize=<span class="number">-1</span>;</span><br><span class="line">    luck.times=<span class="number">0</span>;</span><br><span class="line">    click=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(which) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        prize = <span class="string">'小米鼠标'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        prize = <span class="string">'固态硬盘'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        prize = <span class="string">'乐扣保温杯'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        prize = <span class="string">'京东券'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        prize = <span class="string">'谢谢参与'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        prize = <span class="string">'万用表'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        prize = <span class="string">'摩尔吧课程折扣券'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        prize = <span class="string">'小米耳机'</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(which == <span class="number">4</span>) &#123;</span><br><span class="line">      title = <span class="string">'谢谢参与'</span>;</span><br><span class="line">      content = <span class="string">'再接再厉'</span></span><br><span class="line">      desc = <span class="string">'请查看活动详情，获取更多抽奖资格'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      title = <span class="string">'恭喜您'</span>;</span><br><span class="line">      content = <span class="string">'获得 &lt;span class="blue"&gt;'</span>+ prize +<span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">      <span class="keyword">if</span>(which == <span class="number">6</span>) &#123;</span><br><span class="line">        desc = <span class="string">'请至您的”个人中心“查收'</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        desc = <span class="string">'奖品将于活动结束后统一发送'</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 展示中奖状态</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      modalShow(title,content,desc);</span><br><span class="line">    &#125;, <span class="number">800</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (luck.times&lt;luck.cycle) &#123;</span><br><span class="line">      luck.speed -= <span class="number">10</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (luck.times==luck.cycle) &#123;</span><br><span class="line">      <span class="comment">// 最终中奖位置的索引</span></span><br><span class="line">      luck.prize = which;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (luck.times &gt; luck.cycle+<span class="number">10</span> &amp;&amp; ((luck.prize==<span class="number">0</span> &amp;&amp; luck.index==<span class="number">7</span>) || luck.prize==luck.index+<span class="number">1</span>)) &#123;</span><br><span class="line">        luck.speed += <span class="number">110</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        luck.speed += <span class="number">20</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (luck.speed&lt;<span class="number">40</span>) &#123;</span><br><span class="line">      luck.speed=<span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    luck.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      roll(which);</span><br><span class="line">    &#125;,luck.speed);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lottery init</span></span><br><span class="line">  luck.init(<span class="string">'luckArea'</span>);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">"#startBtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(click) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      click=<span class="literal">true</span>;</span><br><span class="line">      luck.speed=<span class="number">100</span>;</span><br><span class="line">      $.get(<span class="string">"http://www.moore8.com/campaign/lotteryAct"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> data = $.parseJSON(data);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'data:'</span>, data);</span><br><span class="line">        <span class="keyword">if</span>(data.code == <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> which = data.type;</span><br><span class="line">          <span class="comment">// 调取抽奖并传值</span></span><br><span class="line">          roll(which);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(data.msg == <span class="string">'请先登录！'</span>) &#123;</span><br><span class="line">            loginFunc(<span class="string">'course_gift'</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> desc = <span class="string">'请查看活动详情，获取更多抽奖资格'</span>;</span><br><span class="line">            modalShow(<span class="string">'对不起'</span>, data.msg, desc);</span><br><span class="line">          &#125;</span><br><span class="line">          click = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modalShow</span>(<span class="params">title, body, desc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> title = title || <span class="string">'温馨提示'</span>;</span><br><span class="line">  <span class="keyword">var</span> body = body || <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">var</span> desc = desc || <span class="string">''</span>;</span><br><span class="line">  $(<span class="string">'#mTitle'</span>).html(title);</span><br><span class="line">  $(<span class="string">'#mBody'</span>).html(body);</span><br><span class="line">  $(<span class="string">'#mDesc'</span>).html(desc);</span><br><span class="line">  $(<span class="string">'#myModal'</span>).modal(<span class="string">'show'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginFunc</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> href = <span class="built_in">window</span>.location.href;</span><br><span class="line">  <span class="keyword">var</span> id = id ? <span class="string">"%23"</span> + id : <span class="string">''</span>;</span><br><span class="line">  <span class="built_in">window</span>.location.href = <span class="string">"/login/?referer="</span> + href + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活动之整点秒杀功能优化</title>
      <link href="/2018/11/27/feat-sale/"/>
      <url>/2018/11/27/feat-sale/</url>
      
        <content type="html"><![CDATA[<p>整点秒杀功能总结：<br><a id="more"></a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> starttime1 = <span class="string">"2018/11/14 14:00"</span>,</span><br><span class="line">  endtime1 = <span class="string">"2018/11/15 14:00"</span>,</span><br><span class="line"></span><br><span class="line">  starttime7 = <span class="string">"2018/11/19 14:00"</span>,</span><br><span class="line">  endtime7 = <span class="string">"2018/11/20 14:00"</span>,</span><br><span class="line">  <span class="comment">// 中 5~8 组（省略）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 下 9~12 组（省略）</span></span><br><span class="line"></span><br><span class="line">  starttime22 = <span class="string">"2018/11/29 14:00"</span>,</span><br><span class="line">  endtime22 = <span class="string">"2018/11/30 14:00"</span>,</span><br><span class="line"></span><br><span class="line">  starttime23 = <span class="string">"2018/12/14 14:00"</span>,</span><br><span class="line">  endtime23 = <span class="string">"2018/12/15 14:00"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 整点秒杀状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getShopStatus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> statuShop = [];</span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    url: <span class="string">'//www.eeboard.com/wp-content/themes/eeboard/api/eeboardsix.php?act=shop_detail'</span>,</span><br><span class="line">    dataType: <span class="string">'json'</span>,</span><br><span class="line">    cache: <span class="literal">false</span>,</span><br><span class="line">    <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">    type: <span class="string">"GET"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> arr8 = data.data.eight;</span><br><span class="line">      <span class="comment">// 整点秒杀状态</span></span><br><span class="line">      <span class="keyword">if</span> (!arr8) &#123;</span><br><span class="line">        arr8 = [<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>]</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> d1over = arr8[<span class="number">0</span>],</span><br><span class="line">        d2over = arr8[<span class="number">1</span>],</span><br><span class="line">        d3over = arr8[<span class="number">2</span>],</span><br><span class="line">        d4over = arr8[<span class="number">3</span>],</span><br><span class="line">        d5over = arr8[<span class="number">4</span>],</span><br><span class="line">        d6over = arr8[<span class="number">5</span>],</span><br><span class="line">        d7over = arr8[<span class="number">6</span>],</span><br><span class="line">        d8over = arr8[<span class="number">7</span>],</span><br><span class="line">        d9over = arr8[<span class="number">8</span>],</span><br><span class="line">        d10over = arr8[<span class="number">9</span>],</span><br><span class="line">        d11over = arr8[<span class="number">10</span>],</span><br><span class="line">        d12over = arr8[<span class="number">11</span>];</span><br><span class="line"></span><br><span class="line">      statuShop = [</span><br><span class="line">        d1over, d1over, d2over, d2over, d3over, d3over, d4over,</span><br><span class="line">        d5over, d5over, d6over, d6over, d7over, d7over, d8over, d8over,</span><br><span class="line">        d9over, d9over, d10over, d10over, d11over, d11over, d12over, d12over</span><br><span class="line">      ];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> statuShop;</span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// console.log('商城接口报错---');</span></span><br><span class="line">      <span class="comment">// console.log(error);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> statuShop;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> shopStatusArr = getShopStatus();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间状态函数  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeStatus</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> status = <span class="string">'load'</span>,</span><br><span class="line">    nowTime = <span class="built_in">parseFloat</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()),</span><br><span class="line">    startTime = <span class="built_in">parseFloat</span>((<span class="keyword">new</span> <span class="built_in">Date</span>(start)).getTime()),</span><br><span class="line">    endTime = <span class="built_in">parseFloat</span>((<span class="keyword">new</span> <span class="built_in">Date</span>(end)).getTime()),</span><br><span class="line">    lastStartTime = <span class="built_in">parseFloat</span>(startTime - nowTime),</span><br><span class="line">    lastEndTime = <span class="built_in">parseFloat</span>(endTime - nowTime);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未开始</span></span><br><span class="line">  <span class="keyword">if</span> (lastStartTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status = <span class="string">'load'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastStartTime &lt;= <span class="number">0</span> &amp;&amp; lastEndTime &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 进行中</span></span><br><span class="line">    <span class="keyword">return</span> status = <span class="string">'start'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastEndTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 已结束</span></span><br><span class="line">    <span class="keyword">return</span> status = <span class="string">'end'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 各个时间段状态切换函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTimeStartEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer;</span><br><span class="line">  <span class="keyword">var</span> timersArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>];</span><br><span class="line">  <span class="comment">// 判断时间状态</span></span><br><span class="line">  $.each(timersArr, <span class="function"><span class="keyword">function</span> (<span class="params">i, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="built_in">eval</span>(<span class="string">'starttime'</span> + item);</span><br><span class="line">    <span class="keyword">var</span> end = <span class="built_in">eval</span>(<span class="string">'endtime'</span> + item);</span><br><span class="line">    <span class="keyword">var</span> status = timeStatus(start, end);</span><br><span class="line">   </span><br><span class="line">    switchCaseEvent(item, status);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> *秒杀时间监控：判断时间段函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">intervalStartEvent</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bigTimer;</span><br><span class="line">  <span class="keyword">var</span> isClear = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">var</span> status = timeStatus(start, end);</span><br><span class="line">  <span class="comment">// 时间截止，清除定时器</span></span><br><span class="line">  <span class="keyword">if</span> (status === <span class="string">'end'</span>) &#123;</span><br><span class="line">    isClear = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isClear) &#123;</span><br><span class="line">    clearTimeout(bigTimer);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    bigTimer = setTimeout(<span class="string">'intervalStartEvent(starttime1, endtime23);'</span>, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 监控时间段函数</span></span><br><span class="line">  isTimeStartEvent();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提示及button状态切换函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">switchCaseEvent</span>(<span class="params">item, type</span>) </span>&#123;</span><br><span class="line">  item = item || <span class="number">1</span>;</span><br><span class="line">  type = type || <span class="string">'end'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (item) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn1'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn2'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn3'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn4'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn5'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn6'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">13</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn7'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">14</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">15</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn8'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">16</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">17</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn9'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">19</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn10'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">20</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">21</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn11'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">23</span>:</span><br><span class="line">      startAndEndEvent($(<span class="string">'#qiangbtn12'</span>), item, type);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文字状态切换函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startAndEndEvent</span>(<span class="params">obj, item, type</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!obj) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">'start'</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> status = shopStatusArr[item - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (status) &#123;</span><br><span class="line">      $(<span class="string">'#qiang-time0'</span> + item).text(<span class="string">'开始秒杀'</span>);</span><br><span class="line">      obj.removeClass(<span class="string">'unclick'</span>).text(<span class="string">'开始秒杀'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">'#qiang-time0'</span> + item).text(<span class="string">'已抢光'</span>).css(<span class="string">'color'</span>, <span class="string">'#9b9b9b'</span>);</span><br><span class="line">      obj.addClass(<span class="string">'unclick unclick-over'</span>).text(<span class="string">'已抢光'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'end'</span>) &#123;</span><br><span class="line">    $(<span class="string">'#qiang-time0'</span> + item).text(<span class="string">'已抢光'</span>).css(<span class="string">'color'</span>, <span class="string">'#9b9b9b'</span>);</span><br><span class="line">    obj.addClass(<span class="string">'unclick unclick-time'</span>).text(<span class="string">'已抢光'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $(<span class="string">'#qiang-time0'</span> + item).text(<span class="string">'即将开始'</span>);</span><br><span class="line">    <span class="comment">// 两对时间段对应同一个按钮，判断本段时间是否截止，再开启另一段时间的状态</span></span><br><span class="line">    <span class="keyword">if</span> (obj.hasClass(<span class="string">'unclick-time'</span>)) &#123;</span><br><span class="line">      obj.removeClass(<span class="string">'unclick'</span>).text(<span class="string">'即将开始'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 工具库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置Cookie</title>
      <link href="/2018/11/03/web-cookie/"/>
      <url>/2018/11/03/web-cookie/</url>
      
        <content type="html"><![CDATA[<h3 id="设置Cookie总结"><a href="#设置Cookie总结" class="headerlink" title="设置Cookie总结"></a>设置Cookie总结</h3><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 收藏功能</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">addFavorite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> title = <span class="string">'意法半导体STM32/STM8技术社区 - 提供最新的ST资讯和技术交流'</span>;</span><br><span class="line">   <span class="keyword">var</span> URL = <span class="string">'http://www.stmcu.org.cn/'</span>; </span><br><span class="line">   <span class="comment">// IE10</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="built_in">document</span>.all) &#123;</span><br><span class="line">     <span class="built_in">window</span>.external.addFavorite(URL, title);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     alert(<span class="string">'手动 Ctrl+D 可以收藏我们的网站哦'</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置cookie，同一域名都可获取</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, exdays</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> exdays = exdays || <span class="number">1024</span>;</span><br><span class="line">   <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">   d.setTime(d.getTime() + (exdays * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>));</span><br><span class="line">   <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + <span class="string">";path=/;expires="</span> + d.toGMTString();</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 读取cookies，判断是否存在设置的name</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> name = name + <span class="string">"="</span>;</span><br><span class="line">   <span class="keyword">var</span> ca = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ca.length; i++) &#123;</span><br><span class="line">     <span class="keyword">var</span> c = ca[i].trim();</span><br><span class="line">     <span class="keyword">if</span> (c.indexOf(name) == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> c.substring(name.length, c.length);</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">checkCookie</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> user = getCookie(<span class="string">"msgCookie"</span>);</span><br><span class="line">   <span class="keyword">var</span> width = <span class="built_in">window</span>.innerWidth||<span class="built_in">document</span>.documentElement.clientWidth||<span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">   <span class="keyword">if</span>(width &gt;= <span class="number">1080</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (user != <span class="string">""</span>) &#123;</span><br><span class="line">       msgHide();</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       msgShow();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 关闭时设置cookie</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">closeModal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   msgHide();</span><br><span class="line">   setCookie(<span class="string">"msgCookie"</span>, <span class="string">'msgCookie'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">msgHide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">'newsTipsModal'</span>).style.display = <span class="string">'none'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">msgShow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">'newsTipsModal'</span>).style.display = <span class="string">'block'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// init</span></span><br><span class="line"> checkCookie();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js功能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习JavaScript深入系列简要总结</title>
      <link href="/2018/10/31/js-learn-prototype/"/>
      <url>/2018/10/31/js-learn-prototype/</url>
      
        <content type="html"><![CDATA[<p>学习JavaScript深入系列简要总结<br><a id="more"></a></p><h3 id="从原型到原型链"><a href="#从原型到原型链" class="headerlink" title="从原型到原型链"></a>从原型到原型链</h3><p>原文地址：<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript深入之从原型到原型链</a></p><blockquote><p>每一个函数都有一个<code>prototype</code>属性，该属性指向了一个对象，此对象为调用该函数而创建的实例的原型</p></blockquote><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype1.png" alt="构造函数和实例原型的关系图"></p><blockquote><p>每一个对象（除null）都具有一个属性：<code>__proto__</code>，这个属性指向该对象的原型</p></blockquote><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype2.png" alt="实例与实例原型的关系图"></p><blockquote><p>每个原型都有一个constructor属性指向关联的构造函数</p></blockquote><p><img src="https://raw.githubusercontent.com/mqyqingfeng/Blog/master/Images/prototype3.png" alt=""></p><blockquote><p>原型对象是通过 <code>Object</code> 构造函数生成的，最后<code>Object.prototype.__proto__ = null</code></p></blockquote><p><img src="https://github.com/mqyqingfeng/Blog/raw/master/Images/prototype5.png" alt="原型链示意图"></p><h3 id="词法作用域和动态作用域"><a href="#词法作用域和动态作用域" class="headerlink" title="词法作用域和动态作用域"></a>词法作用域和动态作用域</h3><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a></p><blockquote><p>javascript采用的是<code>词法作用域(lexical scoping)</code>，函数的作用域是在函数定义的时候就决定了，而不是调用的时候才决定</p></blockquote><ul><li>词法作用域，即静态作用域，函数的作用域在函数定义的时候就决定了</li><li>动态作用域，函数的作用域是在函数调用的时候才决定</li></ul><h3 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h3><p>当执行一个函数的时候，就会创建一个<code>执行上下文(execution context)</code>，并且压入<code>执行上下文栈(Execution context stack, ESC)</code></p><p>当函数执行完毕的时候，会将函数的<code>执行上下文栈</code>中弹出</p><h3 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h3><p>1、全局上下文的变量对象初始化：全局对象</p><p>2、函数上下文的变量对象初始化：只包括<code>Arguments</code>对象</p><p>3、进入执行上下文时：给变量对象添加形参、函数声明、变量声明等初始的属性值</p><p>4、代码执行阶段：再次修改变量对象的属性值</p><p>总结：未进入执行阶段之前，<code>变量对象(VO)</code>中的属性都不能访问！但是进入执行阶段之后，<code>变量对象(VO)</code>转变为了<code>活动对象(AO)</code>，里面的属性都能被访问了，然后开始进行执行阶段的操作。它们其实都是同一个对象，只是处于执行上下文的不同生命周期。</p><p>最后，函数是“第一等公民”，记住这个，变量名称和函数名称相同的声明，优先执行函数声明</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h3 id="从ECMAScript规范解读this"><a href="#从ECMAScript规范解读this" class="headerlink" title="从ECMAScript规范解读this"></a>从ECMAScript规范解读this</h3><h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包是指那些能够访问自由变量的函数。</p><p>自由变量是指在函数中使用的，但既不是参数也不是函数的局部变量的变量。</p><p>那么，闭包 = 函数 + 函数能够访问的自由变量。</p><h3 id="参数按值传递"><a href="#参数按值传递" class="headerlink" title="参数按值传递"></a>参数按值传递</h3><p>ECMAScript中所有函数的参数都是按值传递的。</p><p>即，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制给另一个变量一样。</p><p>参数如果是基本类型是按值传递，如果是引用类型按共享传递。</p><p>共享传递是指，在传递对象的时候，传递对象的引用的副本。</p><h3 id="call和apply的模拟实现"><a href="#call和apply的模拟实现" class="headerlink" title="call和apply的模拟实现"></a>call和apply的模拟实现</h3><p><code>call()</code>在使用一个指定的this值和若干个指定的参数值的前提下，调用某个函数或方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">//获取调用call的函数，用this可以获取</span></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把传给call的参数传递给了context.fn函数</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>apply()</code>同<code>call()</code>，只不过将多个参数值，以数组的形式传入而已。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; arr.length; index++) &#123;</span><br><span class="line">      args.push(<span class="string">'arr['</span> + index + <span class="string">']'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bind的模拟实现"><a href="#bind的模拟实现" class="headerlink" title="bind的模拟实现"></a>bind的模拟实现</h3><p><code>bind()</code>方法会创建一个新函数。当这个新函数被调用，bind()第一个参数将作为它运行时的this，之后的一系列参数将会在传递的实参前传入，作为它的参数。</p><h3 id="new的模拟实现"><a href="#new的模拟实现" class="headerlink" title="new的模拟实现"></a>new的模拟实现</h3><p>new运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冴羽的博客之JavaScript、ES6系列集锦</title>
      <link href="/2018/10/26/blog-01/"/>
      <url>/2018/10/26/blog-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JavaScript深入系列 15 篇已完结<br>JavaScript专题系列 20 篇已完结<br>underscore 系列 8 篇已完结<br><a id="more"></a></p></blockquote><h2 id="冴羽的博客"><a href="#冴羽的博客" class="headerlink" title="冴羽的博客"></a>冴羽的博客</h2><h3 id="专栏"><a href="#专栏" class="headerlink" title="专栏"></a>专栏</h3><ul><li><a href="https://juejin.im/user/58e4b9b261ff4b006b3227f4" target="_blank" rel="noopener">掘金主页</a></li><li><p><a href="https://segmentfault.com/u/yayu/articles" target="_blank" rel="noopener">segmentfault主页</a></p></li><li><p><a href="https://www.zhihu.com/people/qing-feng-yi-yang/activities" target="_blank" rel="noopener">知乎</a></p></li></ul><h3 id="深入系列目录"><a href="#深入系列目录" class="headerlink" title="深入系列目录"></a>深入系列目录</h3><ol><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScirpt深入之从原型到原型链</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript深入之词法作用域和动态作用域</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">JavaScript深入之执行上下文栈</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">JavaScript深入之变量对象</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener">JavaScript深入之作用域链</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">JavaScript深入之从ECMAScript规范解读this</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">JavaScript深入之执行上下文</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/9" target="_blank" rel="noopener">JavaScript深入之闭包</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/10" target="_blank" rel="noopener">JavaScript深入之参数按值传递</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">JavaScript深入之call和apply的模拟实现</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/12" target="_blank" rel="noopener">JavaScript深入之bind的模拟实现</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener">JavaScript深入之new的模拟实现</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/14" target="_blank" rel="noopener">JavaScript深入之类数组对象与arguments</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/15" target="_blank" rel="noopener">JavaScript深入之创建对象的多种方式以及优缺点</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/16" target="_blank" rel="noopener">JavaScript深入之继承的多种方式以及优缺点</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/17" target="_blank" rel="noopener">JavaScript深入系列15篇正式完结！</a></li></ol><h3 id="专题系列目录"><a href="#专题系列目录" class="headerlink" title="专题系列目录"></a>专题系列目录</h3><ol><li><a href="https://github.com/mqyqingfeng/Blog/issues/22" target="_blank" rel="noopener">JavaScript专题之跟着underscore学防抖</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/26" target="_blank" rel="noopener">JavaScript专题之跟着underscore学节流</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/27" target="_blank" rel="noopener">JavaScript专题之数组去重</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/28" target="_blank" rel="noopener">JavaScript专题之类型判断(上)</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/30" target="_blank" rel="noopener">JavaScript专题之类型判断(下)</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/32" target="_blank" rel="noopener">JavaScript专题之深浅拷贝</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/33" target="_blank" rel="noopener">JavaScript专题之从零实现jQuery的extend</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/35" target="_blank" rel="noopener">JavaScript专题之如何求数组的最大值和最小值</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/36" target="_blank" rel="noopener">JavaScript专题之数组扁平化</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/37" target="_blank" rel="noopener">JavaScript专题之学underscore在数组中查找指定元素</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/40" target="_blank" rel="noopener">JavaScript专题之jQuery通用遍历方法each的实现</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/41" target="_blank" rel="noopener">JavaScript专题之如何判断两个对象相等</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/42" target="_blank" rel="noopener">JavaScript专题之函数柯里化</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/43" target="_blank" rel="noopener">JavaScript专题之偏函数</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/44" target="_blank" rel="noopener">JavaScript专题之惰性函数</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/45" target="_blank" rel="noopener">JavaScript专题之函数组合</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/46" target="_blank" rel="noopener">JavaScript专题之函数记忆</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/49" target="_blank" rel="noopener">JavaScript专题之递归</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/51" target="_blank" rel="noopener">JavaScript专题之乱序</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/52" target="_blank" rel="noopener">JavaScript专题之解读 v8 排序源码</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/53" target="_blank" rel="noopener">JavaScript专题系列20篇正式完结！</a></li></ol><h3 id="underscore-系列目录"><a href="#underscore-系列目录" class="headerlink" title="underscore 系列目录"></a>underscore 系列目录</h3><ol><li><a href="https://github.com/mqyqingfeng/Blog/issues/56" target="_blank" rel="noopener">underscore 系列之如何写自己的 underscore</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/57" target="_blank" rel="noopener">underscore 系列之链式调用</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/58" target="_blank" rel="noopener">underscore 系列之内部函数 cb 和 optimizeCb</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/60" target="_blank" rel="noopener">underscore 系列之内部函数 restArgs</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/62" target="_blank" rel="noopener">underscore 系列之防冲突与 Utility Functions</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/63" target="_blank" rel="noopener">underscore 系列之实现一个模板引擎(上)</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/70" target="_blank" rel="noopener">underscore 系列之实现一个模板引擎(下)</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/77" target="_blank" rel="noopener">underscore 系列之字符实体与 _.escape</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/79" target="_blank" rel="noopener">underscore 的源码该如何阅读？</a></li></ol><h3 id="ES6-系列目录"><a href="#ES6-系列目录" class="headerlink" title="ES6 系列目录"></a>ES6 系列目录</h3><ol><li><a href="https://github.com/mqyqingfeng/Blog/issues/82" target="_blank" rel="noopener">ES6 系列之 let 和 const</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/84" target="_blank" rel="noopener">ES6 系列之模板字符串</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/85" target="_blank" rel="noopener">ES6 系列之箭头函数</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/87" target="_blank" rel="noopener">ES6 系列之模拟实现 Symbol 类型</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/90" target="_blank" rel="noopener">ES6 系列之迭代器与 for of</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/91" target="_blank" rel="noopener">ES6 系列之模拟实现一个 Set 数据结构</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/92" target="_blank" rel="noopener">ES6 系列之 WeakMap</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/98" target="_blank" rel="noopener">ES6 系列之我们来聊聊 Promise</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/99" target="_blank" rel="noopener">ES6 系列之 Generator 的自动执行</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/100" target="_blank" rel="noopener">ES6 系列之我们来聊聊 Async</a></li></ol><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><ol><li><a href="https://juejin.im/post/5bbc54a2e51d450e5a7445b4" target="_blank" rel="noopener">如何轻松拿到淘宝前端 offer</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Purl.js-JS获取地址栏信息用例测试</title>
      <link href="/2018/09/23/js-purl/"/>
      <url>/2018/09/23/js-purl/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Purl.js可以帮助我们来获取地址栏的一些信息， 可以使用原生js，也可以使用jQuery</p></blockquote><ul><li><a href="https://www.bootcdn.cn/purl/readme/" target="_blank" rel="noopener">Purl.js官方文档</a></li></ul><a id="more"></a><table><thead><tr><th style="text-align:left">Attributes</th><th>Info</th></tr></thead><tbody><tr><td style="text-align:left">source</td><td>The whole url being parsed</td></tr><tr><td style="text-align:left">protocol</td><td>eg. http, https, file, etc</td></tr><tr><td style="text-align:left">host</td><td>eg. <a href="http://www.mydomain.com" target="_blank" rel="noopener">www.mydomain.com</a>, localhost etc</td></tr><tr><td style="text-align:left">port</td><td>eg. 80</td></tr><tr><td style="text-align:left">relative</td><td>The relative path to the file including the querystring (eg. /folder/dir/index.html?item=value)</td></tr><tr><td style="text-align:left">path</td><td>The path to the file (eg. /folder/dir/index.html)</td></tr><tr><td style="text-align:left">directory</td><td>The directory part of the path (eg. /folder/dir/)</td></tr><tr><td style="text-align:left">file</td><td>The basename of the file eg. index.html</td></tr><tr><td style="text-align:left">query</td><td>The entire query string if it exists, eg. item=value&amp;item2=value2</td></tr><tr><td style="text-align:left">fragment or anchor</td><td>The entire string after the # symbol</td></tr></tbody></table><h4 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url;</span><br><span class="line"><span class="keyword">var</span> myurl;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#clickBtn"</span>).find(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> res, resInfo;</span><br><span class="line"></span><br><span class="line">  myurl = $(<span class="string">"#urlArea"</span>).val();</span><br><span class="line">  <span class="comment">// 如果myurl为空，则会获取当前页面的url</span></span><br><span class="line">  url = purl(myurl);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">"#urlArea"</span>).val(myurl);</span><br><span class="line"></span><br><span class="line">  res = $(<span class="keyword">this</span>).text();</span><br><span class="line">  resInfo = getUrlInfo(url, res);</span><br><span class="line"></span><br><span class="line">  $(<span class="string">"#inputRes"</span>).val(resInfo);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlInfo</span>(<span class="params">url, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (res === <span class="string">'param'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> url.param();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res === <span class="string">'segment'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> url.segment();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> url.attr(res);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行试试看："><a href="#运行试试看：" class="headerlink" title="运行试试看："></a>运行试试看：</h4><ul><li><a href="https://codepen.io/istaotao/pen/EeJoKP" target="_blank" rel="noopener">codepen完整代码</a> </li></ul><h4 id="截图如下所示："><a href="#截图如下所示：" class="headerlink" title="截图如下所示："></a>截图如下所示：</h4><p><img src="https://cdn.files.qdfuns.com/article/content/picture/201807/20/221014v16gkkkdks3eegac.png" alt="截图"></p><h4 id="记录在QDfuns"><a href="#记录在QDfuns" class="headerlink" title="记录在QDfuns:"></a>记录在QDfuns:</h4><ul><li><a href="https://www.qdfuns.com/article/32286/0a69e234cca1cab2f2005425338623a8.html" target="_blank" rel="noopener">Purl.js-使用JS获取URL信息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 Canvas 图形绘制</title>
      <link href="/2018/09/23/canvas-01/"/>
      <url>/2018/09/23/canvas-01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>canvas元素并非Canvas中最强大的部分，真正的关键部分是2D渲染上下文，这是你真正绘制图形的地方。canvas元素的用途只是作为2D渲染上下文的包装器，它包含绘图和图形操作所需要的全部方法和丰富功能。理解这一点是很重要的，强调一下：绘图是在2D渲染上下文中进行的，而不是在canvas元素中进行。可以通过canvas元素访问和显示2D渲染上下文。<a href="http://techbrood.com/h5b2a?p=html-canvas-2dcontext" target="_blank" rel="noopener">【引入原文】</a></p></blockquote><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><p><a href="https://codepen.io/istaotao/pen/LJvzEm" target="_blank" rel="noopener">HTML5 Canvas粉尘态粒子引力效应</a><br><a id="more"></a></p><h3 id="文章："><a href="#文章：" class="headerlink" title="文章："></a>文章：</h3><p><a href="https://www.qdfuns.com/article/32286/453691c72f71e7534b062c8baa8e3506.html" target="_blank" rel="noopener">HTML5 Canvas 图形绘制 初级</a></p><p><a href="https://www.qdfuns.com/article/32286/4c494e2cdc21135c41be95fbb685e379.html" target="_blank" rel="noopener">HTML5 Canvas 图形绘制 中级</a></p><p><a href="https://www.qdfuns.com/article/32286/237e32dfb71a2626c02cfc74c65f7271.html" target="_blank" rel="noopener">HTML5跟随鼠标移动的雪花动画</a></p><p><a href="https://www.qdfuns.com/article/32286/e833cda2cb9eacc01f09ffae5734405e.html" target="_blank" rel="noopener">HTML5 Canvas很酷炫的粉尘态粒子引力效应实践</a></p><p><a href="https://www.qdfuns.com/article/32286/c05adac0d8a4f65121707a336bd1190b.html" target="_blank" rel="noopener">HTML5很酷炫的点线粒子特效，你不试一下？</a></p>]]></content>
      
      
      <categories>
          
          <category> Html5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】高效学习JavaScript的六个思维技巧</title>
      <link href="/2018/09/22/js-learn/"/>
      <url>/2018/09/22/js-learn/</url>
      
        <content type="html"><![CDATA[<p>初始整理于慕课网手记<a href="http://www.imooc.com/article/12113" target="_blank" rel="noopener">高效学习JavaScript的六个思维技巧</a><br><a id="more"></a></p><h2 id="更快学习JavaScript的六个思维技巧"><a href="#更快学习JavaScript的六个思维技巧" class="headerlink" title="更快学习JavaScript的六个思维技巧"></a>更快学习JavaScript的六个思维技巧</h2><blockquote><p><strong>当人们试图学习JavaScript或其他编程语言的时候，他们通常会遇到如下挑战。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 一些概念让他们感到困惑，特别是如果之前学过其他类型的语言。</span><br><span class="line"></span><br><span class="line">2. 很难找到学习的时间（或者动力）去学习。</span><br><span class="line"></span><br><span class="line">3. 你很容易忘掉之前学到的东西。</span><br><span class="line"></span><br><span class="line">4. JavaScript工具太多并且经常更新，以至于很难找到学习的切入点。</span><br><span class="line"></span><br><span class="line">5. ...</span><br></pre></td></tr></table></figure><p><strong>幸运的是，这些难题最终能够被克服。在这篇文章，我将展示六个能够帮助你更快、更开心、更高效地学习JavaScript的六个思维技巧。</strong></p><h3 id="1、不要让对未来的忧虑干扰你现在的学习"><a href="#1、不要让对未来的忧虑干扰你现在的学习" class="headerlink" title="1、不要让对未来的忧虑干扰你现在的学习"></a>1、不要让对未来的忧虑干扰你现在的学习</h3><blockquote><p>有些JavaScript初学者会问刚开始要学习哪种框架，但是如果你还没能熟练使用原生JavaScript，你就不应该问这种问题。因为你会花很多时间研究各种框架而得不到进步。</p></blockquote><blockquote><p>走出这个陷阱的一个方法是制定一个学习路径图。例如，要成为前端开发，你的路径图可能是下图。在将来你能够使用HTML和CSS制作动态页面。</p></blockquote><p><img src="http://img.mukewang.com/57ad9d660001149f07470214.png" alt="前端开发学习路径图"></p><h3 id="2、不要让自信骗你进入持续遗忘的陷阱"><a href="#2、不要让自信骗你进入持续遗忘的陷阱" class="headerlink" title="2、不要让自信骗你进入持续遗忘的陷阱"></a>2、不要让自信骗你进入持续遗忘的陷阱</h3><p><strong>快速理解一个概念会是JavaScript进步的最大阻碍，下面我将解释。</strong></p><blockquote><p>当你遇到一个知识点，而你好像理解了，你很可能抑制不住内心跳到下一个知识点的冲动。</p></blockquote><blockquote><p>现实可能是你会理解下一个知识点然后继续跳到下一个知识点。</p></blockquote><blockquote><p>但是，很快你会到达一个节点，在这个节点你发现自己已经忘了前面所学，于是你需要回过头复习，你快速瞟了一下之前所学然后又继续学习新的知识。</p></blockquote><blockquote><p>   但是现在，你忘记了其他东西。</p></blockquote><blockquote><p>   你一直重复这种继续-回顾-继续-回顾模式直到你发现自己完全迷失。</p><p>   你开始沮丧，想要休息，然后当你开始重振旗鼓，却发现自己已经忘掉所有。</p></blockquote><p><strong>幸运的是，我们有两个应对上述问题的方法：</strong></p><ul><li><p>一次只学一样东西；</p></li><li><p>做练习——实际就是敲代码；</p></li></ul><blockquote><p>   当你学习一个新的概念，你要将它实践出来，练习它，与它和善相处，甚至能够将它与其他概念联系到一起。</p></blockquote><blockquote><p>   当你学习一个示例，最重要的是你要自己将代码敲出来，这样能帮助你吸收它。另外，一次只学一个东西能够帮助你巩固所学，因为记忆更少的东西更容易。</p></blockquote><p><strong>这个过程看起来貌似比阅读然后快速跳到下一个知识点要花费更长的时间，但是实际上它所花的时间更少，因为这样你就不需要频繁复习之前所学。我在好几个场合后才艰难的领悟到这个道理。</strong></p><h3 id="3、使用正确的思维方式练习"><a href="#3、使用正确的思维方式练习" class="headerlink" title="3、使用正确的思维方式练习"></a>3、使用正确的思维方式练习</h3><p><strong>很多人认为敲代码是烦人的重复性工作，所以他们通常会跳过这个步骤试着寻找捷径。如果你试图为JavaScript练习寻找捷径，你将会为此花费更多的时间。</strong></p><p><strong>但是我们如何才能使得敲代码更加的有趣，使得我们愿意去敲代码呢？</strong></p><p><em>试着改变为下面的思维模式：</em></p><blockquote><p> 如果你刚学了一个JavaScript概念，然而你被告知不能使用它，对此你感觉如何？个人来说我会感到有点恼火，特别是为了弄懂它我花费了宝贵的时间。这就像是一个小孩得到了一个新的玩具，但却被限制不能玩它。</p></blockquote><blockquote><p>当你学习JavaScript的新知识，试着将这个知识点视作一个新玩具，例如新车、一双新鞋、或任何你觉得值得有趣的东西。然后，不要把敲代码当成工作，将敲代码视作你正在玩游戏。你正在使用刚学的技能做一些很酷的事情。给自己惊喜，把成果展示给你的朋友。</p></blockquote><blockquote><p>   带着游戏的思维模式你将学得更快，将记忆的更牢，同时你将体会到更多乐趣。</p></blockquote><h3 id="4、使用Facebook技巧为编程腾时间"><a href="#4、使用Facebook技巧为编程腾时间" class="headerlink" title="4、使用Facebook技巧为编程腾时间"></a>4、使用Facebook技巧为编程腾时间</h3><blockquote><p>人们遇到的一个普遍问题是，他们通常找不到时间去敲代码。通常，这些人会花好几个小时浏览例如Facebook、YouTube、Wikipedia或者Reddit这样的网站。无论你是否符合上述描述，我们都能从中学到一些东西。</p></blockquote><blockquote><p> 我当然有时间只浏览Facebook一会儿，但通常我会在上面待好几个小时浏览往返。这是如何发生的？我认为原因在于，刚开始我并没打算花在这上面花费那么多时间。开始行动是做一件事情最困难的部分，所以将目标设定的足够小能够帮助我们进入状态。如果有人问我是不是打算花几个小时浏览Facebook，我会回答不，因为我没有时间。然而，对于仅仅尝试一下我是能够接受的，这也是我能够沉浸其中的方法。</p></blockquote><blockquote><p>  <strong>好消息是，你能够对敲代码运用同样的心理技巧。</strong></p><p>   <strong>不要计划花几个小时敲代码，因为你会发现自己没有时间。</strong></p><p>   <strong>相反的，告诉自己只敲三分钟代码。这样你就不需要为寻找敲代码的时间烦心。</strong></p></blockquote><h3 id="5、思考的更慢你将学得更快"><a href="#5、思考的更慢你将学得更快" class="headerlink" title="5、思考的更慢你将学得更快"></a>5、思考的更慢你将学得更快</h3><blockquote><p>这一条听起来违反直觉，所以下面我将用一个故事来解释。</p></blockquote><blockquote><p>我的一个朋友又一次对JavaScript的一个特性感到困惑。我让他将他知道的解释给我听，然后告诉我哪儿让他困惑。当它向我解释代码，我发现他在跳步。</p></blockquote><blockquote><p>“等会儿！”我说道。“慢慢来，然后将这些一步步解释给我听。”</p></blockquote><blockquote><p>我的朋友直接将整个代码的功能总结给我听。</p></blockquote><blockquote><p>我再次让他暂停。“你还是在跳步。再解释一次，这次我需要你一步步将每一行代码发生了什么解释给我听。”</p></blockquote><blockquote><p>这一次，我的朋友能够更好的解释代码是如何运行的。关键在于他花时间去理解每一行代码而不是试图一下理解所有。</p></blockquote><blockquote><p>在上述这种案例中，<strong>思考的更慢实际上让你学得更快。</strong></p></blockquote><h3 id="6、在写复杂代码前先用简单语言写下"><a href="#6、在写复杂代码前先用简单语言写下" class="headerlink" title="6、在写复杂代码前先用简单语言写下"></a>6、在写复杂代码前先用简单语言写下</h3><blockquote><p>如果你要写的代码是复杂并且不常见的，先用简单语言将代码写下。这样，你能够你能够在真正写之前知道自己要做什么。下面是使用这个方法的两个好处：</p></blockquote><ul><li><p>你将更容易更快速的写代码，因为你不需要时刻停下来思考自己将要怎么做。</p></li><li><p>由于你知道代码要干什么，能够更好的排除错误。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>我们已经讲了好几个更快速学习JavaScript的方法，但是你也能将上述方法运用于学习其他东西。下面是上述方法的概括：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（1）、不要再想将要学什么，沉浸于现在；</span><br><span class="line"></span><br><span class="line">（2）、通过把新技能当做玩具使得练习更有趣；</span><br><span class="line"></span><br><span class="line">（3）、就像浏览Facebook、YouTube之类的网站一样，在敲代码前告诉自己只敲几分钟，这样你就拥有了敲代码的时间；</span><br><span class="line"></span><br><span class="line">（4）、慢下来，小步向前，你将学得更快。</span><br></pre></td></tr></table></figure><blockquote><p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="noopener">众成翻译</a></p><p>译者：<a href="http://www.zcfy.cc/@Ryan" target="_blank" rel="noopener">Ryan</a></p><p>链接：<a href="http://www.zcfy.cc/article/436" target="_blank" rel="noopener">http://www.zcfy.cc/article/436</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零制作edm邮件，需要了解的一些规则</title>
      <link href="/2018/09/19/edm-01/"/>
      <url>/2018/09/19/edm-01/</url>
      
        <content type="html"><![CDATA[<p>因为电子邮件客户端预览窗口通常只是一小部分屏幕宽度，你最好上你的电子邮件的宽度设计在大约600px。没有人喜欢水平滚动条<br><a id="more"></a></p><h3 id="一、初见"><a href="#一、初见" class="headerlink" title="一、初见"></a>一、初见</h3><h4 id="table"><a href="#table" class="headerlink" title="table"></a>table</h4><ul><li><code>&lt;table&gt;</code> 标签定义 HTML 表格</li><li>简单的 HTML 表格由 <code>table</code> 元素以及一个或多个 <code>tr</code>、<code>th</code> 或 <code>td</code> 元素组成</li><li><code>tr(table row)</code> 元素定义表格行，<code>th(table head)</code> 元素定义表头，<code>td(table data)</code> 元素定义表格单元</li><li>更复杂的 HTML 表格也可能包括 <code>caption</code>、<code>col</code>、<code>colgroup</code>、<code>thead</code>、<code>tfoot</code> 以及 <code>tbody</code> 元素</li><li><a href="http://www.w3school.com.cn/tags/tag_table.asp" target="_blank" rel="noopener">HTML table 标签</a></li></ul><h4 id="table属性"><a href="#table属性" class="headerlink" title="table属性"></a>table属性</h4><ul><li><code>border</code> — 规定表格边框的宽度</li><li><code>align</code> — 规定表格相对周围元素的对齐方式 <code>(left,center,right)</code></li><li><code>valign</code> — 垂直，默认是<code>valign=&quot;middle&quot;</code>，但是会修改为<code>valign=&quot;top&quot;</code></li><li><code>cellspacing</code> — 规定单元格之间的空间</li><li><code>cellpadding</code> — 规定单元边沿与其内容之间的空白</li><li><code>width</code> — 规定表格的宽度</li><li><code>height</code> — 规定表格的高度</li><li><code>background</code> — 背景图像</li><li><code>bgcolor</code> — 背景颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">bgcolor</span>=<span class="string">"#cccccc"</span> <span class="attr">cellspacing</span>=<span class="string">"10"</span> <span class="attr">cellpadding</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><code>width、height</code></li><li><code>font-family</code></li><li><code>font-size</code></li><li><code>font-weight</code></li><li><code>color</code></li><li><code>line-height</code></li><li><code>border</code></li><li><code>background-color</code></li><li><code>background-image</code></li><li><code>vertical-align</code></li></ul><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><h5 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h5><ul><li><code>&lt;a href=&quot;http://www.eefocus.com&quot; target=&quot;_blank&quot;&gt;</code></li><li><code>&lt;img src=&quot;http://baidu.com/hao123.png&quot; alt=&quot;hao123图片&quot;&gt;</code></li><li><code>&lt;span&gt;我也可以是一段话，只是没法自主设置宽度而已&lt;/span&gt;</code></li></ul><h5 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h5><ul><li><code>&lt;p&gt;我是一段话...&lt;/p&gt;</code></li></ul><h3 id="二、了解"><a href="#二、了解" class="headerlink" title="二、了解"></a>二、了解</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><h5 id="Area-1"><a href="#Area-1" class="headerlink" title="Area-1"></a>Area-1</h5><ul><li>HTML 编码格式：<code>utf-8</code></li><li>页面尽量保持宽（600px~800px）、高（1024px），整体邮件不要太大，比如15k（各个邮箱不同）左右，不然很容易走垃圾邮箱</li><li>样式使用行间样式，如：<code>&lt;td style=&quot;font-family:Arial, Helvetica, sans-serif;font-size:12px;color:#000000;&quot; &gt;文字&lt;/td&gt;</code>其他的方式会被无视</li></ul><h5 id="Area-2"><a href="#Area-2" class="headerlink" title="Area-2"></a>Area-2</h5><ul><li><code>font-family</code> 属性不能为空</li><li>使用<code>&lt;table&gt;</code>布局，居中显示使用<code>align=&quot;center</code></li><li>不使用 table 以外的 <code>body</code>、<code>meta</code>和<code>html</code>之类的标签，部分邮箱系统会把这些过滤掉</li><li>不使用 <code>flash、java、javascript、frames、iframe、activeX</code> 以及 <code>dhtml</code></li><li>不要出现<code>onmouseover</code>、<code>onmouseout</code>，即使设定了，也会被过滤掉</li></ul><h5 id="Area-3"><a href="#Area-3" class="headerlink" title="Area-3"></a>Area-3</h5><ul><li>区域与区域之间的上下、左右之间的空白间隙，使用标准的<code>&lt;td width=15&gt;&amp;nbsp;&lt;/td&gt;</code>或<code>&lt;td height=&quot;15&quot;&gt;&amp;nbsp;&lt;/td&gt;</code>，不要使用<code>padding=&quot;15px&quot;</code> — 防止各个邮箱的解析不同</li></ul><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><ul><li>图片的每个属性都要定义完整，如：<code>&lt;img src=&quot;http://www.eefocus.com/logo.png&quot; style=&quot;vertical-align:top;display:block;&quot; width=&quot;210&quot; height=&quot;100&quot;  alt=&quot;logo&quot;/&gt;</code></li><li>定义<code>style=&quot;vertical-align:top;&quot;</code> — 防止图片之间会有缝隙、变形等显示异常的情况</li><li>定义<code>display:block</code> — 解决Outlook电子邮件客户中图片底部增加空白间距的问题</li><li>限制每张图片的大小<code>width=&quot;200 height=&quot;200&quot;</code>或者<code>style=&quot;width:200px;height:200px;&quot;</code></li><li>添加每张图片alt属性，如：<code>alt=&quot;我是干啥的&quot;</code> — 防止图片无法加载，也可以知晓这是做什么的</li><li>图片格式使用<code>jpg、png</code>，尽量不要使用<code>gif</code></li><li>地址使用绝对路径（以<code>http/https</code>开头的）</li><li>尽量不使用背景图片<code>background-image</code>（Outlook不显示，但是可以显示背景色：<code>bgColor=&quot;f3f3f3&quot;</code>），直接使用图片<code>&lt;img src=&quot;&quot;&gt;</code></li><li>为了保持各个邮箱的一致性，尽量使用图片，大图可拆分成几张小图拼接，每张图片不要太大（15K以内）</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><ul><li>地址绝对路径：<code>&lt;a href=&quot;http://www.eefocus.com&quot;&gt;Logo Plus&lt;/a&gt;</code></li><li>地址不可过长（超过255个字符），尽量简短</li><li>数量尽量不超过10个</li><li>地址不要使用特殊符号，避免解析错误</li><li>文字中出现链接地址，被屏蔽的风险比较高，一般是文字+链接、图片+链接</li><li>不要使用地图功能链接，很容易被划分为垃圾邮箱</li><li>为避免用户收到的邮件图片无法浏览，请制作一份和邮件内容一样的web 页面，然后在邮件顶部写一句话：“如果您无法查看邮件内容，请点击这里”， 链接到放有同样内容的web页面</li></ul><h4 id="Outlook邮箱规则"><a href="#Outlook邮箱规则" class="headerlink" title="Outlook邮箱规则"></a>Outlook邮箱规则</h4><ul><li>内敛元素的<code>padding</code>无效、<code>vertical-align</code>不能被识别，可定义在<code>td</code></li><li>别想着继承的事儿，某一块的样式都单独设置，比如链接样式，文字样式等</li><li><code>p</code>标签的<code>width</code>不起作用，可定义在<code>td</code></li><li><code>p</code>标签的字体颜色会被覆盖，可单独使用诸如<code>span</code>等重新设置字体颜色，或者使用<code>style</code>定义在td</li><li>当设置 <code>&lt;img align=&quot;left&quot; /&gt;</code> 或 <code>&lt;img align=&quot;right&quot; /&gt;</code>时，图片会脱离文档流，在其父元素设置了 <code>margin</code> 或 <code>padding</code> 的话，都无法使其下移，左移或右移</li><li><code>line-height</code>默认为<code>1.6</code></li><li><code>#FFFFFF</code>关于颜色值，使用六位并且大写，使用简写在outlook下被忽略（很神奇）</li><li>关于链接，可以单独设置：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">      <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h5><ul><li>避免使用<code>margin padding</code>等属性，定义宽高的属性放在<code>td</code>，定义样式放在<code>p</code>或者<code>span</code>等标签内</li><li>一般而言，指定表格单元格宽度要比指定表格自身宽度要好 </li><li>使用bgcolor来替找style=”background:”,在电子邮件客户端中HTML属性要比CSS样式更好，但是优先等级依旧是：css样式&gt;html属性</li><li>新浪邮箱会忽略掉<code>cellpadding</code>，一般设置为<code>0</code><h3 id="三、悟道"><a href="#三、悟道" class="headerlink" title="三、悟道"></a>三、悟道</h3><h4 id="邮件设计"><a href="#邮件设计" class="headerlink" title="邮件设计"></a>邮件设计</h4></li><li>电子邮件的设计过程是非常纠结的，为了美还得考虑制作过程的煎熬<h5 id="保持简单"><a href="#保持简单" class="headerlink" title="保持简单"></a>保持简单</h5></li><li>当设计一个HTML电子邮件时，请记住保持简单，编码的时候考虑坚持两列布局，这样能为您省去很多麻烦的事情<h5 id="减少图像的使用甚至避免使用"><a href="#减少图像的使用甚至避免使用" class="headerlink" title="减少图像的使用甚至避免使用"></a>减少图像的使用甚至避免使用</h5></li><li>记住你的设计不能太花哨，因为Outlook不支持背景图像<h5 id="窄屏最好"><a href="#窄屏最好" class="headerlink" title="窄屏最好"></a>窄屏最好</h5></li><li>因为电子邮件客户端预览窗口通常只是一小部分屏幕宽度，你最好上你的电子邮件的宽度设计在大约600px。没有人喜欢水平滚动条<h5 id="保持一致"><a href="#保持一致" class="headerlink" title="保持一致"></a>保持一致</h5></li><li>记住，我们使用固定的元素属性cellpadding和cellspacing设置单元格的边距和单元格的间距。这样保持元素之间的间距一致性是正确的与谨慎的<blockquote><p>节选自：<a href="http://www.w3cplus.com/css/getting-started-with-html-emails.html" target="_blank" rel="noopener">开始制作HTML Email </a>之邮件设计</p></blockquote><h4 id="邮件制作"><a href="#邮件制作" class="headerlink" title="邮件制作"></a>邮件制作</h4></li><li>电子邮件的制作过程是非常煎熬的，一不小心就乱了、乱了。<h4 id="邮件测试"><a href="#邮件测试" class="headerlink" title="邮件测试"></a>邮件测试</h4></li><li>电子邮件的测试过程是非常痛苦的，也是最让人奔溃的，因为你很有可能拆了西墙补东墙</li></ul><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><h5 id="我们看一下测试邮件：效果图"><a href="#我们看一下测试邮件：效果图" class="headerlink" title="我们看一下测试邮件：效果图"></a>我们看一下测试邮件：<a href="https://www.qdfuns.com/article.php?mod=view&amp;id=333432fb9305a8331f6cc39998a2626e&amp;uid=32286" target="_blank" rel="noopener">效果图</a></h5>]]></content>
      
      
      <categories>
          
          <category> Email </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EDM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac 终端简易学习总结</title>
      <link href="/2018/08/13/macos-bash/"/>
      <url>/2018/08/13/macos-bash/</url>
      
        <content type="html"><![CDATA[<h3 id="一、目录基本操作"><a href="#一、目录基本操作" class="headerlink" title="一、目录基本操作"></a>一、目录基本操作</h3><h5 id="1-pwd-—-获取当前所在路径"><a href="#1-pwd-—-获取当前所在路径" class="headerlink" title="1. pwd — 获取当前所在路径"></a>1. <code>pwd</code> — 获取当前所在路径</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$ <span class="built_in">pwd</span></span><br><span class="line">/Users/yangtao/Desktop/文件创建/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-ls-—-列出当前目录下的所有文件"><a href="#2-ls-—-列出当前目录下的所有文件" class="headerlink" title="2. ls — 列出当前目录下的所有文件"></a>2. <code>ls</code> — 列出当前目录下的所有文件</h5><ul><li><code>ls -l</code> — 用长格式列出来</li><li><code>ls -a</code> — 列出文件（包括隐藏的文件）</li><li><code>ls -al</code> — 以长格式列出文件（包括隐藏的文件）</li></ul><h5 id="3-cd-—-目录间的切换"><a href="#3-cd-—-目录间的切换" class="headerlink" title="3. cd — 目录间的切换"></a>3. <code>cd</code> — 目录间的切换</h5><p>可以使用<code>tab</code>键补全目录名称，将文件拖入终端，可以显示该文件的目录</p><ul><li><code>cd</code> — (无参数)返回 home 目录</li><li><code>cd ~</code> — 返回 home 目录，可以使用<code>cd ~/Music</code>快速到达该目录，使用<code>cd ~Guest/</code>进入 Guest 用户的 home 目录</li><li><code>cd -</code> — 返回上一次操作的目录，可与当前目录进行切换</li><li><code>cd ..</code> — 返回上一层目录，<code>..</code>表示上一层目录，而<code>.</code>表示当前目录，如<code>./Music</code>，表示当前目录下的 Music 文件</li></ul><h5 id="4-mkdir-文件名-—-（make-dir）新建文件夹"><a href="#4-mkdir-文件名-—-（make-dir）新建文件夹" class="headerlink" title="4. mkdir 文件名 — （make dir）新建文件夹"></a>4. <code>mkdir 文件名</code> — （make dir）新建文件夹</h5><h5 id="5-rmdir-文件名-—-（remove-dir）删除文件夹"><a href="#5-rmdir-文件名-—-（remove-dir）删除文件夹" class="headerlink" title="5. rmdir 文件名 — （remove dir）删除文件夹"></a>5. <code>rmdir 文件名</code> — （remove dir）删除文件夹</h5><p>如果文件夹内不为空，则无法用 rmdir 删除文件夹</p><h5 id="6-rm-文件名-—-（remove-dir）删除文件"><a href="#6-rm-文件名-—-（remove-dir）删除文件" class="headerlink" title="6. rm 文件名 — （remove dir）删除文件"></a>6. <code>rm 文件名</code> — （remove dir）删除文件</h5><p>注意：用<code>rm</code>删除掉的文件是无法从回收站中找回的！而且不能使用 rm 来删除文件夹</p><h5 id="7-mv-原文件-目标目录-新文件名-—-移动"><a href="#7-mv-原文件-目标目录-新文件名-—-移动" class="headerlink" title="7. mv 原文件 目标目录/新文件名 — 移动"></a>7. <code>mv 原文件 目标目录/新文件名</code> — 移动</h5><p>把文件从一个地方移到另一个地方，但是当没有给出另外一个目录时，移动的现象就是为其更改了名字</p><h5 id="8-cp-带目录文件-目标目录-—-复制粘贴"><a href="#8-cp-带目录文件-目标目录-—-复制粘贴" class="headerlink" title="8. cp 带目录文件 目标目录 — 复制粘贴"></a>8. <code>cp 带目录文件 目标目录</code> — 复制粘贴</h5><h5 id="9-man-命令-—-查看使用手册"><a href="#9-man-命令-—-查看使用手册" class="headerlink" title="9. man 命令 — 查看使用手册"></a>9. <code>man 命令</code> — 查看使用手册</h5><h5 id="10-touch-—-创建文件"><a href="#10-touch-—-创建文件" class="headerlink" title="10. touch — 创建文件"></a>10. <code>touch</code> — 创建文件</h5><h5 id="11-cat-—-查看文件内容"><a href="#11-cat-—-查看文件内容" class="headerlink" title="11. cat — 查看文件内容"></a>11. <code>cat</code> — 查看文件内容</h5><h4 id="二、历史操作"><a href="#二、历史操作" class="headerlink" title="二、历史操作"></a>二、历史操作</h4><h5 id="1-向上（向下）箭头"><a href="#1-向上（向下）箭头" class="headerlink" title="1. 向上（向下）箭头"></a>1. <code>向上（向下）箭头</code></h5><p>查看上一个（下一个）命令，可以一直向前查看之前执行过的命令</p><h5 id="2-l-—-找出与你最近一次的-l-开头的命令，并执行"><a href="#2-l-—-找出与你最近一次的-l-开头的命令，并执行" class="headerlink" title="2. !l — 找出与你最近一次的 l 开头的命令，并执行"></a>2. <code>!l</code> — 找出与你最近一次的 l 开头的命令，并执行</h5><h5 id="3-history-—-查看之前执行过命令的历史记录"><a href="#3-history-—-查看之前执行过命令的历史记录" class="headerlink" title="3. history — 查看之前执行过命令的历史记录"></a>3. <code>history</code> — 查看之前执行过命令的历史记录</h5><h4 id="三、进程管理操作"><a href="#三、进程管理操作" class="headerlink" title="三、进程管理操作"></a>三、进程管理操作</h4><h5 id="1-ps-—-查看当前终端运行的程序"><a href="#1-ps-—-查看当前终端运行的程序" class="headerlink" title="1. ps — 查看当前终端运行的程序"></a>1. <code>ps</code> — 查看当前终端运行的程序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$ ps</span><br><span class="line">  PID TTY           TIME CMD</span><br><span class="line">19083 ttys000    0:00.40 -bash</span><br></pre></td></tr></table></figure><h5 id="2-ps-ax-—列出这台电脑正在运行的所有程序"><a href="#2-ps-ax-—列出这台电脑正在运行的所有程序" class="headerlink" title="2. ps ax —列出这台电脑正在运行的所有程序"></a>2. <code>ps ax</code> —列出这台电脑正在运行的所有程序</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">20008   ??  S      0:00.12 /System/Library/Frameworks/QuickLook.framework/Resources/quicklookd.app/Contents/MacOS/quicklookd</span><br><span class="line">19082 s000  Ss     0:00.02 login -pf yangtao</span><br><span class="line">19083 s000  S      0:00.40 -bash</span><br><span class="line">20079 s000  R+     0:00.00 ps ax</span><br><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$</span><br></pre></td></tr></table></figure><h5 id="3-top-—-显示这台计算机上有哪些进程，显示内存、CPU、负载等"><a href="#3-top-—-显示这台计算机上有哪些进程，显示内存、CPU、负载等" class="headerlink" title="3. top — 显示这台计算机上有哪些进程，显示内存、CPU、负载等"></a>3. <code>top</code> — 显示这台计算机上有哪些进程，显示内存、CPU、负载等</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PID    COMMAND      %CPU TIME     <span class="comment">#TH   #WQ  #PORT MEM    PURG   CMPRS  PGRP  PPID  STATE    BOOSTS           %CPU_ME %CPU_OTHRS UID  FAULTS    COW</span></span><br><span class="line">20088  top          4.1  00:00.99 1/1   0    23    6724K  0B     0B     20088 19083 running  *0[1]            0.00000 0.00000    0    7185+     105</span><br><span class="line">20087  AGSService   0.0  00:00.03 2     1    36    1716K  0B     0B     20087 1     sleeping *0[1]            0.00000 0.00000    0    3076</span><br></pre></td></tr></table></figure><h5 id="4-kill-PID-—-结束指定进程-ID-的进程"><a href="#4-kill-PID-—-结束指定进程-ID-的进程" class="headerlink" title="4. kill [PID] — 结束指定进程 ID 的进程"></a>4. <code>kill [PID]</code> — 结束指定进程 ID 的进程</h5><p><strong>具体做法：</strong> 先使用 top 命令查看想要结束进程的 PID，然后使用命令<code>kill [PID]</code></p><p><strong>Tips：</strong> 如果遇到无法杀掉的进程，输入命令<code>sudo kill -9 [PID]</code> (伪装超级管理员，强迫杀掉该进程)，接着输入自己用户的密码（前提是自己这个用户具有 sudo 的资格）</p><h4 id="四、万能的-grep-操作"><a href="#四、万能的-grep-操作" class="headerlink" title="四、万能的 grep 操作"></a>四、万能的 grep 操作</h4><h5 id="1-grep-800-log-txt-—-从-log-txt-中找出-800-位置的数据"><a href="#1-grep-800-log-txt-—-从-log-txt-中找出-800-位置的数据" class="headerlink" title="1. grep 800 log.txt — 从 log.txt 中找出 800 位置的数据"></a>1. <code>grep 800 log.txt</code> — 从 log.txt 中找出 800 位置的数据</h5><h5 id="2-grep-n-800-log-txt-—-从-log-txt-中找出-800-位置的数据-并在前面加上行号"><a href="#2-grep-n-800-log-txt-—-从-log-txt-中找出-800-位置的数据-并在前面加上行号" class="headerlink" title="2. grep -n 800 log.txt — 从 log.txt 中找出 800 位置的数据,并在前面加上行号"></a>2. <code>grep -n 800 log.txt</code> — 从 log.txt 中找出 800 位置的数据,并在前面加上行号</h5><h5 id="3-grep-n-Hello-是否加上行号-—-从当前目录下的所有文件中找出出现过-Hello-的文件"><a href="#3-grep-n-Hello-是否加上行号-—-从当前目录下的所有文件中找出出现过-Hello-的文件" class="headerlink" title="3. grep (-n) Hello * (是否加上行号) — 从当前目录下的所有文件中找出出现过 Hello 的文件"></a>3. <code>grep (-n) Hello * (是否加上行号)</code> — 从当前目录下的所有文件中找出出现过 Hello 的文件</h5><h5 id="4-ls-usr-bin-grep-ls-—-查看-usr-bin-目录下面带-ls-的目录"><a href="#4-ls-usr-bin-grep-ls-—-查看-usr-bin-目录下面带-ls-的目录" class="headerlink" title="4. ls /usr/bin | grep ls — 查看/usr/bin 目录下面带 ls 的目录"></a>4. <code>ls /usr/bin | grep ls</code> — 查看/usr/bin 目录下面带 ls 的目录</h5><h5 id="5-ls-usr-bin-grep-ls-wc-—-计算出单词的数量"><a href="#5-ls-usr-bin-grep-ls-wc-—-计算出单词的数量" class="headerlink" title="5. ls /usr/bin | grep ls | wc — 计算出单词的数量"></a>5. <code>ls /usr/bin | grep ls | wc</code> — 计算出单词的数量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yangtaodeMacBook-Pro:<span class="built_in">test</span> yangtao$ ls /usr/bin | grep ls | wc</span><br><span class="line">      16      16     124</span><br><span class="line"><span class="comment"># 16行 16个单词 124个字符</span></span><br></pre></td></tr></table></figure><h4 id="五、环境变量操作"><a href="#五、环境变量操作" class="headerlink" title="五、环境变量操作"></a>五、环境变量操作</h4><h5 id="1-set-grep-PATH-—-查看环境变量"><a href="#1-set-grep-PATH-—-查看环境变量" class="headerlink" title="1. set | grep PATH — 查看环境变量"></a>1. <code>set | grep PATH</code> — 查看环境变量</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yangtaodeMacBook-Pro:~ yangtao$ <span class="built_in">set</span> | grep PATH</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/bin:/usr/bin:/bin:/usr/sbin:/sbin</span><br></pre></td></tr></table></figure><h5 id="2-set-grep-PATH-—-将其他文件夹路径（本机用户下面的-bin-目录）添加到-PATH"><a href="#2-set-grep-PATH-—-将其他文件夹路径（本机用户下面的-bin-目录）添加到-PATH" class="headerlink" title="2. set | grep PATH — 将其他文件夹路径（本机用户下面的 bin 目录）添加到 PATH"></a>2. <code>set | grep PATH</code> — 将其他文件夹路径（本机用户下面的 bin 目录）添加到 PATH</h5><p>这样做只是一次性的，也就是说在当前终端，是可以直接生效的，但是当你关闭后，重新打开终端，这个操作是不被保存的。</p><p>在<code>/etc/profile</code>这个文件是任何人打开终端都会执行的，是系统级的 profile。</p><p>如果我们想自定义自己的 profile，可以在自己的家目录下新建文件命名为：<code>.profile</code>，这个文件会在你打开终端时自动执行。</p><p>我们将刚刚的命令 2 输入其中，然后保存退出（vim 下使用<code>:wq</code>）<br>这样的话，在我们刚刚已经登录的终端里面它还是不起作用的，假如你希望它可以立刻生效，你可以使用<code>source</code>命令。</p><h5 id="3-source-—-例如：source-profile"><a href="#3-source-—-例如：source-profile" class="headerlink" title="3. source — 例如：source .profile"></a>3. <code>source</code> — 例如：<code>source .profile</code></h5><p>使 Shell 读入指定的 Shell 程序文件并依次执行文件中的所有语句，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录</p><h4 id="六、网络配置操作"><a href="#六、网络配置操作" class="headerlink" title="六、网络配置操作"></a>六、网络配置操作</h4><h5 id="1-ifconfig-—-列出本机所有的网络设备以及其上面的配置，主要指的是-ip-地址和-mac-地址"><a href="#1-ifconfig-—-列出本机所有的网络设备以及其上面的配置，主要指的是-ip-地址和-mac-地址" class="headerlink" title="1. ifconfig — 列出本机所有的网络设备以及其上面的配置，主要指的是 ip 地址和 mac 地址"></a>1. <code>ifconfig</code> — 列出本机所有的网络设备以及其上面的配置，主要指的是 ip 地址和 mac 地址</h5><p>我的连的是 en5，它的状态时 active（最后一行），原文是 en4</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">en5: flags=8863&lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&gt; mtu 1500</span><br><span class="line">ether ac:de:48:00:11:22</span><br><span class="line">inet6 fe80::aede:48ff:fe00:1122%en5 prefixlen 64 scopeid 0x7</span><br><span class="line">nd6 options=201&lt;PERFORMNUD,DAD&gt;</span><br><span class="line">media: autoselect</span><br><span class="line">status: active</span><br></pre></td></tr></table></figure><p><em>其他用法：</em></p><ul><li><p><code>ifconfig en4 down/up</code> — 关闭（或打开）某个网络接口，比如 en4,一般需要管理员权限，所以需要在前面加 sudo 命令</p></li><li><p><code>sudo ifconfig en4 add 10.10.10.12 netmask 255.255.255.0</code> — 给 en4 加入别的网段</p></li><li><code>sudo ifconfig en4 delete 10.10.10.12</code> — 给 en4 删除指定网段</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 临时修改MAC地址</span></span><br><span class="line">ifconfig en0 down // 关闭网卡设备（这里假设是en0）</span><br><span class="line">ifconfig en0 hw ether [MAC地址] // 修改MAC地址</span><br><span class="line">ifconfig en0 up // 重启网卡</span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时修改内网ip地址</span></span><br><span class="line">ifconfig en0 down</span><br><span class="line">ifconfig en0 192.168.169.245 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><h5 id="2-ping-—-检测网络是否是连通状态"><a href="#2-ping-—-检测网络是否是连通状态" class="headerlink" title="2. ping — 检测网络是否是连通状态"></a>2. <code>ping</code> — 检测网络是否是连通状态</h5><h5 id="3-netstat-—-显示各种网络相关信息"><a href="#3-netstat-—-显示各种网络相关信息" class="headerlink" title="3. netstat — 显示各种网络相关信息"></a>3. <code>netstat</code> — 显示各种网络相关信息</h5><p><em>其他用法：</em></p><ul><li><p><code>netstat -l</code> — 列出本机进行监听的端口</p></li><li><p><code>netstat -lt</code> — 只列出 tcp 的连接，同理在 l 后面跟上 u 的话，将会列出各种 udp 的监听端口</p></li><li><p><code>netstat -s</code> — 查看统计数据</p></li><li><p><code>netstat -p</code> — 列出进程信息，你可以了解是哪一个程序在哪一个端口上做些什么事情</p></li><li><p><code>netstat -pc</code> — 会显示出实时更新的进程信息</p></li><li><p><code>netstat -r</code> — 查看路由表</p></li><li><code>netstat -i</code> — 查看接口信息</li></ul><blockquote><p>详情参考<br><a href="https://www.jianshu.com/p/0e43268f01db" target="_blank" rel="noopener">Mac 终端学习系列</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> 终端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git之本地拉取Github代码、修改远程URL</title>
      <link href="/2018/08/09/git-revert/"/>
      <url>/2018/08/09/git-revert/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1533488265900&amp;di=91f78407d4ffda11e55202ceafda93c4&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg3.imgtn.bdimg.com%2Fit%2Fu%3D2417199588%2C1851489715%26fm%3D214%26gp%3D0.jpg" alt=""></p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Workspace：工作区</span><br><span class="line">Index / Stage：暂存区</span><br><span class="line">Repository：仓库区（或本地仓库）</span><br><span class="line">Remote：远程仓库</span><br></pre></td></tr></table></figure><h4 id="详细介绍如何使用git"><a href="#详细介绍如何使用git" class="headerlink" title="详细介绍如何使用git"></a>详细介绍如何使用git</h4><ul><li>博客推荐：<ul><li><a href="https://juejin.im/entry/5b66e89951882563522b78ae/" target="_blank" rel="noopener">如何使用Git上传项目代码到github</a> </li><li><a href="https://juejin.im/entry/5b66ec5c51882536e875be76/" target="_blank" rel="noopener">Git远程操作详解—阮一峰</a></li><li><a href="https://juejin.im/entry/5667d39d00b0ee7fa8c9f99f" target="_blank" rel="noopener">常用 Git 命令清单—阮一峰</a></li></ul></li></ul><h4 id="本地拉取仓库代码-—-clone"><a href="#本地拉取仓库代码-—-clone" class="headerlink" title="本地拉取仓库代码 — clone"></a>本地拉取仓库代码 — clone</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/yangtao2o.github.io.git</span><br></pre></td></tr></table></figure><h4 id="修改远程URL-—-remote"><a href="#修改远程URL-—-remote" class="headerlink" title="修改远程URL — remote"></a>修改远程URL — remote</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote -v    <span class="comment"># 查看远程服务器地址和仓库名称</span></span><br><span class="line">git remote show origin   <span class="comment"># 查看远程服务器仓库状态</span></span><br><span class="line">git remote add origin https://github.com/yangtao2o/yangtao2o.github.io.git  <span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/..io.git   <span class="comment"># 设置远程仓库地址(用于修改远程仓库地址)</span></span><br><span class="line">git remote rename &lt;old name&gt; &lt;new name&gt;  <span class="comment"># 修改远程主机的名称</span></span><br><span class="line">git remote rm &lt;repository&gt;   <span class="comment"># 删除远程仓库</span></span><br></pre></td></tr></table></figure><h4 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h4><ul><li><p>如果是在workspace，未git push，使用以下命令会清空工作目录中所有未提交的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD  <span class="comment"># 全部撤销</span></span><br><span class="line">git checkout -- hello.html  <span class="comment"># 只恢复hello.html文件</span></span><br></pre></td></tr></table></figure></li><li><p>如果已提交，使用<code>git revert</code>，使用一次新的commit，来回滚要你要回滚的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD</span><br></pre></td></tr></table></figure></li><li><p>参考：<a href="https://juejin.im/entry/5b6707f25188251ac22b6f0f/" target="_blank" rel="noopener">Git的撤消操作 - 重置, 签出 和 撤消</a></p><h4 id="使用过程中，遇到的一些问题"><a href="#使用过程中，遇到的一些问题" class="headerlink" title="使用过程中，遇到的一些问题"></a>使用过程中，遇到的一些问题</h4></li><li><p><code>git pull</code>时<code>fatal:refusing to merge unrelated histories</code></p><ul><li><code>git pull --allow-unrelated-histories</code></li></ul></li><li><p><code>origin</code>一般是我们自己创建的代码库，所以可以做任何的<code>git pull or git push</code>，但是如果我们引入了他人的代码库，就成了<code>upstream</code>，只能<code>git fetch</code>，通过<code>fork</code>到自己的仓库里，如同<code>origin</code></p><ul><li>关于<code>fork、origin、upstream、clone</code>之间的关系博文推荐： <a href="https://juejin.im/entry/5b66f8d5f265da0f574e0884/" target="_blank" rel="noopener">GitHub关于fork、origin、upstream、clone的藕断丝连</a></li></ul></li><li><p><a href="https://juejin.im/entry/5b66ea75e51d45195312a173/" target="_blank" rel="noopener">git submodule使用以及注意事项</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS安装homebrew报错 LibreSSL SSL_read SSL_ERROR_SYSCALL errno 54</title>
      <link href="/2018/08/05/macos-brew/"/>
      <url>/2018/08/05/macos-brew/</url>
      
        <content type="html"><![CDATA[<blockquote><p>LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</p></blockquote><a id="more"></a><h4 id="安装"><a href="#安装" class="headerlink" title="# 安装"></a># 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">curl <span class="string">"https://nodejs.org/dist/latest/node-<span class="variable">$&#123;VERSION:-$(wget -qO- https://nodejs.org/dist/latest/ | sed -nE 's|.*&gt;node-(.*)\.pkg&lt;/a&gt;.*|\1|p')&#125;</span>.pkg"</span> &gt; <span class="string">"<span class="variable">$HOME</span>/Downloads/node-latest.pkg"</span> &amp;&amp; sudo installer -store -pkg <span class="string">"<span class="variable">$HOME</span>/Downloads/node-latest.pkg"</span> -target <span class="string">"/"</span></span><br></pre></td></tr></table></figure><h4 id="报错"><a href="#报错" class="headerlink" title="# 报错"></a># 报错</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">==&gt; Tapping homebrew/core</span><br><span class="line">Cloning into <span class="string">'/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core'</span>...</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/Homebrew/homebrew-core/'</span>: LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54</span><br><span class="line">Error: Failure <span class="keyword">while</span> executing; `git <span class="built_in">clone</span> https://github.com/Homebrew/homebrew-core /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1` exited with 128.</span><br><span class="line">Error: Failure <span class="keyword">while</span> executing; `/usr/<span class="built_in">local</span>/bin/brew tap homebrew/core` exited with 1.</span><br></pre></td></tr></table></figure><h4 id="解决："><a href="#解决：" class="headerlink" title="# 解决："></a># 解决：</h4><ul><li>执行下面这句命令，更换为中科院的镜像：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1</span><br></pre></td></tr></table></figure><ul><li>把homebrew-core的镜像地址也设为中科院的国内镜像</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span> </span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span> </span><br><span class="line"></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><ul><li>更新</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>报错解决：<a href="https://blog.csdn.net/qq_35624642/article/details/79682979" target="_blank" rel="noopener">macOS High Sierra10.13.3安装homebrew报错LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54解决方法</a></li><li><a href="https://blog.csdn.net/qq_41234116/article/details/79366454" target="_blank" rel="noopener">Mac安装，简单实用，卸载homebrew详细教程</a> </li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS下node版本管理下载新版本时中断返回Segmentation fault 11</title>
      <link href="/2018/08/05/macos-node/"/>
      <url>/2018/08/05/macos-node/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前记：安装 node 的时候安装了最新版本，但是我需要指定某一个版本，所以安装了 n 模块，来进行版本切换，但是途中发生了报错：Segmentation fault：11，导致 npm 命令无法使用，由于使用的 macOS，大家都推荐 HomeBrew，于是连滚带爬地从一个坑跳到另一个坑，好疼啊…</p></blockquote><a id="more"></a><h4 id="n-模块"><a href="#n-模块" class="headerlink" title="n 模块"></a>n 模块</h4><ul><li>首先 <strong>n 模块不支持 Windows！！！</strong></li><li>安装：<code>sudo npm install -g n</code></li><li>参考：<a href="https://blog.csdn.net/kiddd_fu/article/details/78655672" target="_blank" rel="noopener">node 版本更新的简便方法——神奇的 n 模块</a></li><li>版本切换：<code>n</code>，然后上下切换，圆点在哪儿就是哪个，但是问题两个或者多个都是灰色，即没有圆点，怎么办？<ul><li>这时，切回去使用<code>node -v</code>就会报错：<code>Segmentation fault: 11</code> ，当然，npm 直接<code>npm: command not found</code></li></ul></li><li>解决：<code>sudo n 8.1.3</code></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/8/4/165046762420dadb?w=1268&amp;h=478&amp;f=jpeg&amp;s=170090" alt=""></p><ul><li>参考：<a href="https://blog.csdn.net/Dcatfly/article/details/75201172" target="_blank" rel="noopener">n 模块管理 node 版本遇到的问题</a></li><li>但是切换到 8.11.3，问题依旧存在，所以删除：<code>sudo n rm 8.11.3</code></li><li>卸载 npm：<code>sudo npm uninstall npm -g</code>，然后去 node 官网重新下载<code>8.11.3LTS</code>，安装成功，但是使用<code>n list</code>，并未查看到此版本</li><li>于是，重新再走一遍：<code>sudo n 8.11.3</code>，成功。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOS </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript算法初级练习</title>
      <link href="/2018/08/01/js-algo-1/"/>
      <url>/2018/08/01/js-algo-1/</url>
      
        <content type="html"><![CDATA[<h3 id="需要定义一个最小值和一个最大值之间的随机数"><a href="#需要定义一个最小值和一个最大值之间的随机数" class="headerlink" title="# 需要定义一个最小值和一个最大值之间的随机数"></a># 需要定义一个最小值和一个最大值之间的随机数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ourFunction</span>(<span class="params">ourMin, ourMax</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (ourMax - ourMin + <span class="number">1</span>)) + ourMin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ourFunction(<span class="number">1</span>, <span class="number">9</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="计算一个整数的阶乘"><a href="#计算一个整数的阶乘" class="headerlink" title="# 计算一个整数的阶乘"></a># 计算一个整数的阶乘</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorialize</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num *= factorialize(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorialize(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="来一段回文"><a href="#来一段回文" class="headerlink" title="# 来一段回文"></a># 来一段回文</h3><ul><li><a href="http://www.w3cplus.com/javascript/palindrome-check-in-javascript.html" target="_blank" rel="noopener">JavaScript算法练习： JavaScript中回文(Palindromes)处理</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> reveRegStr = lowRegStr.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> lowRegStr == reveRegStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">palindrome(<span class="string">"eye"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">palindrome</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/[\W_]/g</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> lowRegStr = str.toLowerCase().replace(re, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, l=lowRegStr.length; i&lt;l/<span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(lowRegStr[i] != lowRegStr[l - <span class="number">1</span> -i]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">palindrome(<span class="string">"eye"</span>);</span><br></pre></td></tr></table></figure><h3 id="在句子中找出最长的单词，并返回它的长度。"><a href="#在句子中找出最长的单词，并返回它的长度。" class="headerlink" title="# 在句子中找出最长的单词，并返回它的长度。"></a># 在句子中找出最长的单词，并返回它的长度。</h3><ul><li><a href="http://www.cnblogs.com/chenjinxinlove/p/5579043.html" target="_blank" rel="noopener">js 数组排序和算法排序</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findLongestWord</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> strArr = str = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;strArr.length; i++) &#123;</span><br><span class="line">    newArr.push(strArr[i].length);</span><br><span class="line">  &#125;</span><br><span class="line">  newArr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> b - a;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">findLongestWord(<span class="string">"What if we try a super-long word such as otorhinolaryngology"</span>);</span><br></pre></td></tr></table></figure><h3 id="确保字符串的每个单词首字母都大写，其余部分小写。"><a href="#确保字符串的每个单词首字母都大写，其余部分小写。" class="headerlink" title="# 确保字符串的每个单词首字母都大写，其余部分小写。"></a># 确保字符串的每个单词首字母都大写，其余部分小写。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">titleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> strArr = str.split(<span class="string">' '</span>);</span><br><span class="line">  <span class="keyword">var</span> newStrArr = [];</span><br><span class="line">  <span class="keyword">var</span> newStr = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;strArr.length; i++) &#123;</span><br><span class="line">    newStr = strArr[i][<span class="number">0</span>].toUpperCase();</span><br><span class="line">    newStr += strArr[i].substr(<span class="number">1</span>).toLowerCase();</span><br><span class="line">    newStrArr.push(newStr);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newStrArr = newStrArr.join(<span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newStrArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">titleCase(<span class="string">"I'm a little tea pot"</span>);</span><br></pre></td></tr></table></figure><h3 id="找出多个数组中的最大数"><a href="#找出多个数组中的最大数" class="headerlink" title="# 找出多个数组中的最大数"></a># 找出多个数组中的最大数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">largestOfFour</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> num = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class="line">    num = arr[i].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> b - a;</span><br><span class="line">    &#125;);</span><br><span class="line">    newArr.push(num[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">largestOfFour([[<span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">13</span>, <span class="number">27</span>, <span class="number">18</span>, <span class="number">26</span>], [<span class="number">32</span>, <span class="number">35</span>, <span class="number">37</span>, <span class="number">39</span>], [<span class="number">1000</span>, <span class="number">1001</span>, <span class="number">857</span>, <span class="number">1</span>]]);</span><br></pre></td></tr></table></figure><h3 id="判断一个字符串-str-是否以指定的字符串-target-结尾。"><a href="#判断一个字符串-str-是否以指定的字符串-target-结尾。" class="headerlink" title="# 判断一个字符串(str)是否以指定的字符串(target)结尾。"></a># 判断一个字符串(str)是否以指定的字符串(target)结尾。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">confirmEnding</span>(<span class="params">str, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = target.length;</span><br><span class="line">  <span class="keyword">if</span>(str.substr(-len) == target) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">confirmEnding(<span class="string">"He has to give me a new name"</span>, <span class="string">"name"</span>);</span><br><span class="line">confirmEnding(<span class="string">"Bastian"</span>, <span class="string">"n"</span>);</span><br></pre></td></tr></table></figure><h3 id="重复一个指定的字符串-num次，如果num是一个负数则返回一个空字符串。"><a href="#重复一个指定的字符串-num次，如果num是一个负数则返回一个空字符串。" class="headerlink" title="# 重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。"></a># 重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeat</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 请把你的代码写在这里</span></span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> newStr = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    newStr = <span class="string">''</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;num; i++) &#123;</span><br><span class="line">      newArr.push(str);</span><br><span class="line">    &#125;</span><br><span class="line">    newStr = newArr.join(<span class="string">''</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repeat(<span class="string">"abc"</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="如果字符串的长度比指定的参数num长…"><a href="#如果字符串的长度比指定的参数num长…" class="headerlink" title="# 如果字符串的长度比指定的参数num长…"></a># 如果字符串的长度比指定的参数num长…</h3><ul><li>如果字符串的长度比指定的参数num长，则把多余的部分用…来表示。切记，插入到字符串尾部的三个点号也会计入字符串的长度。但是，如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">truncate</span>(<span class="params">str, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newStr=<span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span>(num &gt;= str.length) &#123;</span><br><span class="line">    newStr = str.slice(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(num &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    newStr = str.slice(<span class="number">0</span>, num<span class="number">-3</span>) + <span class="string">'...'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newStr = str.slice(<span class="number">0</span>, num) + <span class="string">'...'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">truncate(<span class="string">"A-tisket a-tasket A green and yellow basket"</span>, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><h3 id="把一个数组arr按照指定的数组大小size分割成若干个数组块。"><a href="#把一个数组arr按照指定的数组大小size分割成若干个数组块。" class="headerlink" title="# 把一个数组arr按照指定的数组大小size分割成若干个数组块。"></a># 把一个数组arr按照指定的数组大小size分割成若干个数组块。</h3><ul><li><a href="https://segmentfault.com/q/1010000004921251" target="_blank" rel="noopener">js将一位数组分割成每三个一组</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">arr, size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length; i+=size) &#123;</span><br><span class="line">    newArr.push(arr.slice(i, i+size));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk([<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。"><a href="#返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。" class="headerlink" title="# 返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。"></a># 返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slasher</span>(<span class="params">arr, howMany</span>) </span>&#123;</span><br><span class="line">  arr.splice(<span class="number">0</span>, howMany);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">slasher([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。"><a href="#如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。" class="headerlink" title="# 如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。"></a># 如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mutation</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> str1 = arr[<span class="number">0</span>].toLowerCase();  </span><br><span class="line">  <span class="keyword">var</span> str2 = arr[<span class="number">1</span>].toLowerCase();</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str2.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(str1.indexOf(str2[i]) == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mutation([<span class="string">"hello"</span>, <span class="string">"hey"</span>]);</span><br></pre></td></tr></table></figure><h3 id="删除数组中的所有假值。"><a href="#删除数组中的所有假值。" class="headerlink" title="# 删除数组中的所有假值。"></a># 删除数组中的所有假值。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bouncer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(val !== (<span class="literal">undefined</span> &amp;&amp; <span class="literal">null</span> &amp;&amp; <span class="string">""</span> &amp;&amp; <span class="literal">NaN</span> &amp;&amp; <span class="literal">false</span> &amp;&amp; <span class="number">0</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bouncer([<span class="number">7</span>, <span class="string">"ate"</span>, <span class="string">""</span>, <span class="literal">false</span>, <span class="number">9</span>]);</span><br></pre></td></tr></table></figure><h3 id="数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。"><a href="#数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。" class="headerlink" title="# 数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。"></a># 数组排序并找出元素索引，先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">where</span>(<span class="params">arr, num</span>) </span>&#123;</span><br><span class="line">  arr.push(num);</span><br><span class="line">  arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">  &#125;);  </span><br><span class="line">  <span class="keyword">return</span> arr.indexOf(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">where([<span class="number">40</span>, <span class="number">60</span>], <span class="number">50</span>);</span><br></pre></td></tr></table></figure><h3 id="实现一个摧毁-destroyer-函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。"><a href="#实现一个摧毁-destroyer-函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。" class="headerlink" title="# 实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。"></a># 实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。</h3><ul><li><a href="http://blog.csdn.net/wangmc0827/article/details/72529116" target="_blank" rel="noopener">FCC–Seek and Destroy（摧毁数组）</a></li><li><a href="http://www.cnblogs.com/codepen2010/p/6824934.html" target="_blank" rel="noopener">Seek and Destroy(算法)</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroyer</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = [];</span><br><span class="line">  <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;arg.length; i++) &#123;</span><br><span class="line">    newArr.push(arg[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  arr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> newArr.indexOf(val) &lt; <span class="number">0</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">destroyer([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><blockquote><p>发表于<a href="http://www.imooc.com/article/20814" target="_blank" rel="noopener">慕课网手记</a></p></blockquote><blockquote><p>题目来自： <strong>FreeCodeCamp</strong> <a href="https://freecodecamp.cn/map-aside#nested-collapseBasicAlgorithmScripting" target="_blank" rel="noopener">BasicAlgorithmScripting</a><br>参考资料： <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">JavaScript标准库</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github报错fatal unable to access No such file or directory</title>
      <link href="/2018/07/30/github-01/"/>
      <url>/2018/07/30/github-01/</url>
      
        <content type="html"><![CDATA[<p>之前有安装过github旧版，一直正常，后来更新了新版，但是<code>git pull</code>的时候如有如下报错：<br><a id="more"></a></p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access 'https://github.com/eefocus/deploy.git/': schannel: failed to open CA file 'C:/Users/Administrator/AppData/Local/GitHubDesktop/app-1.2.3/resources/app/git/mingw64/bin/curl-ca-bundle.crt': No such file or directory</span><br></pre></td></tr></table></figure><ul><li>找到<code>C:\ProgramData\Git\config</code>，打开，修改<code>sslCAinfo</code>（路径得看自己文件相对应的位置）如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">symlinks = true</span><br><span class="line">autocrlf = true</span><br><span class="line">fscache = true</span><br><span class="line">[color]</span><br><span class="line">diff = auto</span><br><span class="line">status = auto</span><br><span class="line">branch = auto</span><br><span class="line">interactive = true</span><br><span class="line">[pack]</span><br><span class="line">[help]</span><br><span class="line">format = html</span><br><span class="line">[https]</span><br><span class="line">sslCAinfo = C:/Users/Administrator/AppData/Local/GitHubDesktop/app-1.2.6/resources/app/git/mingw64/ssl/certs/curl-ca-bundle.crt</span><br><span class="line">[sendemail]</span><br><span class="line">smtpserver = /bin/msmtp.exe</span><br><span class="line"></span><br><span class="line">[diff &quot;astextplain&quot;]</span><br><span class="line">textconv = astextplain</span><br><span class="line">[rebase]</span><br><span class="line">autosquash = true</span><br></pre></td></tr></table></figure><ul><li><strong>重点提示</strong>：默认的是<code>[http]</code>，如果有必要你需要改成<code>[https]</code></li><li>如果找不到<code>C:\ProgramData</code>文件（我的是win10），在查看下将隐藏的项目打个勾<br><img src="https://user-images.githubusercontent.com/19526072/43298424-81590c1a-9188-11e8-8968-666bdd839ced.png" alt="打开隐藏文件"></li></ul><blockquote><p>参考：<a href="http://www.mamicode.com/info-detail-2368065.html" target="_blank" rel="noopener">GitHub Desktop报错fatal: unable to access ‘https://github.com……: schannel: failed to open CA file ‘C:/Users……bundle.crt’: No such file or directory的解决办法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习资料峡谷</title>
      <link href="/2018/07/06/dev-data/"/>
      <url>/2018/07/06/dev-data/</url>
      
        <content type="html"><![CDATA[<h3 id="学习资料站"><a href="#学习资料站" class="headerlink" title="学习资料站"></a>学习资料站</h3><h4 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h4><ul><li><strong><a href="https://juejin.im/post/5a0c1956f265da430a501f51" target="_blank" rel="noopener">(2017)个人分享–web前端学习资源分享</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Learn" target="_blank" rel="noopener">学习 Web 开发</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide" target="_blank" rel="noopener">Web开发者指南</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/Tutorials" target="_blank" rel="noopener">教程</a></strong></li><li><strong><a href="http://www.w3school.com.cn/" target="_blank" rel="noopener">W3school</a></strong></li><li><strong><a href="https://www.w3.org/" target="_blank" rel="noopener">W3C</a></strong></li><li><strong><a href="http://www.hewebgl.com/" target="_blank" rel="noopener">WebGL中文网</a></strong></li></ul><a id="more"></a><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul><li><strong><a href="http://es6.ruanyifeng.com/#docs/intro" target="_blank" rel="noopener">ECMAScript 6入门</a></strong></li><li><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript</a></strong></li><li><strong><a href="http://mp.weixin.qq.com/s?__biz=MzAxODE2MjM1MA==&amp;mid=2651552568&amp;idx=1&amp;sn=2c85a858b0a28d1c256354312f535f13&amp;chksm=8025acf9b75225efea70a70b3d753bd53ec596f2d90371d960d5643e8c5946cea79f355c7513&amp;mpshare=1&amp;scene=23&amp;srcid=0906yyeOcwhCqvE1DrkomSbR#rd" target="_blank" rel="noopener">怎么学 JavaScript？</a></strong></li><li><strong><a href="http://www.jianshu.com/p/72e318848de8" target="_blank" rel="noopener">10个最佳的JavaScript风格指南</a></strong></li></ul><h4 id="框架、库"><a href="#框架、库" class="headerlink" title="框架、库"></a>框架、库</h4><ul><li><strong><a href="http://www.bootcss.com/" target="_blank" rel="noopener">前端框架、资料汇集</a></strong></li><li><strong><a href="https://www.lodashjs.com/" target="_blank" rel="noopener">Lodash</a></strong>— 是一个一致性、模块化、高性能的 JavaScript 实用工具库。</li><li><strong><a href="http://www.bootcss.com/p/headroom.js/" target="_blank" rel="noopener">Headroom.js</a></strong>— 为页面顶部多留些空间。在不需要页头时将其隐藏。</li><li><strong><a href="http://www.bootcss.com/p/icheck/" target="_blank" rel="noopener">iCheck</a></strong>—增强复选框和单选按钮</li><li><strong><a href="http://www.hewebgl.com/article/articledir/1" target="_blank" rel="noopener">Three.js</a></strong>— 是JavaScript编写的WebGL第三方库。提供了非常多的3D显示功能。</li></ul><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><ul><li><strong><a href="https://github.com/geeeeeeeeek/git-recipes" target="_blank" rel="noopener">高质量的Git中文教程</a></strong>—该Wiki的编者非常认真细致地总结和翻译了许多Github知识和技巧</li><li><strong><a href="http://www.yangzhiping.com/tech/github.html" target="_blank" rel="noopener">如何高效利用GitHub</a></strong></li><li><strong><a href="http://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">Git - 简易指南</a></strong></li><li><strong><a href="https://zhuanlan.zhihu.com/p/24081900" target="_blank" rel="noopener">全面理解Git</a></strong></li><li><strong><a href="https://gruntjs.com/" target="_blank" rel="noopener">Grunt</a></strong>—项目构建工具</li><li><strong><a href="http://www.gulpjs.com.cn/" target="_blank" rel="noopener">Gulp</a></strong>—用自动化构建工具增强你的工作流程！</li><li><strong><a href="https://webpack.bootcss.com/" target="_blank" rel="noopener">Webpack</a></strong>—前端资源模块化管理和打包工具</li><li><strong><a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="noopener">入门Webpack，看这篇就够了</a></strong></li></ul><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><ul><li><strong><a href="http://www.zhangxinxu.com/" target="_blank" rel="noopener">张鑫旭</a></strong></li><li><strong><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰的官方网站</a></strong></li><li><strong><a href="http://www.ruanyifeng.com/blog/javascript/" target="_blank" rel="noopener">阮一峰的网络日志之JavaScript</a></strong><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4></li><li><strong><a href="http://blog.jobbole.com/105633/" target="_blank" rel="noopener">HTTPS 工作原理和 TCP 握手机制</a></strong></li></ul><h3 id="快速查找区"><a href="#快速查找区" class="headerlink" title="快速查找区"></a>快速查找区</h3><ul><li><strong><a href="https://github.com/yangtao2o/learninglog/wiki/JavaScript经典实例#regexp" target="_blank" rel="noopener">正则表达式特殊字符</a></strong></li></ul><h3 id="学习书籍"><a href="#学习书籍" class="headerlink" title="学习书籍"></a>学习书籍</h3><ul><li><p><strong><a href="https://github.com/yangtao2o/learninglog/wiki/JavaScript经典实例" target="_blank" rel="noopener">JavaScript经典实例</a></strong> </p><ul><li>慕课网手记<a href="http://www.imooc.com/article/20555" target="_blank" rel="noopener">归纳《JavaScript经典实例》之JS不只是简单的构件块</a></li></ul></li><li><p><strong><a href="https://freecodecamp.cn/map-aside#nested-collapseBasicAlgorithmScripting" target="_blank" rel="noopener">FreeCodeCamp</a></strong></p><ul><li>慕课网发布手记 <a href="http://www.imooc.com/article/20814" target="_blank" rel="noopener">JavaScript算法初级练习</a></li></ul></li></ul><h3 id="个人手记集锦"><a href="#个人手记集锦" class="headerlink" title="个人手记集锦"></a>个人手记集锦</h3><ul><li><strong><a href="http://www.imooc.com/u/3120512/articles" target="_blank" rel="noopener">慕课网手记</a></strong></li><li><strong><a href="https://www.qdfuns.com/u/32286.html" target="_blank" rel="noopener">前端网笔记</a></strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端学习资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 前端学习资料 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo常用命令集合</title>
      <link href="/2018/07/06/hexo-order/"/>
      <url>/2018/07/06/hexo-order/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th style="text-align:left">简写</th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">hexo n “我的博客”</td><td>hexo new “我的博客”</td><td>#新建文章</td></tr><tr><td style="text-align:left">hexo p</td><td>hexo publish</td></tr><tr><td style="text-align:left">hexo g</td><td>hexo generate</td><td>#生成</td></tr><tr><td style="text-align:left">hexo s</td><td>hexo server</td><td>#启动服务预览</td></tr><tr><td style="text-align:left">hexo d</td><td>hexo deploy</td><td>#部署</td></tr></tbody></table><a id="more"></a><table><thead><tr><th style="text-align:left">服务器</th><th></th></tr></thead><tbody><tr><td style="text-align:left">hexo server #Hexo</td><td>会监视文件变动并自动更新，您无须重启服务器。</td></tr><tr><td style="text-align:left">hexo server -s</td><td>#静态模式</td></tr><tr><td style="text-align:left">hexo server -p 5000</td><td>#更改端口</td></tr><tr><td style="text-align:left">hexo server -i 192.168.1.1</td><td>#自定义 IP</td></tr><tr><td style="text-align:left">hexo clean</td><td>#清除缓存 网页正常情况下可以忽略此条命令</td></tr><tr><td style="text-align:left">hexo g</td><td>#生成静态网页</td></tr><tr><td style="text-align:left">hexo d</td><td>#开始部署</td></tr></tbody></table><table><thead><tr><th style="text-align:left">监视文件变动</th><th></th></tr></thead><tbody><tr><td style="text-align:left">hexo generate</td><td>#使用 Hexo 生成静态文件快速而且简单</td></tr><tr><td style="text-align:left">hexo generate –watch</td><td>#监视文件变动</td></tr></tbody></table><table><thead><tr><th style="text-align:left">完成后部署（两个命令的作用是相同的）</th><th style="text-align:left">草稿</th></tr></thead><tbody><tr><td style="text-align:left">hexo generate –deploy</td><td style="text-align:left">hexo publish [layout] <title></title></td></tr><tr><td style="text-align:left">hexo deploy –generate</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">hexo deploy -g</td><td style="text-align:left">…</td></tr><tr><td style="text-align:left">hexo server -g</td><td style="text-align:left">…</td></tr></tbody></table><table><thead><tr><th style="text-align:left">模版</th><th style="text-align:left"></th></tr></thead><tbody><tr><td style="text-align:left">hexo new “postName”</td><td style="text-align:left">#新建文章</td></tr><tr><td style="text-align:left">hexo new page “pageName”</td><td style="text-align:left">#新建页面</td></tr><tr><td style="text-align:left">hexo generate</td><td style="text-align:left">#生成静态页面至public目录</td></tr><tr><td style="text-align:left">hexo server</td><td style="text-align:left">#开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</td></tr><tr><td style="text-align:left">hexo deploy</td><td style="text-align:left">#将.deploy目录部署到GitHub</td></tr><tr><td style="text-align:left">hexo new [layout] <title></title></td><td style="text-align:left">..</td></tr><tr><td style="text-align:left">hexo new photo “My Gallery”</td><td style="text-align:left">..</td></tr><tr><td style="text-align:left">hexo new “Hello World” –lang tw</td><td style="text-align:left">..</td></tr></tbody></table><blockquote><p>参考 :<a href="https://blog.csdn.net/qq_26975307/article/details/62447489" target="_blank" rel="noopener">Hexo常用命令笔记</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于使用Hexo主题Yilia中碰到的问题一二</title>
      <link href="/2018/04/08/hexo-yilia/"/>
      <url>/2018/04/08/hexo-yilia/</url>
      
        <content type="html"><![CDATA[<ul><li>关于使用主题 <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">Yilia</a>的一些问题的集合地：<a href="https://github.com/litten/hexo-theme-yilia/issues" target="_blank" rel="noopener">Issues</a></li></ul><blockquote><p>首推：<a href="http://www.ahonn.me/2016/12/15/create-a-hexo-theme-from-scratch/" target="_blank" rel="noopener">从零开始制作 Hexo 主题 </a></p></blockquote><a id="more"></a><blockquote><p>Q1：主页如何截取文本长度？</p></blockquote><ul><li>在需要截断的位置使用 <code>&lt;!-- More --&gt;</code> 即可</li></ul><blockquote><p>Q2：如何设置多个标签？</p></blockquote><ul><li><code>tags: [Hexo,Theme]</code>，参考<a href="https://www.zhihu.com/question/48934747/answer/113403121" target="_blank" rel="noopener">此处</a></li></ul><blockquote><p>Q3：更换主题的时候报错</p></blockquote><ul><li>一般是由于主题配置文件中的 <code>key: value</code>前后出现了空格，或者之间没有空格导致的</li></ul><blockquote><p>Q4：如何创建 about 等页面？如何创建自定义页面？</p></blockquote><ul><li><code>hexo new page &quot;about&quot;</code></li><li>参考<br>_ <a href="https://blog.csdn.net/lcyaiym/article/details/76762105?locationNum=5&amp;fps=1" target="_blank" rel="noopener">hexo 的 Next 创建 tags </a><br>_ <a href="https://refined-x.com/2017/07/10/Hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">Hexo 自定义页面的方法 </a></li></ul><blockquote><p>其他</p></blockquote><ul><li>选择 favicon：<a href="http://www.easyicon.net/language.zh-cn/" target="_blank" rel="noopener">easyicon</a></li></ul><p><img src="/img/about-bg.jpg" alt="banner"></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+Github搭建自己的个人网站</title>
      <link href="/2018/04/08/hexo/"/>
      <url>/2018/04/08/hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-官方文档"><a href="#Hexo-官方文档" class="headerlink" title="Hexo 官方文档"></a><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 官方文档</a></h3><a id="more"></a><blockquote><p><a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">将纯文本转化为静态网站和博客框架：jekyll</a></p></blockquote><h3 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h3><ul><li><a href="https://zoumiaojiang.com/article/how-to-build-a-blog/" target="_blank" rel="noopener">快速低成本的搭建一个马马虎虎的博客</a></li><li><a href="https://huangxuan.me/" target="_blank" rel="noopener">Hux Blog一生想做浪漫极客</a></li><li><a href="https://www.jianshu.com/p/b96fd206571a" target="_blank" rel="noopener">教你定制Hexo的landscape打造自己的主题</a></li><li><a href="http://www.codertian.com/2015/11/26/github-hexo-blog/" target="_blank" rel="noopener">【实用技能】使用github+Hexo人人都能拥有一个博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://blog.csdn.net/guin_guo/article/details/51090481" target="_blank" rel="noopener">使用github page + hexo3.0 搭建个人博客，加绑定域名。</a></li><li>【很详细】<a href="https://www.cnblogs.com/visugar/p/6821777.html" target="_blank" rel="noopener">hexo从零开始到搭建完整</a></li></ul><h3 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h3><ul><li>合集：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes|Hexo</a> </li><li><a href="https://www.jianshu.com/p/bcdbe7347c8d" target="_blank" rel="noopener">Hexo博客主题推荐</a></li><li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">hexo-theme-yilia</a></li><li><a href="https://blog.csdn.net/u011026329/article/details/52939341" target="_blank" rel="noopener">Yelee —— 简而不减 Hexo 双栏博客主题</a></li><li><a href="https://material.viosey.com/docs/#/start" target="_blank" rel="noopener">Material Theme</a></li><li><a href="http://haojen.github.io/" target="_blank" rel="noopener">Haojen ‘s Blog</a> <ul><li><a href="https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/" target="_blank" rel="noopener">Anisina 中文使用教程</a></li></ul></li><li><a href="https://blog.daraw.cn/" target="_blank" rel="noopener">DaraW</a><ul><li><a href="https://github.com/CodeDaraW/Hacker" target="_blank" rel="noopener">Hacker</a></li></ul></li><li><a href="https://github.com/BoizZ/hexo-theme-laughing" target="_blank" rel="noopener">laughing</a></li><li><a href="http://www.ccblog.win/" target="_blank" rel="noopener">http://www.ccblog.win/</a></li><li><a href="https://github.com/CodeDaraW/Hacker" target="_blank" rel="noopener">Hacker</a></li><li>加载速度快列表页：<a href="http://blog.minfive.com/" target="_blank" rel="noopener">A simple &amp; beautiful &amp; fast theme for Hexo</a></li><li>偏向Vue：<a href="https://github.com/yanm1ng/hexo-theme-vexo" target="_blank" rel="noopener">Vexo</a></li><li>设计类：<a href="https://github.com/miccall/hexo-theme-Mic_Theme" target="_blank" rel="noopener">Mic_Theme</a></li><li>酷炫类：<ul><li><a href="https://github.com/ochukai/hexo-theme-ochuunn" target="_blank" rel="noopener">hexo-theme-ochuunn</a></li><li><a href="http://firework.studio/archer-demo/" target="_blank" rel="noopener">Archer</a></li></ul></li><li>扁平化类：<a href="http://blog.minfive.com/" target="_blank" rel="noopener">A simple &amp; beautiful &amp; fast theme for Hexo</a><ul><li><a href="https://github.com/Mrminfive/hexo-theme-skapp" target="_blank" rel="noopener">hexo-theme-skapp</a></li></ul></li><li>简洁、明了<ul><li><a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener">hexo-theme-huxblog</a> </li><li><a href="http://gaoryrt.com/" target="_blank" rel="noopener">A plain theme for Hexo</a> — 比较个性化</li><li><a href="https://blog.daraw.cn/" target="_blank" rel="noopener">DARAW</a></li><li><a href="https://mikecoder.github.io/oj-code/" target="_blank" rel="noopener">hexo-theme-gandalfr</a></li><li><a href="http://www.ahonn.me/" target="_blank" rel="noopener">Even</a></li></ul></li><li>卡片式：<a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener">Material X</a><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3></li><li><a href="http://moxfive.xyz/" target="_blank" rel="noopener">MOxFIVE</a> </li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li><a href="https://www.zhihu.com/question/52272170" target="_blank" rel="noopener">hexo+Github Page搭建的博客无法加载样式表？</a></li><li><a href="https://segmentfault.com/a/1190000007385345" target="_blank" rel="noopener">hexo githubpage 初始化 并解决同步静态页面问题</a></li><li><a href="https://help.github.com/articles/changing-a-remote-s-url/" target="_blank" rel="noopener">Changing a remote’s URL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习《JavaScript经典实例》之第3章</title>
      <link href="/2018/04/08/js-chapter-3/"/>
      <url>/2018/04/08/js-chapter-3/</url>
      
        <content type="html"><![CDATA[<h3 id="第3章-JavaScript的构建块"><a href="#第3章-JavaScript的构建块" class="headerlink" title="第3章 JavaScript的构建块"></a>第3章 JavaScript的构建块</h3><a id="more"></a><h4 id="3种基本的创建函数方式："><a href="#3种基本的创建函数方式：" class="headerlink" title="3种基本的创建函数方式："></a>3种基本的创建函数方式：</h4><ul><li>声明式函数</li><li>匿名函数或函数构造函数</li><li>函数字面值或函数表达式</li></ul><h4 id="3-1-放置函数并提升"><a href="#3-1-放置函数并提升" class="headerlink" title="3.1 放置函数并提升"></a>3.1 放置函数并提升</h4><ul><li>声明式函数，可以放置在代码中的任何位置；函数表达式，必须将其放置在使用函数的位置之前</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在声明一个变量之前打印a</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>, a);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="comment">// 在声明一个变量并赋值</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'aa'</span>, aa);  <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> aa = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明变量发生了提升，但是赋值并没有，赋值是在相应的位置发生的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明式函数，在访问该函数之前，提升将确保把函数声明移动到当前作用域的顶部</span></span><br><span class="line"><span class="built_in">console</span>.log(mytest());  <span class="comment">//success</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mytest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'success'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用函数表达式就会报错，变量可能声明了，但没有实例化，但是你的代码试图将这个变量当做一个函数对待</span></span><br><span class="line"><span class="built_in">console</span>.log(mytest2());  <span class="comment">//TypeError: mytest2 is not a function</span></span><br><span class="line"><span class="keyword">var</span> mytest2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'success2'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-把一个函数当做参数传递给另一个函数"><a href="#3-2-把一个函数当做参数传递给另一个函数" class="headerlink" title="3.2 把一个函数当做参数传递给另一个函数"></a>3.2 把一个函数当做参数传递给另一个函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">otherFunction</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">x(y, z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以像传递一个命名的变量一样，将一个函数作为参数传递给另一个函数</span></span><br><span class="line"><span class="keyword">var</span> param = <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a1, a2</span>) </span>&#123; alert(a1 + <span class="string">" "</span> + a2); &#125;;</span><br><span class="line">otherFunction(param, <span class="string">"Hello"</span>, <span class="string">"World"</span>);</span><br></pre></td></tr></table></figure><ul><li>函数式编程和JavaScript<ul><li><strong>高阶函数：</strong> 一个函数接受另一个函数作为参数，或者返回一个函数，或者两者都具备</li><li><strong>函数式编程：</strong> 对应用程序复杂性进行抽象的一种方式，使用整齐、干净的函数调用替代了复杂的循环和条件语句（代码可读性高）</li><li>比如：将数组中的所有数字相加</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for循环相加</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">sum += nums[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum'</span>, sum);  <span class="comment">//75</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nums2 = [<span class="number">1</span>, <span class="number">34</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">18</span>];</span><br><span class="line"><span class="keyword">var</span> sum2 = nums2.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum2'</span>, sum2);  <span class="comment">//75</span></span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce_clone" target="_blank" rel="noopener">arr.reduce([callback, initialValue])</a> 方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。</li></ul><h4 id="3-3-实现递归算法"><a href="#3-3-实现递归算法" class="headerlink" title="3.3 实现递归算法"></a>3.3 实现递归算法</h4><ul><li>想要实现一个函数，它递归地遍历一个数组并返回一个反向的数组字符串</li><li>缺点：递归很消耗内存</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span> ? n : n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'阶乘'</span>, factorial(<span class="number">4</span>));  <span class="comment">// 24</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : fibonacci(n - <span class="number">1</span>) + fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'斐波那契'</span>, fibonacci(<span class="number">10</span>));  <span class="comment">//55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用一个递归函数字面值来反转数组元素，从最大长度开始，每次迭代都将这个值自减</span></span><br><span class="line"><span class="comment">// 当为 0 时，返回字符串</span></span><br><span class="line"><span class="keyword">var</span> reverseArrary = <span class="function"><span class="keyword">function</span>(<span class="params">x, index, str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> index == <span class="number">0</span> ? str : reverseArrary(x, --index, (str += <span class="string">" "</span> + x[index]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'peach'</span>, <span class="string">'lime'</span>];</span><br><span class="line"><span class="keyword">var</span> str = reverseArrary(arr, arr.length, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'str'</span>, str);  <span class="comment">//lime peach orange apple</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果要反过来，按照顺序把数组连接为一个字符串</span></span><br><span class="line"><span class="keyword">var</span> orderArray = <span class="function"><span class="keyword">function</span>(<span class="params">x, i, str</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i == x.length - <span class="number">1</span> ? str : orderArray(x, ++i, (str += x[i] + <span class="string">" "</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numArr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> numStr = orderArray(numArr, <span class="number">-1</span>, <span class="string">""</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'numStr'</span>, numStr);  <span class="comment">//1 2 3 4</span></span><br></pre></td></tr></table></figure><h4 id="3-4-使用一个定时器和回调防止代码阻塞"><a href="#3-4-使用一个定时器和回调防止代码阻塞" class="headerlink" title="3.4 使用一个定时器和回调防止代码阻塞"></a>3.4 使用一个定时器和回调防止代码阻塞</h4><ul><li>在程序的输出中，3个外围的 <code>console.log()</code> 立即被处理了</li><li>队列中下一个事件是第一个 <code>noBlock()</code> 函数调用，其中又调用了 <code>factorial()</code> ，记录了其运行时候的活动，最后跟着回调函数的调用</li><li>第二次同样地调用了 <code>callBack()</code></li><li>第三次调用 <code>callBack()</code> 的时候，回调函数中的调用针对第一次 <code>callBack()</code> ，并使用了第一次函数调用的最终结果：6</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'n'</span>, n);</span><br><span class="line"><span class="keyword">return</span> n == <span class="number">1</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noBlock</span>(<span class="params">n, callback</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> val = factorial(n);</span><br><span class="line"><span class="keyword">if</span>(callback &amp;&amp; <span class="keyword">typeof</span> callback == <span class="string">'function'</span>) &#123;</span><br><span class="line">callback(val);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Top of the morning to you'</span>);</span><br><span class="line">noBlock(<span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'first call ends width '</span> + n);</span><br><span class="line">noBlock(n, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'final result is '</span> + m);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tst = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">tst += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'value of tst is '</span> + tst);</span><br><span class="line">noBlock(<span class="number">4</span>, <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end result is '</span> + n);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'not doing too much'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>待续~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript经典实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习《JavaScript经典实例》之第2章</title>
      <link href="/2018/04/08/js-chapter-2/"/>
      <url>/2018/04/08/js-chapter-2/</url>
      
        <content type="html"><![CDATA[<h3 id="第2章-JavaScript数组"><a href="#第2章-JavaScript数组" class="headerlink" title="第2章 JavaScript数组"></a>第2章 JavaScript数组</h3><a id="more"></a><h4 id="2-1-在数组中搜索"><a href="#2-1-在数组中搜索" class="headerlink" title="2.1 在数组中搜索"></a>2.1 在数组中搜索</h4><ul><li><code>indexOf()、lastIndexOf()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'seal'</span>, <span class="string">'elephant'</span>, <span class="string">'walrus'</span>, <span class="string">'lion'</span>);</span><br><span class="line"><span class="keyword">var</span> index = animals.indexOf(<span class="string">'cat'</span>);</span><br><span class="line"><span class="keyword">var</span> index2 = animals.lastIndexOf(<span class="string">'lion'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i'</span>,index);  <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i2'</span>,index2);  <span class="comment">//5</span></span><br></pre></td></tr></table></figure><ul><li><a href="http://www.runoob.com/jsref/jsref-findindex.html" target="_blank" rel="noopener">findIndex()</a> 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">199</span>, <span class="number">80</span>, <span class="number">400</span>, <span class="number">30</span>, <span class="number">90</span>];</span><br><span class="line"><span class="keyword">var</span> over = nums.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (ele &gt;= <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'nums'</span>,nums[over]);  <span class="comment">//199</span></span><br></pre></td></tr></table></figure><h4 id="2-2-用concat-和apply-将一个二维数组扁平化"><a href="#2-2-用concat-和apply-将一个二维数组扁平化" class="headerlink" title="2.2 用concat()和apply()将一个二维数组扁平化"></a>2.2 用concat()和apply()将一个二维数组扁平化</h4><ul><li>concat() 方法用于连接两个或多个数组。该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本。<ul><li><code>arrayObject.concat(arrayX,arrayX,......,arrayX)</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruitarray = [];</span><br><span class="line">fruitarray[<span class="number">0</span>] = [<span class="string">'stranwberry'</span>, <span class="string">'orange'</span>];</span><br><span class="line">fruitarray[<span class="number">1</span>] = [<span class="string">'lime'</span>, <span class="string">'peach'</span>, <span class="string">'banana'</span>];</span><br><span class="line">fruitarray[<span class="number">2</span>] = [<span class="string">'tangerine'</span>, <span class="string">'apricot'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'array'</span>,fruitarray.concat());</span><br><span class="line"><span class="keyword">var</span> newArray = fruitarray.concat.apply([], fruitarray);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.cnblogs.com/lengyuehuahun/p/5643625.html" target="_blank" rel="noopener">apply()与call()的区别</a></li><li><a href="https://www.zhihu.com/question/20289071" target="_blank" rel="noopener">如何理解和熟练运用js中的call及apply？</a><ul><li><code>obj.call(thisObj, arg1, arg2, ...);</code></li><li><code>obj.apply(thisObj, [arg1, arg2, ...]);</code></li></ul></li><li>call() &amp; apply()，动态改变this</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'add'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'sum'</span>, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//Window</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//Window</span></span><br><span class="line"></span><br><span class="line">add.call(sum, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//sum(a, b)</span></span><br><span class="line">sum.call(add, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//add(a ,b)</span></span><br></pre></td></tr></table></figure><ul><li>arguments装换为数组, 返回的是数组，但是arguments本身保持不变</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arg = [].slice.call(<span class="built_in">arguments</span>);</span><br><span class="line"><span class="comment">// [].slice.call(document.getElementsByTagName('li'));</span></span><br></pre></td></tr></table></figure><ul><li>借用别人的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">name: <span class="string">'jack'</span>,</span><br><span class="line">showName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'this name:'</span>,<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bar = &#123;</span><br><span class="line">name: <span class="string">'rose'</span></span><br><span class="line">&#125;</span><br><span class="line">foo.showName();  <span class="comment">//jack</span></span><br><span class="line">foo.showName.call(bar);  <span class="comment">//rose</span></span><br></pre></td></tr></table></figure><ul><li>实现继承</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, high</span>) </span>&#123;</span><br><span class="line">Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line"><span class="keyword">this</span>.high = high;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>封装对象保证this的指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">_this.$box.on(<span class="string">'mousedown'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> _this.fndown.apply(_this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-删除或替换数组元素"><a href="#2-3-删除或替换数组元素" class="headerlink" title="2.3 删除或替换数组元素"></a>2.3 删除或替换数组元素</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">splice()</a> 方法与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a> 方法的作用是不同的，splice() 方法会直接对数组进行修改。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'pig'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="comment">// 从数组删除元素</span></span><br><span class="line">animals.splice(animals.indexOf(<span class="string">'apple'</span>), <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);  <span class="comment">// ["dog", "cat", "rabbit", "pig"]</span></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">animals.splice(animals.indexOf(<span class="string">'pig'</span>), <span class="number">1</span>, <span class="string">'monkey'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);  <span class="comment">//["dog", "cat", "rabbit", "monkey"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用循环和分割来替换和删除元素</span></span><br><span class="line"><span class="keyword">var</span> charSets = [<span class="string">"ab"</span>, <span class="string">"bb"</span>, <span class="string">"cd"</span>, <span class="string">"ab"</span>, <span class="string">"cc"</span>, <span class="string">"ab"</span>, <span class="string">"dd"</span>, <span class="string">"ab"</span>];</span><br><span class="line"><span class="keyword">while</span>(charSets.indexOf(<span class="string">'ab'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">charSets.splice(charSets.indexOf(<span class="string">'ab'</span>), <span class="number">1</span>, <span class="string">'**'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(charSets);  <span class="comment">//["**", "bb", "cd", "**", "cc", "**", "dd", "**"]</span></span><br><span class="line"><span class="keyword">while</span>(charSets.indexOf(<span class="string">'**'</span>) != <span class="number">-1</span>) &#123;</span><br><span class="line">charSets.splice(charSets.indexOf(<span class="string">'**'</span>), <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(charSets); <span class="comment">//["bb", "cd", "cc", "dd"]</span></span><br></pre></td></tr></table></figure><h4 id="2-4-提取一个数组中的一部分"><a href="#2-4-提取一个数组中的一部分" class="headerlink" title="2.4 提取一个数组中的一部分"></a>2.4 提取一个数组中的一部分</h4><ul><li>不更改原数组，使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">slice()</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animals = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">'dog'</span>, <span class="string">'cat'</span>, <span class="string">'rabbit'</span>, <span class="string">'pig'</span>, <span class="string">'apple'</span>);</span><br><span class="line"><span class="keyword">var</span> newAnimals = animals.slice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(animals);  <span class="comment">//["dog", "cat", "rabbit", "pig", "apple"]</span></span><br><span class="line"><span class="built_in">console</span>.log(newAnimals);  <span class="comment">//["cat"]</span></span><br></pre></td></tr></table></figure><h4 id="2-5-对每一个数组元素应用一个函数"><a href="#2-5-对每一个数组元素应用一个函数" class="headerlink" title="2.5 对每一个数组元素应用一个函数"></a>2.5 对每一个数组元素应用一个函数</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach" target="_blank" rel="noopener">Array.prototype.forEach()</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> charSets = [<span class="string">"ab"</span>, <span class="string">"bb"</span>, <span class="string">"cd"</span>, <span class="string">"ab"</span>, <span class="string">"cc"</span>, <span class="string">"ab"</span>, <span class="string">"dd"</span>, <span class="string">"ab"</span>];</span><br><span class="line">charSets.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(element == <span class="string">'ab'</span>) array[index] = <span class="string">'**'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(charSets);  <span class="comment">//["**", "bb", "cd", "**", "cc", "**", "dd", "**"]</span></span><br></pre></td></tr></table></figure><h4 id="2-6-使用forEach-和call-遍历querySelectorAll-的结果"><a href="#2-6-使用forEach-和call-遍历querySelectorAll-的结果" class="headerlink" title="2.6 使用forEach()和call()遍历querySelectorAll()的结果"></a>2.6 使用forEach()和call()遍历querySelectorAll()的结果</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/querySelectorAll" target="_blank" rel="noopener">querySelectorAll()</a></li><li>可以将forEach()强制和一个NodeList一起使用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">'td + td'</span>);</span><br><span class="line">[].forEach.call(cells, <span class="function"><span class="keyword">function</span>(<span class="params">cell</span>) </span>&#123;</span><br><span class="line">sum += <span class="built_in">parseFloat</span>(cell.firstChild.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2-7-对数组中的每个元素执行一个函数并返回一个新数组"><a href="#2-7-对数组中的每个元素执行一个函数并返回一个新数组" class="headerlink" title="2.7 对数组中的每个元素执行一个函数并返回一个新数组"></a>2.7 对数组中的每个元素执行一个函数并返回一个新数组</h4><ul><li>将一个十进制的数组转化为新的等价的十六进制数组</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noopener">map()</a>方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</li><li>与forEach()不同，不会修改原数组，但是必须返回一个值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> decArray = [<span class="number">23</span>, <span class="number">3</span>, <span class="number">24</span>, <span class="number">45</span>, <span class="number">500</span>, <span class="number">9</span>, <span class="number">70</span>];</span><br><span class="line"><span class="keyword">var</span> hexArray = decArray.map(<span class="function"><span class="keyword">function</span>(<span class="params">ele</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ele.toString(<span class="number">16</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(decArray);  <span class="comment">//[23, 3, 24, 45, 500, 9, 70]</span></span><br><span class="line"><span class="built_in">console</span>.log(hexArray);  <span class="comment">//["17", "3", "18", "2d", "1f4", "9", "46"]</span></span><br></pre></td></tr></table></figure><h4 id="2-8-创建一个过滤后的数组"><a href="#2-8-创建一个过滤后的数组" class="headerlink" title="2.8 创建一个过滤后的数组"></a>2.8 创建一个过滤后的数组</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter" target="_blank" rel="noopener">filter()</a> 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> charSet = [<span class="string">'**'</span>, <span class="string">'bb'</span>, <span class="string">'cc'</span>, <span class="string">'**'</span>, <span class="string">'cd'</span>];</span><br><span class="line"><span class="keyword">var</span> newArray = charSet.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> element != <span class="string">"**"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);  <span class="comment">//["bb", "cc", "cd"]</span></span><br></pre></td></tr></table></figure><h4 id="2-9-验证数组内容"><a href="#2-9-验证数组内容" class="headerlink" title="2.9 验证数组内容"></a>2.9 验证数组内容</h4><ul><li>使用Array <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">every()</a>方法来检查每个元素是否符合给定的条件</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">some()</a> 方法确保至少某些元素符合该条件</li><li>区别：every()方法只要函数返回一个false值，处理就会结束，而some()方法会继续测试每个元素，直至返回true，此时，不再验证其他元素，即可返回ture</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testValue</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> testExp = <span class="regexp">/^[a-zA-Z]+$/</span>;</span><br><span class="line"><span class="keyword">return</span> testExp.test(element);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> elemSet = [<span class="string">'**'</span>, <span class="number">123</span>, <span class="string">'adv'</span>, <span class="string">'-'</span>, <span class="number">45</span>, <span class="string">'AAA'</span>];</span><br><span class="line"><span class="keyword">var</span> result = elemSet.every(testValue);</span><br><span class="line"><span class="keyword">var</span> result2 = elemSet.some(testValue);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(result2);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> elemSet2 = [<span class="string">'aaa'</span>, <span class="string">'animals'</span>, <span class="string">'vvv'</span>];</span><br><span class="line">result = elemSet2.every(testValue);</span><br><span class="line">result2 = elemSet2.some(testValue);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(result2);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="2-10-使用一个关联数组来存储表单元素名和值"><a href="#2-10-使用一个关联数组来存储表单元素名和值" class="headerlink" title="2.10 使用一个关联数组来存储表单元素名和值"></a>2.10 使用一个关联数组来存储表单元素名和值</h4><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys" target="_blank" rel="noopener">keys()</a> 方法返回一个新的Array迭代器，它包含数组中每个索引的键。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elemArray = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.forms[<span class="number">0</span>].elements[<span class="number">0</span>];</span><br><span class="line">elemArray[elem.id] = elem.value;</span><br><span class="line"><span class="keyword">var</span> elemArray = &#123;<span class="attr">name</span>: <span class="string">'yt'</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;;</span><br><span class="line"><span class="built_in">Object</span>.keys(elemArray).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> value = elemArray[key];</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>待续~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript经典实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习《JavaScript经典实例》之第1章</title>
      <link href="/2018/04/08/js-chapter-1/"/>
      <url>/2018/04/08/js-chapter-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《JavaScript经典实例》各节中的完整代码解决了常见的编程问题，并且给出了在任何浏览器中构建Web应用程序的技术。只需要将这些代码示例复制并粘贴到你自己的项目中就行了，可以快速完成工作，并且在此过程中学习JavaScript的很多知识。</p></blockquote><h3 id="第1章-JavaScript不只是简单的构件块"><a href="#第1章-JavaScript不只是简单的构件块" class="headerlink" title="第1章 JavaScript不只是简单的构件块"></a>第1章 JavaScript不只是简单的构件块</h3><h4 id="1-1-JavaScript对象、基本类型和字面值之间的区别"><a href="#1-1-JavaScript对象、基本类型和字面值之间的区别" class="headerlink" title="1.1 JavaScript对象、基本类型和字面值之间的区别"></a>1.1 JavaScript对象、基本类型和字面值之间的区别</h4><ul><li><p>5种基本类型：字符串、数值、布尔值、null、undefined，有3个有对应的构造方法对象:string、Number、Boolean </p></li><li><p>基本类型变量严格等于字面值，而对象实例则不会，因为基本类型是按值来比较的，而值是字面值</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num1);  <span class="comment">//number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num2);  <span class="comment">//object</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="1-2-从字符串提取一个列表"><a href="#1-2-从字符串提取一个列表" class="headerlink" title="1.2 从字符串提取一个列表"></a>1.2 从字符串提取一个列表</h4><ul><li>提取之前：<code>This is a list of items: cherries, limes, oranges, apples.</code></li><li>提取之后：<code>[&#39;cherries&#39;,&#39;limes&#39;,&#39;oranges&#39;,&#39;apples&#39;]</code></li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_indexOf.asp" target="_blank" rel="noopener">indexOf()</a></strong> 方法可返回某个指定的字符串值在字符串中首次出现的位置。</li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_substring.asp" target="_blank" rel="noopener">substring()</a></strong> 方法用于提取字符串中介于两个指定下标之间的字符。</li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_split.asp" target="_blank" rel="noopener">split()</a></strong> 方法用于把一个字符串分割成字符串数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sentence = <span class="string">'This is one sentence. This is a sentence with a list of items: cherries, oranges, apples, bananas. That was the list of items.'</span>;</span><br><span class="line"><span class="keyword">var</span> start = sentence.indexOf(<span class="string">':'</span>);</span><br><span class="line"><span class="keyword">var</span> end = sentence.indexOf(<span class="string">'.'</span>, start+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> listStr = sentence.substring(start+<span class="number">1</span>, end);</span><br><span class="line"><span class="keyword">var</span> fruits = listStr.split(<span class="string">','</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);  <span class="comment">//[" cherries", " oranges", " apples", " bananas"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取出空格等</span></span><br><span class="line">fruits.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">elmnt,indx,arry</span>) </span>&#123;</span><br><span class="line">    arry[indx] = elmnt.trim();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(fruits);  <span class="comment">//["cherries", "oranges", "apples", "bananas"]</span></span><br></pre></td></tr></table></figure><h4 id="1-3-检查一个存在的、非空的字符串"><a href="#1-3-检查一个存在的、非空的字符串" class="headerlink" title="1.3 检查一个存在的、非空的字符串"></a>1.3 检查一个存在的、非空的字符串</h4><ul><li>想要验证一个变量已经定义了，是一个字符串，并且它不为空</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> unknowVariable === <span class="string">'string'</span> &amp;&amp; unknowVariable.length &gt; <span class="number">0</span>) &#123;...&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-插入特殊字符"><a href="#1-4-插入特殊字符" class="headerlink" title="1.4 插入特殊字符"></a>1.4 插入特殊字符</h4><ul><li>想要向字符串中插入一个特殊字符，例如一个换行</li><li>转义序列都以一个<em>反斜杠</em> 开始（\）</li></ul><h4 id="1-5-使用新字符串替换模式"><a href="#1-5-使用新字符串替换模式" class="headerlink" title="1.5 使用新字符串替换模式"></a>1.5 使用新字符串替换模式</h4><ul><li>使用String对象的replace方法和一个 <strong><a href="http://www.runoob.com/js/js-regexp.html" target="_blank" rel="noopener">正则表达式</a></strong></li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace()</a></strong> 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li></ul><h4 id="正则表达式特殊字符"><a href="#正则表达式特殊字符" class="headerlink" title="正则表达式特殊字符"></a>正则表达式特殊字符</h4><table><thead><tr><th>字符</th><th>匹配</th><th>例子</th></tr></thead><tbody><tr><td>^</td><td>匹配输入的开头</td><td>/^This/ 匹配This is…</td></tr><tr><td>$</td><td>匹配输入的结束</td><td>/end$/ 匹配This is the end</td></tr><tr><td>*</td><td>匹配0次或多次</td><td>/se*/ 匹配s seeee或se</td></tr><tr><td>?</td><td>匹配0次或1次</td><td>/ap?/ 匹配apple and and</td></tr><tr><td>+</td><td>匹配1次或多次</td><td>/ap+/ 匹配apple 但是不匹配and</td></tr><tr><td>{n}</td><td>严格匹配n次</td><td>/ap{2}/ 严格匹配apple 但是不匹配apie</td></tr><tr><td>{n,}</td><td>匹配n次或多次</td><td>/ap{2,}/ 匹配apple中的p，但是不匹配apie中的p</td></tr><tr><td>{n,m}</td><td>至少匹配n次，之多匹配m<br>除换行以外的任何字符</td><td>/ap{2,4}/ 匹配apppppple中的4个p<br>/a.e/ 匹配ape和axe</td></tr><tr><td>[…]</td><td>方括号中的任何字符</td><td>/a[px]e/ 匹配ape axe 但是不匹配apxe</td></tr><tr><td>[^…]</td><td>除了方括号以外的任何字符</td><td>/a[^px]/ 匹配ale 但是不匹配ape axe</td></tr><tr><td>\b</td><td>匹配单词边界</td><td>/\bno/ 匹配nono中的第一个no</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>/\Bno/ 匹配nono中的第二个no</td></tr><tr><td>\d</td><td>数字0到9</td><td>/\d{3}/ 匹配Now in 123 中的123</td></tr><tr><td>\D</td><td>匹配任何非数字字符</td><td>/\D{2,4}/ 匹配Now in 123 中的Now in</td></tr><tr><td>\w</td><td>匹配任何单词字符（字母、数组和下划线</td><td>/\w/ 匹配javaScript中的j</td></tr><tr><td>\W</td><td>匹配任何非单词字符（非字母、数组和下划线）</td><td>/\W/ 匹配100%中的%</td></tr><tr><td>\n</td><td>匹配一个换行</td><td></td></tr><tr><td>\s</td><td>一个单个的空白字符</td><td></td></tr><tr><td>\S</td><td>一个单个的非空白字符</td><td></td></tr><tr><td>\t</td><td>一个制表符</td><td></td></tr><tr><td>(x)</td><td>捕获括号</td><td>记住匹配的字符</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchString = <span class="string">"Now is the time, this is the tame"</span>;</span><br><span class="line"><span class="keyword">var</span> re = <span class="regexp">/t\w&#123;2&#125;e/g</span>;</span><br><span class="line"><span class="keyword">var</span> replacement = searchString.replace(re, <span class="string">'place'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(replacement);  <span class="comment">//Now is the place, this is the place</span></span><br></pre></td></tr></table></figure><h4 id="1-6-找到并突出显示一个模式的所有实例"><a href="#1-6-找到并突出显示一个模式的所有实例" class="headerlink" title="1.6 找到并突出显示一个模式的所有实例"></a>1.6 找到并突出显示一个模式的所有实例</h4><ul><li>RegExp <strong><a href="http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp" target="_blank" rel="noopener">exec()</a></strong> 方法用于检索字符串中的正则表达式的匹配</li><li>RegExpObject.exec(string)</li><li>返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchString2 = <span class="string">"Now is the time and this is the time and that is the time"</span>;</span><br><span class="line"><span class="keyword">var</span> parttern = <span class="regexp">/t\w*e/g</span>;  <span class="comment">//\w 匹配任何单词字符</span></span><br><span class="line"><span class="keyword">var</span> matchArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用regexp exec检查模式，如果不为空，处理它</span></span><br><span class="line"><span class="keyword">while</span>((matchArray = parttern.exec(searchString2)) != <span class="literal">null</span>) &#123;</span><br><span class="line">str += <span class="string">"at "</span> + matchArray.index + <span class="string">" we found "</span> + matchArray[<span class="number">0</span>] + <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// at 7 we found the</span></span><br><span class="line"><span class="comment">// at 11 we found time</span></span><br><span class="line"><span class="comment">// at 28 we found the</span></span><br><span class="line"><span class="comment">// at 32 we found time</span></span><br><span class="line"><span class="comment">// at 49 we found the</span></span><br><span class="line"><span class="comment">// at 53 we found time</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实例1-1</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"searchSubmit"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取模式</span></span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="built_in">document</span>.getElementById(<span class="string">"pattern"</span>).value;</span><br><span class="line">    <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(pattern, <span class="string">"g"</span>);</span><br><span class="line">    <span class="comment">//获取字符串</span></span><br><span class="line">    <span class="keyword">var</span> searchString = <span class="built_in">document</span>.getElementById(<span class="string">"inComing"</span>).value;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> matchArray;</span><br><span class="line">    <span class="keyword">var</span> resultString = <span class="string">"&lt;pre&gt;"</span>;</span><br><span class="line">    <span class="keyword">var</span> first = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//找到每一个匹配</span></span><br><span class="line">    <span class="keyword">while</span>((matchArray = re.exec(searchString)) != <span class="literal">null</span>) &#123;</span><br><span class="line">    last = matchArray.index;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取所有匹配的字符串，将其连接起来</span></span><br><span class="line">    resultString += searchString.substring(first, last);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用class，添加匹配的字符串</span></span><br><span class="line">    resultString += <span class="string">'&lt;span class="found"&gt;'</span> + matchArray[<span class="number">0</span>] + <span class="string">'&lt;/span&gt;'</span>;</span><br><span class="line">    first = re.lastIndex;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//完成字符串</span></span><br><span class="line">    resultString += searchString.substring(first, searchString.length);</span><br><span class="line">    resultString += <span class="string">"&lt;/pre&gt;"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//插入页面</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"searchResult"</span>).innerHTML = resultString;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7-使用捕获圆括号交换一个字符串中的单词"><a href="#1-7-使用捕获圆括号交换一个字符串中的单词" class="headerlink" title="1.7 使用捕获圆括号交换一个字符串中的单词"></a>1.7 使用捕获圆括号交换一个字符串中的单词</h4><ul><li>交换名称，让姓氏先出现</li><li>解决：使用捕获圆括号和一个正则表达式在字符串中找到并记住他们的名字，然后互换他们</li><li><strong><a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace()</a></strong> 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li></ul><table><thead><tr><th>字符</th><th>替换文本</th></tr></thead><tbody><tr><td>$1、$2、…、$99</td><td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td></tr><tr><td>$&amp;</td><td>与 regexp 相匹配的子串。</td></tr><tr><td>$`</td><td>位于匹配子串左侧的文本。</td></tr><tr><td>$’</td><td>位于匹配子串右侧的文本。</td></tr><tr><td>$$</td><td>允许替换中有一个字面值美元符号($)</td></tr><tr><td>$n</td><td>插入使用RegExp的第n次捕获圆括号的值</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">"Tao Yang"</span>;</span><br><span class="line"><span class="keyword">var</span> nameRe = <span class="regexp">/^(\w+)\s(\w+)$/</span>;</span><br><span class="line"><span class="keyword">var</span> myNewName = myName.replace(nameRe, <span class="string">"$2 $1"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myNewName);  <span class="comment">//Yang Tao</span></span><br></pre></td></tr></table></figure><h4 id="1-8-使用命名实体来替代HTML标签"><a href="#1-8-使用命名实体来替代HTML标签" class="headerlink" title="1.8 使用命名实体来替代HTML标签"></a>1.8 使用命名实体来替代HTML标签</h4><ul><li>使用正则表达式把尖括号(&lt;&gt;)转换为命名的实体：&lt;和&gt;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pieceOfHtml = <span class="string">"&lt;p&gt;This is a &lt;span&gt;paragraph&lt;/span&gt;&lt;/p&gt;"</span>;</span><br><span class="line">pieceOfHtml = pieceOfHtml.replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>);</span><br><span class="line">pieceOfHtml = pieceOfHtml.replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(pieceOfHtml); <span class="comment">//&amp;lt;p&amp;gt;This is a &amp;lt;span&amp;gt;paragraph&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-9-ISO-8610格式的日期转换为Date对象可接受的一种形式"><a href="#1-9-ISO-8610格式的日期转换为Date对象可接受的一种形式" class="headerlink" title="1.9 ISO 8610格式的日期转换为Date对象可接受的一种形式"></a>1.9 ISO 8610格式的日期转换为Date对象可接受的一种形式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dtstr = <span class="string">"2014-3-04T19:35:32Z"</span>;</span><br><span class="line">dtstr = dtstr.replace(<span class="regexp">/\D/g</span>, <span class="string">" "</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dtstr);  <span class="comment">//2014 3 04 19 35 32</span></span><br><span class="line"><span class="keyword">var</span> dtcomps = dtstr.split(<span class="string">" "</span>);</span><br><span class="line"><span class="comment">//在基于1的ISO 8610月份和基于0的日期格式之间转换</span></span><br><span class="line">dtcomps[<span class="number">1</span>]--;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> convdt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.UTC.apply(<span class="literal">null</span>, dtcomps));</span><br><span class="line"><span class="built_in">console</span>.log(convdt.toString());  <span class="comment">//Wed Mar 05 2014 03:35:32 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h4 id="1-10-使用带有定时器的函数闭包"><a href="#1-10-使用带有定时器的函数闭包" class="headerlink" title="1.10 使用带有定时器的函数闭包"></a>1.10 使用带有定时器的函数闭包</h4><ul><li>使用一个匿名函数作为setInterval()或setTimeout()方法调用的第一个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intervalId = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"redbox"</span>).addEventListener(<span class="string">'click'</span>, startBox, <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startBox</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(intervalId == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line">        intervalId = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            x += <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">var</span> left = x + <span class="string">"px"</span>;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"redbox"</span>).style.left = left;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        clearInterval(intervalId);</span><br><span class="line">        intervalId = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-11-记录两个事件之间消耗的时间"><a href="#1-11-记录两个事件之间消耗的时间" class="headerlink" title="1.11 记录两个事件之间消耗的时间"></a>1.11 记录两个事件之间消耗的时间</h4><ul><li>在第一个事件发生的时候，创建一个Date对象，当第二个时间发生的时候，创建一个新的Date对象，并且从第二个对象中减去第一个对象。两者之间的差以毫秒表示的，要转换为秒，就除以1000</li><li>两个日期可以相减，但是相加就成了拼接字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    doEvent(firstDate);</span><br><span class="line">&#125;, <span class="number">25000</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doEvent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> secondDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> diff = secondDate - firstDate;</span><br><span class="line">    <span class="built_in">console</span>.log(diff);   <span class="comment">//25001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-12-十进制数转化为十六进制值"><a href="#1-12-十进制数转化为十六进制值" class="headerlink" title="1.12 十进制数转化为十六进制值"></a>1.12 十进制数转化为十六进制值</h4><ul><li>使用Number对象的 <strong><a href="http://www.w3school.com.cn/jsref/jsref_toString_boolean.asp" target="_blank" rel="noopener">toString()</a></strong> 方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">255</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>));  <span class="comment">//ff</span></span><br></pre></td></tr></table></figure><h4 id="1-13-想要将表中一列的所有数字加和"><a href="#1-13-想要将表中一列的所有数字加和" class="headerlink" title="1.13 想要将表中一列的所有数字加和"></a>1.13 想要将表中一列的所有数字加和</h4><ul><li>遍历表中包含了数字值的列，将其转换为数字，并加和</li><li><strong><a href="http://www.runoob.com/jsref/met-document-queryselector.html" target="_blank" rel="noopener">querySelector()</a></strong>  方法返回文档中匹配指定 CSS 选择器的一个元素</li><li>如果你需要返回所有的元素，请使用 querySelectorAll() 方法替代</li><li>全局函数 <strong><a href="http://www.runoob.com/jsref/jsref-parseint.html" target="_blank" rel="noopener">parseInt()</a></strong> 和 <strong><a href="http://www.runoob.com/jsref/jsref-parsefloat.html" target="_blank" rel="noopener">parseFloat()</a></strong> 都把字符串转化为数字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//使用querySelectorAll找到第二列的所有单元格</span></span><br><span class="line"><span class="keyword">var</span> cells = <span class="built_in">document</span>.querySelectorAll(<span class="string">"td:nth-of-type(2)"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>, l=cells.length; i&lt;l; i++) &#123;</span><br><span class="line">    sum += <span class="built_in">parseFloat</span>(cells[i].firstChild.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-14-在角度和弧度之间转换"><a href="#1-14-在角度和弧度之间转换" class="headerlink" title="1.14 在角度和弧度之间转换"></a>1.14 在角度和弧度之间转换</h4><ul><li>将角度转换为弧度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> radians = degrees * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br></pre></td></tr></table></figure><ul><li>将弧度转化为角度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> degrees = radians * (<span class="number">180</span> / <span class="built_in">Math</span>.PI);</span><br></pre></td></tr></table></figure><h4 id="1-15-找到页面元素可容纳的一个圆的半径和圆心"><a href="#1-15-找到页面元素可容纳的一个圆的半径和圆心" class="headerlink" title="1.15 找到页面元素可容纳的一个圆的半径和圆心"></a>1.15 找到页面元素可容纳的一个圆的半径和圆心</h4><ul><li><a href="http://www.w3school.com.cn/jsref/jsref_min.asp" target="_blank" rel="noopener">Math.min(x,y)</a>方法可返回指定的数字中带有最低值的数字。</li><li>求出宽度和高度中较小的一个，用其除以2得到半径</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> circleRadius = <span class="built_in">Math</span>.min(elemengWidth, elemengHeight) / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>给指定页面元素的宽度、高度，通过将二者都除以2来找到其中心点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = elemengWidth / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> y = elemengHeight / <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/getComputedStyle" target="_blank" rel="noopener">Window.getComputedStyle()</a>方法给出应用活动样式表后的元素的所有CSS属性的值，并解析这些值可能包含的任何基本计算。</li><li><a href="http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/" target="_blank" rel="noopener">getComputedStyle()</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>将一个SVG圆放入到一个div元素中<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-id">#elem</span> &#123;</span></span><br><span class="line"><span class="undefined">width: 100%;</span></span><br><span class="line"><span class="undefined">height: 500px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#ddd</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"elem"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">id</span>=<span class="string">"circ"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"10"</span> <span class="attr">r</span>=<span class="string">"10"</span> <span class="attr">fill</span>=<span class="string">"#f90"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"elem"</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> style = <span class="built_in">window</span>.getComputedStyle(box, <span class="literal">null</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> width = <span class="built_in">parseInt</span>(style.getPropertyValue(<span class="string">"width"</span>));</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> height = <span class="built_in">parseInt</span>(style.getPropertyValue(<span class="string">"height"</span>));</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'w'</span>, width, <span class="string">'h'</span>, height);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> x = width / <span class="number">2</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> y = height / <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> circleRadius = <span class="built_in">Math</span>.min(width, height) / <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> circ = <span class="built_in">document</span>.getElementById(<span class="string">"circ"</span>);</span></span><br><span class="line"><span class="javascript">circ.setAttribute(<span class="string">"r"</span>, circleRadius);</span></span><br><span class="line"><span class="javascript">circ.setAttribute(<span class="string">"cx"</span>, x);</span></span><br><span class="line"><span class="javascript">circ.setAttribute(<span class="string">"cy"</span>, y);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'r'</span>, circleRadius, <span class="string">' cx'</span>, x, <span class="string">' cy'</span>, y);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-16-计算圆弧的长度"><a href="#1-16-计算圆弧的长度" class="headerlink" title="1.16 计算圆弧的长度"></a>1.16 计算圆弧的长度</h4><ul><li>给定了一个圆的半径及圆弧角的角度值，求该圆弧的长度</li><li>使用<code>Math.PI</code>把角度转换为弧度，并在公式中使用该结果来求得圆弧的长度</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> radians = degrees * (<span class="built_in">Math</span>.PI / <span class="number">180</span>);</span><br><span class="line"><span class="keyword">var</span> arclength = radians * radians;</span><br></pre></td></tr></table></figure><blockquote><p>待续~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript经典实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欢迎来到「召唤师峡谷」</title>
      <link href="/2018/04/06/hello-world/"/>
      <url>/2018/04/06/hello-world/</url>
      
        <content type="html"><![CDATA[<h3 id="戳开可以说点什么哈-…"><a href="#戳开可以说点什么哈-…" class="headerlink" title="戳开可以说点什么哈 …"></a>戳开可以说点什么哈 …</h3>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
