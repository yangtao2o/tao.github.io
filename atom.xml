<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大涛子</title>
  
  <subtitle>简单、极致、不失风趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://47.101.33.81/"/>
  <updated>2019-11-27T13:08:12.537Z</updated>
  <id>http://47.101.33.81/</id>
  
  <author>
    <name>杨涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习冴羽的 JS 深入系列·下篇</title>
    <link href="http://47.101.33.81/2019/11/27/js-series-3/"/>
    <id>http://47.101.33.81/2019/11/27/js-series-3/</id>
    <published>2019-11-27T13:05:40.000Z</published>
    <updated>2019-11-27T13:08:12.537Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要是讲述了创建对象、继承的多种方式及其各自的优缺点</p></blockquote><a id="more"></a><h2 id="创建对象的多种方式以及优缺点"><a href="#创建对象的多种方式以及优缺点" class="headerlink" title="创建对象的多种方式以及优缺点"></a>创建对象的多种方式以及优缺点</h2><p>这篇文章更像是笔记，因为《JavaScript 高级程序设计》写得真是太好了！</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"kevin"</span>);</span><br></pre></td></tr></table></figure><p>缺点：对象无法识别，因为所有的实例都指向一个原型</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br></pre></td></tr></table></figure><p>优点：实例可以识别为一个特定的类型</p><p>缺点：每次创建实例时，每个方法都要被创建一次</p><ul><li>构造函数模式优化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.getName = getName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br></pre></td></tr></table></figure><p>优点：解决了每个方法都要被重新创建的问题</p><p>缺点：全局命名变量太多</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"keivn"</span>;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：方法不会重新创建</p><p>缺点：1. 所有的属性和方法都共享； 2. 不能初始化参数；</p><ul><li>原型模式优化 1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">"kevin"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：封装性好了一点</p><p>缺点：重写了原型，丢失了 constructor 属性</p><ul><li>原型模式优化 2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  name: "kevin",</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：实例可以通过 constructor 属性找到所属构造函数</p><p>缺点：原型模式该有的缺点还是有</p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>构造函数模式与原型模式双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：该共享的共享，该私有的私有，使用最广泛的方式</p><p>缺点：有的人就是希望全部都写在一起，即更好的封装性</p><ul><li>动态原型模式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>注意：使用动态原型模式时，不能用对象字面量重写原型</p><p>解释下为什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: Person,</span><br><span class="line">      getName: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"daisy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错 并没有该方法</span></span><br><span class="line">person1.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释掉上面的代码，这句是可以执行的。</span></span><br><span class="line">person2.getName();</span><br></pre></td></tr></table></figure><p>为了解释这个问题，假设开始执行<code>var person1 = new Person(&#39;kevin&#39;)</code>。</p><p>如果对 new 和 apply 的底层执行过程不是很熟悉，可以阅读底部相关链接中的文章。</p><p>我们回顾下 new 的实现步骤：</p><p>首先新建一个对象，然后将对象的原型指向 <code>Person.prototype</code>，然后 <code>Person.apply(obj)</code>返回这个对象。</p><p>注意这个时候，回顾下 apply 的实现步骤，会执行 <code>obj.Person</code> 方法，这个时候就会执行 if 语句里的内容，注意构造函数的 prototype 属性指向了实例的原型，使用字面量方式直接覆盖 <code>Person.prototype</code>，并不会更改实例的原型的值，person1 依然是指向了以前的原型，而不是 <code>Person.prototype</code>。而之前的原型是没有 getName 方法的，所以就报错了！</p><p>如果你就是想用字面量方式写代码，可以尝试下这种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: Person,</span><br><span class="line">      getName: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"daisy"</span>);</span><br><span class="line"></span><br><span class="line">person1.getName(); <span class="comment">// kevin</span></span><br><span class="line">person2.getName(); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>寄生构造函数模式，我个人认为应该这样读：寄生-构造函数-模式，也就是说寄生在构造函数的一种方法。</p><p>也就是说打着构造函数的幌子挂羊头卖狗肉，你看创建的实例使用 instanceof 都无法指向构造函数！</p><p>这样方法可以在特殊情况下使用。比如我们想创建一个具有额外方法的特殊数组，但是又不想直接修改 Array 构造函数，我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    values.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>);</span><br><span class="line"><span class="keyword">var</span> colors2 = SpecialArray(<span class="string">"red2"</span>, <span class="string">"blue2"</span>, <span class="string">"green2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors);</span><br><span class="line"><span class="built_in">console</span>.log(colors.toPipedString()); <span class="comment">// red|blue|green</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors2);</span><br><span class="line"><span class="built_in">console</span>.log(colors2.toPipedString()); <span class="comment">// red2|blue2|green2</span></span><br></pre></td></tr></table></figure><p>你会发现，其实所谓的寄生构造函数模式就是比工厂模式在创建对象的时候，多使用了一个 new，实际上两者的结果是一样的。</p><p>但是作者可能是希望能像使用普通 Array 一样使用 SpecialArray，虽然把 SpecialArray 当成函数也一样能用，但是这并不是作者的本意，也变得不优雅。</p><p>在可以使用其他模式的情况下，不要使用这种模式。</p><p>但是值得一提的是，上面例子中的循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">  values.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以替换成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">values.push.apply(values, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = person(<span class="string">"kevin"</span>);</span><br><span class="line"></span><br><span class="line">person1.sayName(); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">"daisy"</span>;</span><br><span class="line"></span><br><span class="line">person1.sayName(); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><p>所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。</p><p>与寄生构造函数模式有两点不同：</p><ul><li>新创建的实例方法不引用 this</li><li>不使用 new 操作符调用构造函数</li><li>稳妥对象最适合在一些安全的环境中。</li></ul><p>稳妥构造函数模式也跟工厂模式一样，无法识别对象所属类型。</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/15" target="_blank" rel="noopener">JavaScript 深入之创建对象的多种方式以及优缺点</a></p><h2 id="继承的多种方式和优缺点"><a href="#继承的多种方式和优缺点" class="headerlink" title="继承的多种方式和优缺点"></a>继承的多种方式和优缺点</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Yang'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myself = <span class="keyword">new</span> Child();</span><br><span class="line">myself.getName();  <span class="comment">// 'Yang'</span></span><br></pre></td></tr></table></figure><p>问题：</p><ul><li>引用类型的属性被所有实例共享</li><li>在创建 Child 的实例时，不能向Parent传参</li></ul><h3 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myself1 = <span class="keyword">new</span> Child(<span class="string">'Yang'</span>);</span><br><span class="line"><span class="keyword">var</span> myself2 = <span class="keyword">new</span> Child(<span class="string">'Wang'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myself1.name)  <span class="comment">// 'Yang'</span></span><br><span class="line"><span class="built_in">console</span>.log(myself2.name)  <span class="comment">// 'Wang'</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>避免了引用类型的属性被所有实例共享</li><li>可以在 Child 中向 Parent 传参</li></ul><p>缺点：</p><ul><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法</li></ul><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>原型链继承和经典继承双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'yang'</span>, <span class="number">27</span>);</span><br><span class="line">child1.colors.push(<span class="string">'white'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name);  <span class="comment">// "yang"</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age);  <span class="comment">// 27</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors);  <span class="comment">// ["red", "blue", "green", "white"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'ming'</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name);  <span class="comment">// "ming"</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age);  <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors);  <span class="comment">// ["red", "blue", "green"]</span></span><br><span class="line">child2.getName();  <span class="comment">// "ming"</span></span><br></pre></td></tr></table></figure><p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>就是 ES5 <code>[Object.create](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)</code> 的模拟实现，将传入的对象作为创建的对象的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</p><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="built_in">Object</span>.create(o);</span><br><span class="line">  clone.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>组合继承最大的缺点是会调用两次父构造函数。</p><ul><li>设置子类型实例的原型的时候：<code>Child.prototype = new Parent();</code></li><li>创建子类型实例的时候：<code>Parent.call(this, name);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototype</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(parent.prototype);</span><br><span class="line">  child.prototype.constructor = child;</span><br><span class="line">  child.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototype(Child, Parent);</span><br></pre></td></tr></table></figure><p>引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：</p><blockquote><p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p></blockquote><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/16" target="_blank" rel="noopener">JavaScript深入之继承的多种方式和优缺点</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要是讲述了创建对象、继承的多种方式及其各自的优缺点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://47.101.33.81/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://47.101.33.81/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>学习冴羽的 JS 深入系列·中篇</title>
    <link href="http://47.101.33.81/2019/11/27/js-series-2/"/>
    <id>http://47.101.33.81/2019/11/27/js-series-2/</id>
    <published>2019-11-27T13:03:24.000Z</published>
    <updated>2019-11-27T13:12:32.003Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要实现 call、apply、new、bind等实现思路</p></blockquote><a id="more"></a><h2 id="call-和-apply-的模拟实现"><a href="#call-和-apply-的模拟实现" class="headerlink" title="call 和 apply 的模拟实现"></a>call 和 apply 的模拟实现</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call()</code>在使用一个指定的 this 值和若干个指定的参数值的前提下，调用某个函数或方法。该方法的语法和作用与 apply() 方法类似，只有一个区别，就是 call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。</p><p>使用 call 方法调用函数并且指定上下文的 ‘this’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">foo.call(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>使用 call 方法调用父构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tao</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tao = <span class="keyword">new</span> Tao(<span class="string">"yangtao"</span>, <span class="number">27</span>, <span class="string">"Teacher"</span>);</span><br></pre></td></tr></table></figure><p>所以我们模拟的步骤可以分为：</p><ul><li>将函数设为对象的属性</li><li>执行该函数</li><li>删除该函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似于：</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo.bar(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">foo.fn = bar;</span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line">foo.fn();</span><br><span class="line"><span class="comment">// 第三步</span></span><br><span class="line"><span class="keyword">delete</span> foo.fn;</span><br></pre></td></tr></table></figure><p>第一版：绑定 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  context.fn();</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.mycall(foo); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下所示</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo.bar();</span><br></pre></td></tr></table></figure><p>第二版：给定参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context, name, age</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  context.fn();</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三版：传参为 null 和返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">//获取调用call的函数，用this可以获取</span></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = []; <span class="comment">// ["arguments[1]", "arguments[2]"]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把传给call的参数传递给了context.fn函数</span></span><br><span class="line">  <span class="comment">// context.fn(args.join(','));</span></span><br><span class="line">  <span class="comment">// context.fn(...args)</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第四版：考虑 context，以及 context.fn 的可能性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这一步如果不强制是 object 类型，可以省略</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> context != <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Arguments error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [],</span><br><span class="line">    reslut;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"fn"</span> <span class="keyword">in</span> context &amp;&amp; context.hasOwnProperty(<span class="string">"fn"</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> fn = context.fn;</span><br><span class="line">    <span class="keyword">var</span> fnFlag = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fnFlag) &#123;</span><br><span class="line">    context.fn = fn;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply()</code>同<code>call()</code>，只不过将多个参数值，以数组的形式传入而已。</p><p>用 apply 将数组添加到另一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push.apply(arr, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", 1, 2]</span></span><br></pre></td></tr></table></figure><p>使用 apply 和内置函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, nums); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, nums); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 写法：</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(...nums); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(...nums); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">var</span> reslut;</span><br><span class="line"></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    reslut = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">      args.push(<span class="string">"arr["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> reslut;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">JavaScript 深入之 call 和 apply 的模拟实现</a></p><h2 id="bind-的模拟实现"><a href="#bind-的模拟实现" class="headerlink" title="bind 的模拟实现"></a>bind 的模拟实现</h2><blockquote><p><code>bind()</code>方法会创建一个新函数。当这个新函数被调用，bind()第一个参数将作为它运行时的 this，之后的一系列参数将会在传递的实参前传入，作为它的参数。 — 来自于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">MDN</a></p></blockquote><p>创建绑定函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  getValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getV = obj.getValue;</span><br><span class="line">getV(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> getV2 = obj.getValue.bind(obj);</span><br><span class="line">getV2(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>配合 setTimeout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// setTimeout(this.msg, 1000);  // 1</span></span><br><span class="line">  setTimeout(<span class="keyword">this</span>.msg.bind(<span class="keyword">this</span>), <span class="number">1000</span>); <span class="comment">//2</span></span><br><span class="line">&#125;;</span><br><span class="line">Fn.prototype.msg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"value: "</span>, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myFn = <span class="keyword">new</span> Fn();</span><br><span class="line">myFn.getValue();</span><br></pre></td></tr></table></figure><p>由此我们可以首先得出 bind 函数的两个特点：</p><ul><li>返回一个函数</li><li>可以传入参数</li></ul><p>第一版：返回函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = foo.mybind(obj);</span><br><span class="line">bindFoo(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>第二版：传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 获取除了第一个参数的剩余参数</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里获取的是返回函数调用时传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = foo.mybind(obj, <span class="string">"yang"</span>);</span><br><span class="line">bindFoo(<span class="number">27</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// yang</span></span><br><span class="line"><span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>第三版：构造函数效果</p><p>当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">原文链接：[JavaScript 深入之 bind 的模拟实现](https://github.com/mqyqingfeng/Blog/issues/12)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## new 的模拟实现</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.habit = <span class="string">"Games"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Yang"</span>, <span class="string">"27"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// Yang</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.habit); <span class="comment">// Games</span></span><br><span class="line"></span><br><span class="line">person1.getName(); <span class="comment">// I am Yang</span></span><br></pre></td></tr></table></figure><p>由上可知，实例 person1 可以：</p><ul><li>访问到 Person 构造函数里的属性</li><li>访问到 Person.prototype 中的属性</li></ul><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener">JavaScript 深入之 new 的模拟实现</a></p><h2 id="类数组对象与-arguments"><a href="#类数组对象与-arguments" class="headerlink" title="类数组对象与 arguments"></a>类数组对象与 arguments</h2><p>类数组对象从读写、获取长度、遍历三个方面看，和数组貌似是一样的，但是无法直接使用数组的方法，需要借助 call 或 apply：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> likeArr = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">"a"</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">"b"</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">"c"</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(likeArr, <span class="number">0</span>); <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call(likeArr, <span class="string">"&amp;"</span>); <span class="comment">// "a&amp;b&amp;c"</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.map.call(likeArr, item =&gt; item.toUpperCase()); <span class="comment">// ["A", "B", "C"]</span></span><br></pre></td></tr></table></figure><h3 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(likeArr);</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">Array</span>.from(likeArr);</span><br><span class="line"><span class="comment">// apply</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.concat.apply([], likeArr);</span><br><span class="line"><span class="comment">// splice，会改变 linkeArr</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.splice.call(likeArr, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><p><code>Arguments</code> 对象只定义在函数体中，包括了函数的参数和其他属性。在函数体中，arguments 指代该函数的 Arguments 对象。</p><p>Arguments 对象的 length 属性，表示实参的长度。</p><p>Arguments 对象的 callee 属性，通过它可以调用函数自身。</p><p>将参数从一个函数传递到另一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 apply 将 foo 的参数传递给 bar</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  bar.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>使用 ES6 的<code>...</code>运算符，我们可以轻松转成数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">...arguments</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>arguments 的应用其实很多，如果要总结这些场景的话，暂时能想到的包括：</p><ul><li>参数不定长</li><li>函数柯里化</li><li>递归调用</li><li>函数重载</li></ul><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/14" target="_blank" rel="noopener">JavaScript 深入之类数组对象与 arguments</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要实现 call、apply、new、bind等实现思路&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://47.101.33.81/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://47.101.33.81/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>学习冴羽的 JS 深入系列·上篇</title>
    <link href="http://47.101.33.81/2019/11/27/js-series-1/"/>
    <id>http://47.101.33.81/2019/11/27/js-series-1/</id>
    <published>2019-11-27T12:59:31.000Z</published>
    <updated>2019-11-27T13:16:02.765Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要讲述什么是原型，什么是原型链，以及分别总结执行上下文的三个重要属性：变量对象、作用域链、this，还有闭包等难以理解的知识点。</p></blockquote><a id="more"></a><h2 id="从原型到原型链"><a href="#从原型到原型链" class="headerlink" title="从原型到原型链"></a>从原型到原型链</h2><h3 id="图示总结"><a href="#图示总结" class="headerlink" title="图示总结"></a>图示总结</h3><p><code>prototype</code>：每一个函数都有一个<code>prototype</code>属性，该属性指向了一个对象，此对象为调用该函数而创建的实例的原型</p><p><img src="https://ae01.alicdn.com/kf/Hacfcf286c7a7419db3e4c0932fb535923.png" alt="构造函数和实例原型的关系图"></p><p><code>__proto__</code>：每一个对象（除 null）都具有一个属性：<code>__proto__</code>，这个属性指向该对象的原型</p><p><img src="https://ae01.alicdn.com/kf/H0167f64ea5a14d00977d7347f3771ce7T.png" alt="实例与实例原型的关系图"></p><p><code>constructor</code>：每个原型都有一个<code>constructor</code>属性指向关联的构造函数</p><p><img src="https://ae01.alicdn.com/kf/Hb2d428716f6341b58ac36eefd3ab7398b.png" alt="constructor"></p><p><code>Object</code>：原型对象是通过 <code>Object</code> 构造函数生成的，最后<code>Object.prototype.__proto__ = null</code></p><p><img src="https://ae01.alicdn.com/kf/H162bf41c88784952a445c19c5ce3159e5.png" alt="原型链示意图"></p><p>原型链：由相互关联的原型(<strong>proto</strong>)组成的链状结构就是原型链，即图中蓝色的这条线</p><p><img src="https://ae01.alicdn.com/kf/H46dd0d5cd87243f4beb2d4c3e974a1e5K.png" alt="原型链"></p><h3 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h3><p>每个函数都有一个 prototype 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"Jake"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name; <span class="comment">// 'Jake'</span></span><br><span class="line">person2.name; <span class="comment">// 'Jake'</span></span><br></pre></td></tr></table></figure><p>每一个 JavaScript 对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p><p>构造函数的 prototype 属性，指向了调用该构造函数而创建的实例的原型 person.<strong>proto</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.__proto__ === Person.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>每个原型都有一个 constructor 属性指向关联的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor === Person; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>原型对象就是通过 Object 构造函数生成的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Object.prototype.<strong>proto</strong> 的值为 null，即 Object.prototype 没有原型，终止查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__; <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript 深入之从原型到原型链</a></p><h2 id="词法作用域和动态作用域"><a href="#词法作用域和动态作用域" class="headerlink" title="词法作用域和动态作用域"></a>词法作用域和动态作用域</h2><p>javascript 采用的是<code>词法作用域(lexical scoping)</code>，函数的作用域是在函数定义的时候就决定了，而不是调用的时候才决定</p><ul><li>词法作用域，即静态作用域，函数的作用域在函数定义的时候就决定了</li><li>动态作用域，函数的作用域是在函数调用的时候才决定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope(); <span class="comment">// "local scope"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()(); <span class="comment">// "local scope"</span></span><br></pre></td></tr></table></figure><p>因为 JavaScript 采用的是词法作用域，函数的作用域基于函数创建的位置。</p><p>而引用《JavaScript 权威指南》的回答就是：</p><p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript 深入之词法作用域和动态作用域</a></p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>JavaScript 的可执行代码(executable code)的类型有哪些：</p><ul><li>全局代码</li><li>函数代码</li><li>eval 代码</li></ul><p>函数那么多，如何管理创建的那么多执行上下文呢？</p><p>所以 JavaScript 引擎创建了执行上下文栈（<code>Execution context stack，ECS</code>）来管理执行上下文。</p><p>当执行一个函数的时候，就会创建一个<code>执行上下文(execution context)</code>，并且压入<code>执行上下文栈(Execution context stack, ESC)</code></p><p>当函数执行完毕的时候，会将函数的<code>执行上下文栈</code>中弹出。</p><p>其实，这里就会联想到 <code>push pop 栈堆</code>(后进先出-LIFO)。</p><p>模拟执行上下文栈：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行上下文栈是一个数组 ECStack，整个应用程序结束的时候，才会被清空</span></span><br><span class="line">ECStack = [</span><br><span class="line">  <span class="comment">// 程序结束之前， ECStack 最底部永远有个 globalContext</span></span><br><span class="line">  globalContext <span class="comment">// 全局执行上下文</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>运行如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"fun3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fun3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fun2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1();</span><br></pre></td></tr></table></figure><p>伪代码模拟执行：(根据 push pop 原理，后进先出)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ECStack.push(<span class="xml"><span class="tag">&lt;<span class="name">fun1</span>&gt;</span> functionContext);  // 压入fun1上下文，发现了 fun2 被调用</span></span><br><span class="line">ECStack.push(&lt;fun2&gt; functionContext);  // 继续压入fun2上下文，发现了 fun3 被调用</span><br><span class="line">ECStack.push(&lt;fun3&gt; functionContext);  // 继续压入fun3上下文，并执行 fun3</span><br><span class="line">ECStack.pop();  // fun3 执行结束，并弹出</span><br><span class="line">ECStack.pop();  // fun2 执行结束，并弹出</span><br><span class="line">ECStack.pop();  // fun1 执行结束，并弹出</span><br><span class="line">// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">JavaScript 深入之执行上下文栈</a></p><h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>1、全局上下文的变量对象初始化：全局对象</p><p>2、函数上下文的变量对象初始化：只包括<code>Arguments</code>对象</p><p>3、进入执行上下文时：给变量对象添加形参、函数声明、变量声明等初始的属性值</p><p>4、代码执行阶段：再次修改变量对象的属性值</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>执行上下文过程可分为：进入执行上下文和代码执行（分析-执行）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  b = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>进入执行上下文过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="built_in">arguments</span>: &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="literal">undefined</span>,</span><br><span class="line">  c: reference <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  d: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行阶段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="built_in">arguments</span>: &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">3</span>,</span><br><span class="line">  c: reference <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  d: reference to FunctionExpression <span class="string">"d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：未进入执行阶段之前，<code>变量对象(VO)</code>中的属性都不能访问！但是进入执行阶段之后，<code>变量对象(VO)</code>转变为了<code>活动对象(AO)</code>，里面的属性都能被访问了，然后开始进行执行阶段的操作。它们其实都是同一个对象，只是处于执行上下文的不同生命周期。</p><p>最后，函数是“第一等公民”，记住这个，变量名称和函数名称相同的声明，优先执行函数声明。</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">JavaScript 深入之变量对象</a></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>下面让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。</p><h3 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h3><p>由上节内容可知：函数的作用域在函数定义的时候就决定了。</p><p>这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各自的 [[scope]]:</span></span><br><span class="line">foo.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br><span class="line">bar.[[scope]] = [</span><br><span class="line">  fooContext.AO   <span class="comment">// 保存父变量</span></span><br><span class="line">  globalContext.VO</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h3><p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。</p><p>这时候执行上下文的作用域链，我们命名为 Scope：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scope = [AO].concat([[Scope]]);</span><br></pre></td></tr></table></figure><p>至此，作用域链创建完毕。</p><h3 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h3><p>以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope2 = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="keyword">return</span> scope2;</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><p>执行过程如下：</p><p>1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscope.[[scope]] = [</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [checkscopeContext, globalContext];</span><br></pre></td></tr></table></figure><p>3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;，</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.第三步：将活动对象压入 checkscope 作用域链顶端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">  AO: &#123;</span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">      length: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    scope2: <span class="literal">undefined</span></span><br><span class="line">  &#125;,</span><br><span class="line">  Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">  AO: &#123;</span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">      length: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    scope2: <span class="string">"local scope"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [globalContext];</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener">JavaScript 深入之作用域链</a></p><h2 id="从-ECMAScript-规范解读-this"><a href="#从-ECMAScript-规范解读-this" class="headerlink" title="从 ECMAScript 规范解读 this"></a>从 ECMAScript 规范解读 this</h2><blockquote><p>作者曰：在写文章之初，我就面临着这些问题，最后还是放弃从多个情形下给大家讲解 this 指向的思路，而是追根溯源的从 ECMASciript 规范讲解 this 的指向，尽管从这个角度写起来和读起来都比较吃力，但是一旦多读几遍，明白原理，绝对会给你一个全新的视角看待 this 。</p></blockquote><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">JavaScript 深入之从 ECMAScript 规范解读 this</a></p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">JavaScript 深入之执行上下文</a></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是指那些能够访问自由变量的函数。</p><p>自由变量是指在函数中使用的，但既不是参数也不是函数的局部变量的变量。</p><p>那么，闭包 = 函数 + 函数能够访问的自由变量。</p><p>看这道刷题必刷，面试必考的闭包题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure><p>循环结束后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">data[<span class="number">1</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">data[<span class="number">2</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行<code>data[0]()，data[1]()，data[2]()</code>时，i=3,所以都打印 3</p><p>让我们改成闭包看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/9" target="_blank" rel="noopener">JavaScript 深入之闭包</a></p><h2 id="参数按值传递"><a href="#参数按值传递" class="headerlink" title="参数按值传递"></a>参数按值传递</h2><p>ECMAScript 中所有函数的参数都是按值传递的。 — 《JavaScript 高级程序设计-第三版》</p><p>即，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制给另一个变量一样。</p><p>但是通俗地理解，参数如果是基本类型是按值传递，参数如果是引用类型就按共享传递。</p><p>共享传递是指，在传递对象的时候，传递对象的引用的副本。</p><p>例子一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  v = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(value);</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>内存分布如下：</p><p>改变前：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td colspan="2" align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>value</td><br>    <td>1</td><br>    <td></td><br>    <td></td><br>  </tr><br>  <tr><br>    <td>v</td><br>    <td>1</td><br>    <td></td><br>    <td></td><br>  </tr><br></table><p>改变后：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td colspan="2" align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>value</td><br>    <td>1</td><br>    <td></td><br>    <td></td><br>  </tr><br>  <tr><br>    <td>v</td><br>    <td>2</td><br>    <td></td><br>    <td></td><br>  </tr><br></table><p>例子二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.value = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(o.value); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>内存分布如下：</p><p>改变前：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj，o</td><br>    <td>指针地址</td><br>    <td>{value: 1}</td><br>  </tr><br></table><p>改变后：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj，o</td><br>    <td>指针地址</td><br>    <td>{value: 2}</td><br>  </tr><br></table><p>例子三：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(o); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>内存分布如下：</p><p>改变前：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj，o</td><br>    <td>指针地址</td><br>    <td>{value: 1}</td><br>  </tr><br></table><p>改变后：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj</td><br>    <td>指针地址</td><br>    <td>{value: 1}</td><br>  </tr><br>  <tr><br>    <td>o</td><br>    <td>2</td><br>    <td></td><br>  </tr><br></table><p>以上解释来自：<a href="https://github.com/mqyqingfeng/Blog/issues/10#issuecomment-305645497" target="_blank" rel="noopener">sunsl516 commented</a> on 2 Jun 2017.</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/10" target="_blank" rel="noopener">JavaScript 深入之参数按值传递</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要讲述什么是原型，什么是原型链，以及分别总结执行上下文的三个重要属性：变量对象、作用域链、this，还有闭包等难以理解的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://47.101.33.81/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://47.101.33.81/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>常见的 web 攻击方式</title>
    <link href="http://47.101.33.81/2019/11/12/web-safety/"/>
    <id>http://47.101.33.81/2019/11/12/web-safety/</id>
    <published>2019-11-12T14:57:11.000Z</published>
    <updated>2019-11-13T06:26:49.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><blockquote><p>SQL 注入（SQLi）是一种注入攻击，，可以执行恶意 SQL 语句。它通过将任意 SQL 代码插入数据库查询，使攻击者能够完全控制 Web 应用程序后面的数据库服务器。</p></blockquote><a id="more"></a><p>犯罪分子可能会利用它来未经授权访问用户的敏感数据：客户信息，个人数据，商业机密，知识产权等。SQL 注入攻击是最古老，最流行，最危险的 Web 应用程序漏洞之一。</p><p><em>如何防止 SQL 注入攻击？</em></p><ul><li><p>不要使用动态 SQL<br>避免将用户提供的输入直接放入 SQL 语句中；最好使用准备好的语句和参数化查询，这样更安全。</p></li><li><p>不要将敏感数据保留在纯文本中<br>加密存储在数据库中的私有/机密数据；这样可以提供了另一级保护，以防攻击者成功地排出敏感数据。</p></li><li><p>限制数据库权限和特权<br>将数据库用户的功能设置为最低要求；这将限制攻击者在设法获取访问权限时可以执行的操作。</p></li><li><p>避免直接向用户显示数据库错误<br>攻击者可以使用这些错误消息来获取有关数据库的信息。</p></li><li><p>对访问数据库的 Web 应用程序使用 Web 应用程序防火墙（WAF）<br>这为面向 Web 的应用程序提供了保护，它可以帮助识别 SQL 注入尝试；根据设置，它还可以帮助防止 SQL 注入尝试到达应用程序（以及数据库）。</p></li><li><p>定期测试与数据库交互的 Web 应用程序<br>这样做可以帮助捕获可能允许 SQL 注入的新错误或回归。</p></li><li><p>将数据库更新为最新的可用修补程序</p></li></ul><p>原文：<a href="https://www.php.cn/mysql-tutorials-416424.html" target="_blank" rel="noopener">什么是 SQL 注入？如何防止 SQL 注入攻击？</a></p><p>比如 node 博客里使用 mysql.escape()来防止注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">  select username, realname from users where username=<span class="subst">$&#123;mysql.<span class="built_in">escape</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">    username</span></span></span><br><span class="line"><span class="string"><span class="subst">  )&#125;</span> and password=<span class="subst">$&#123;mysql.<span class="built_in">escape</span>(password)&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote><p>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本（CSS 代码、JavaScript 代码等），用户浏览网页时在用户浏览器中执行恶意脚本的一种攻击方式。如盗取用户 cookie，破坏页面结构、重定向到其他网站等。</p></blockquote><p>防范 XSS（永远不要相信用户的输入，必须对输入的数据作过滤处理）主要有两方面：</p><ul><li>消毒：对危险字符进行转义</li><li>HttpOnly：防范 XSS 攻击者窃取 Cookie 数据</li></ul><p>比如 node 博客里：新建文章的时候，标题里输入<code>&lt;script&gt;alert(&#39;我是一段js代码&#39;)&lt;/script&gt;</code>，然后点击提交，就会直接弹出来。</p><p>node 使用 xss：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = xss(blogData.title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// title</span></span><br><span class="line"><span class="comment">// &amp;lt;script&amp;gt;alert('我是一段js代码')&amp;lt;/script&amp;gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h3><blockquote><p>CSRF 攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。</p></blockquote><p>这里先说一下，http 是无状态的。服务器端和浏览器端的身份判断一般是通过 cookie。 后端会根据请求者传递的 cookie 信息判断请求者的身份。 攻击者的请求只要是带上了目标用户的 cookie，就可以合法请求。</p><ul><li><p>跨站：<br>请求来源很可能来自其他网站，也有可能来自本站</p></li><li><p>伪造：<br>请求并非用户的意愿</p></li><li><p>实现：<br>利用跨域标签 img iframe 等在 b 网站发送往 a 网站 get 请求，会带上 a 网站的 cookie，由此可见对于数据修改的请求最好不要用 get。</p><p>如果你在 a 站登录了，又访问了恶意网站 b，而 b 上面有一个恶意 img 标签的 get 请求，那你的数据可能就被删除了。 而跨域的 ajax 请求因为同源策略，不会带上 cookie，但是也能请求到结果，后端会处理这个请求，不过因为没有携带 cookie 信息，后端拿 不到登录状态，很多操作不会成功。跨域请求的结果也会发到客户端，不过由于同源策略的限制，浏览器读取不到这个响应结果。</p><p>伪造 form 表单提交。那么，post 请求就安全了吗？form 表单是跨域的。并且可以提交 post 请求。我们在 b 网站伪造一个 form 表单自动提交到 a 网站。</p></li><li><p>预防：<br>最好的办法是带 token，任何请求都带上 token，这样伪站可以发请求，但是无法拿到 token，后端收到的就不带 token 就可以判定非法了。</p></li></ul><p>原文：<a href="https://blog.csdn.net/liusaint1992/article/details/80865350" target="_blank" rel="noopener">常见的 web 攻击方式及预防</a></p><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><ul><li>文档：<a href="nodejs.cn/api/crypto.html">crypto（加密）</a></li></ul><p>crypto 模块提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">"crypto"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="keyword">const</span> hash = crypto</span><br><span class="line">  .createHmac(<span class="string">"sha256"</span>, secret)</span><br><span class="line">  .update(<span class="string">"I love cupcakes"</span>)</span><br><span class="line">  .digest(<span class="string">"hex"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash);</span><br><span class="line"><span class="comment">// 打印:</span></span><br><span class="line"><span class="comment">//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e</span></span><br></pre></td></tr></table></figure><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>md5：不是一种加密算法，是用来做文件校验的</p><p>作用：让大容量信息在数字签名软件签署私人秘钥前被”压缩”成一种保密格式，也就是把一个任意长度的字节串变换成一定长度的十六进制数字串（32个字符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">'WJiol_8776#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// md5 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHash(<span class="string">'md5'</span>).update(content).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genPassword</span>(<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5(<span class="string">`password=<span class="subst">$&#123;password&#125;</span>&amp;key=<span class="subst">$&#123;SECRET_KEY&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(genPassword(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment">// 4d4994bde299f6168c65f24c852897b7</span></span><br></pre></td></tr></table></figure><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>进一步提升MD5加密安全性：是一个”秘钥”，对明文进行加密，并做”两次散列”，但使用它得到的还是32个字符</p><p>利用哈希算法，以一个秘钥和一个信息为输入，生成一个消息摘要作为输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">'WJiol_8776#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hmac 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hmac</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHmac(<span class="string">'md5'</span>, SECRET_KEY).update(content).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hamc: '</span>, hmac(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment">// 7d37b577bcd2a492820846e475b933f9</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://cloud.tencent.com/developer/information/sql%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">sql 攻击</a></li><li><a href="https://cloud.tencent.com/developer/article/1455178" target="_blank" rel="noopener">SQL 注入和 XSS 攻击</a></li><li><a href="https://www.php.cn/mysql-tutorials-416424.html" target="_blank" rel="noopener">什么是 SQL 注入？如何防止 SQL 注入攻击？</a></li><li><a href="https://cloud.tencent.com/developer/article/1198977" target="_blank" rel="noopener">什么是 XSS 攻击？什么是 SQL 注入攻击？什么是 CSRF 攻击？</a></li><li><a href="https://blog.csdn.net/qq_41033290/article/details/91381962" target="_blank" rel="noopener">如何预防 SQL 注入和 XSS 攻击</a> - 代码讲解更直观</li><li><a href="http://www.sosout.com/2018/09/05/cryptojs-tutorial.html" target="_blank" rel="noopener">前端加密 JS 库–CryptoJS 使用指南 </a></li><li><a href="https://www.jianshu.com/p/92195252c2e0" target="_blank" rel="noopener">nodeJS：MD5加密</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SQL-注入&quot;&gt;&lt;a href=&quot;#SQL-注入&quot; class=&quot;headerlink&quot; title=&quot;SQL 注入&quot;&gt;&lt;/a&gt;SQL 注入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;SQL 注入（SQLi）是一种注入攻击，，可以执行恶意 SQL 语句。它通过将任意 SQL 代码插入数据库查询，使攻击者能够完全控制 Web 应用程序后面的数据库服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://47.101.33.81/categories/web/"/>
    
    
      <category term="web" scheme="http://47.101.33.81/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>当复制一个对象的副本所导致的“Object大案”</title>
    <link href="http://47.101.33.81/2019/10/05/js-object/"/>
    <id>http://47.101.33.81/2019/10/05/js-object/</id>
    <published>2019-10-05T01:30:42.000Z</published>
    <updated>2019-11-11T07:46:05.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用 forEach 来复制一个对象的副本<br><a id="more"></a></p></blockquote><h2 id="用-forEach-来复制一个对象的副本"><a href="#用-forEach-来复制一个对象的副本" class="headerlink" title="用 forEach 来复制一个对象的副本"></a>用 forEach 来复制一个对象的副本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象复制函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyObj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> copyObj2 = copy(copyObj1);</span><br><span class="line"><span class="built_in">console</span>.log(copyObj2); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj2 === copyObj1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><blockquote><p><code>Object.create(proto[, propertiesObject])</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></p></blockquote><h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h2><h2 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h2><h2 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h2><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__</span></span><br><span class="line">  <span class="comment">// Object.getPrototypeOf(object)方法返回指定对象的原型（内部[[Prototype]]属性的值</span></span><br><span class="line">  <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">  <span class="comment">// Object.getOwnPropertyNames(obj)方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组</span></span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Object.getOwnPropertyDescriptor(obj, prop)方法返回指定对象上一个自有属性对应的属性描述符。</span></span><br><span class="line">    <span class="comment">// （自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</span></span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="comment">// Object.defineProperty(obj, prop, descriptor)方法会直接在一个对象上定义一个新属性，</span></span><br><span class="line">    <span class="comment">// 或者修改一个对象的现有属性， 并返回这个对象</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">Array.prototype.forEach() 是如何使用 ECMAScript 5 Object.* 元属性（meta property ）函数工作</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">Array.prototype.some()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">Array.prototype.every()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object.getOwnPropertyDescriptor()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noopener">Object.getOwnPropertyNames()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf" target="_blank" rel="noopener">Object.getPrototypeOf()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用 forEach 来复制一个对象的副本&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://47.101.33.81/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://47.101.33.81/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git 提交的正确姿势：Commit message 编写指南</title>
    <link href="http://47.101.33.81/2019/09/26/git-commit/"/>
    <id>http://47.101.33.81/2019/09/26/git-commit/</id>
    <published>2019-09-26T10:12:30.000Z</published>
    <updated>2019-11-13T03:57:43.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）</p><ul><li>feat：新功能（feature）</li><li>fix：修补 bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动<a id="more"></a></li></ul><h3 id="提交信息规范"><a href="#提交信息规范" class="headerlink" title="提交信息规范"></a>提交信息规范</h3><p>我们对项目的 git 提交信息格式进行统一格式约定，每条提交信息由 <code>type</code>+<code>subject</code> 组成，这将提升项目日志的可读性。</p><ul><li><code>type</code> 用于表述此次提交信息的意义，首写字母大写，包括但不局限于如下类型：<ul><li><code>Build</code>：基础构建系统或依赖库的变化</li><li><code>Ci</code>：CI 构建系统及其脚本变化</li><li><code>Docs</code>：文档内容变化</li><li><code>Feat</code>：新功能</li><li><code>Fix</code>：Bug 修复</li><li><code>Perf</code>：性能优化</li><li><code>Refactor</code>：重构（即不是新增功能，也不是修改 Bug 的代码变动）</li><li><code>Style</code>：格式（不影响代码运行的变动）</li><li><code>Revert</code>：代码回滚</li><li><code>Release</code>：版本发布</li></ul></li><li><code>subject</code> 用于简要描述修改变更的内容，如 <code>Update code highlighting in readme.md</code>。<ul><li>句尾不要使用符号。</li><li>使用现在时、祈使句语气。</li></ul></li></ul><h3 id="标签规范"><a href="#标签规范" class="headerlink" title="标签规范"></a>标签规范</h3><p>为了方便维护人员和用户能够快速找到他们想要查看的问题，我们使用“标签”功能对 Pull requests 和 Issues 进行分类。</p><p>如果您不确定某个标签的含义，或者不知道将哪些标签应用于 PR 或 issue，千万别错过这个。</p><p>Issue 的标签：</p><ul><li>类型<ul><li><code>Bug</code>: 检测到需要进行确认的 Bug</li><li><code>Feature Request</code>: 提出了新功能请求的 Issue</li><li><code>Question</code>: 提出疑问的 Issue</li><li><code>Meta</code>: 表明使用条款变更的 Issue</li><li><code>Support</code>: 被标记为支持请求的 Issue</li><li><code>Polls</code>: 发起投票的 Issue</li></ul></li><li>结果<ul><li><code>Duplicate</code>: 重复提及的 Issue</li><li><code>Irrelevant</code>: 与 NexT 主题无关的 Issue</li><li><code>Expected Behavior</code>: 与预期行为相符的 Issue</li><li><code>Need More Info</code>: 需要更多信息的 Issue</li><li><code>Need Verify</code>: 需要开发人员或用户确认 Bug 或解决方法的 Issue</li><li><code>Verified</code>: 已经被确认的 Issue</li><li><code>Can&#39;t Reproduce</code>: 无法复现的 Issue</li><li><code>Solved</code>: 已经解决的 Issue</li><li><code>Stale</code>: 由于长期无人回应被封存的 Issue</li></ul></li></ul><p>Pull Request 的标签：</p><ul><li><code>Breaking Change</code>: 产生重大变动的 Pull Request</li><li><code>Bug Fix</code>: 修复相关 Bug 的 Pull Request</li><li><code>New Feature</code>: 添加了新功能的 Pull Request</li><li><code>Feature</code>: 为现有功能提供选项或加成的 Pull Request</li><li><code>i18n</code>: 更新了翻译的 Pull Request</li><li><code>Work in Progress</code>: 仍在进行改动和完善的 Pull Request</li><li><code>Skip Release</code>: 无需在 Release Note 中展现的 Pull Request</li></ul><p>两者兼有：</p><ul><li><code>Roadmap</code>: 与 NexT 主题发展相关的 Issue 或者 Pull Request</li><li><code>Help Wanted</code>: 需要帮助的 Issue 或者 Pull Request</li><li><code>Discussion</code>: 需要进行讨论的 Issue 或者 Pull Request</li><li><code>Improvement</code>: 需要改进的 Issue 或者改进了 NexT 主题的 Pull Request</li><li><code>Performance</code>: 提出性能问题的 Issue 或者提高了 NexT 主题性能的 Pull Request</li><li><code>Hexo</code>: 与 Hexo 和 Hexo 插件相关的 Issue 或者 Pull Request</li><li><code>Template Engine</code>: 与模版引擎相关的 Issue 或者 Pull Request</li><li><code>CSS</code>: 与 NexT 主题 CSS 文件相关的 Issue 或者 Pull Request</li><li><code>Fonts</code>: 与 NexT 主题字体相关的 Issue 或者 Pull Request</li><li><code>PJAX</code>: 与 PJAX 相关的 Issue 或者 Pull Request</li><li><code>3rd Party Plugin</code>: 与第三方插件和服务相关的 Issue 或者 Pull Request</li><li><code>Docs</code>: 与文档说明相关的 Issue 或者 Pull Request</li><li><code>Configurations</code>: 与 NexT 主题设置相关的 Issue 或者 Pull Request</li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.cnblogs.com/daysme/p/7722474.html" target="_blank" rel="noopener">Git 提交的正确姿势：Commit message 编写指南</a></li><li><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/CONTRIBUTING.md" target="_blank" rel="noopener">Next 主题贡献规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Header&quot;&gt;&lt;a href=&quot;#Header&quot; class=&quot;headerlink&quot; title=&quot;Header&quot;&gt;&lt;/a&gt;Header&lt;/h2&gt;&lt;p&gt;Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feat：新功能（feature）&lt;/li&gt;
&lt;li&gt;fix：修补 bug&lt;/li&gt;
&lt;li&gt;docs：文档（documentation）&lt;/li&gt;
&lt;li&gt;style： 格式（不影响代码运行的变动）&lt;/li&gt;
&lt;li&gt;refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）&lt;/li&gt;
&lt;li&gt;test：增加测试&lt;/li&gt;
&lt;li&gt;chore：构建过程或辅助工具的变动
    
    </summary>
    
      <category term="开发工具" scheme="http://47.101.33.81/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://47.101.33.81/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://47.101.33.81/2019/09/06/web-speed/"/>
    <id>http://47.101.33.81/2019/09/06/web-speed/</id>
    <published>2019-09-06T11:21:19.000Z</published>
    <updated>2019-11-12T14:57:40.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络传输性能优化"><a href="#网络传输性能优化" class="headerlink" title="网络传输性能优化"></a>网络传输性能优化</h2><blockquote><p>重定向 → 拉取缓存 →DNS 查询 → 建立 TCP 链接 → 发起请求 → 接收响应 → 处理 HTML 元素 → 元素加载完成</p></blockquote><a id="more"></a><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>缓存一般分为强缓存和协商缓存，主要区别是：使用本地缓存的时候，是否需要向服务器验证本地缓存是否依旧有效。</p></blockquote><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>主要通过 http 请求头中的 Cache-Control 和 Expire 两个字段控制</p><p>一般，我们会设置 Cache-Control 的值为“public, max-age=xxx”，表示在 xxx 秒内再次访问该资源，均使用本地的缓存，不再向服务器发起请求。</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>每次都向服务器验证一下缓存的有效性</p><h4 id="前端缓存方案"><a href="#前端缓存方案" class="headerlink" title="前端缓存方案"></a>前端缓存方案</h4><ul><li>HTML：使用协商缓存</li><li>CSS JS Image：使用强缓存，文件名带上 hash 值</li></ul><p>浏览器默认的缓存是放在内存内的，但我们知道，内存里的缓存会因为进程的结束或者说浏览器的关闭而被清除，而存在硬盘里的缓存才能够被长期保留下去。很多时候，我们在 network 面板中各请求的 size 项里，会看到两种不同的状态：from memory cache 和 from disk cache，前者指缓存来自内存，后者指缓存来自硬盘。而控制缓存存放位置的，不是别人，就是我们在服务器上设置的 Etag 字段。在浏览器接收到服务器响应后，会检测响应头部（Header），如果有 Etag 字段，那么浏览器就会将本次缓存写入硬盘中。</p><h3 id="资源打包压缩"><a href="#资源打包压缩" class="headerlink" title="资源打包压缩"></a>资源打包压缩</h3><blockquote><p>网络性能优化措施归结为三大方面：减少请求数、减小请求资源体积、提升网络传输速率</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp grunt webpack parcel</span><br></pre></td></tr></table></figure><h3 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3><ul><li>不要在 HTML 里缩放图像</li><li>使用雪碧图（CSS Sprite）- <code>webpack-spritesmith</code></li><li>使用字体图标（iconfont）- icomoon</li><li>使用 WebP - 图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间</li></ul><h3 id="网络传输性能检测工具"><a href="#网络传输性能检测工具" class="headerlink" title="网络传输性能检测工具"></a>网络传输性能检测工具</h3><ul><li><code>Page Speed | PageSpeed Insights</code></li></ul><h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><h2 id="页面渲染性能优化"><a href="#页面渲染性能优化" class="headerlink" title="页面渲染性能优化"></a>页面渲染性能优化</h2><h3 id="浏览器渲染过程（webkit）"><a href="#浏览器渲染过程（webkit）" class="headerlink" title="浏览器渲染过程（webkit）"></a>浏览器渲染过程（webkit）</h3><ul><li>《Webkit 技术内幕》</li></ul><blockquote><p>浏览器的解释器，是包括在渲染引擎内的，我们常说的 Chrome（现在使用的是 Blink 引擎）和 Safari 使用的 Webkit 引擎，Firefox 使用的 Gecko 引擎，指的就是渲染引擎。而在渲染引擎内，还包括着我们的 HTML 解释器（渲染时用于构造 DOM 树）、CSS 解释器（渲染时用于合成 CSS 规则）还有我们的 JS 解释器。不过后来，由于 JS 的使用越来越重要，工作越来越繁杂，所以 JS 解释器也渐渐独立出来，成为了单独的 JS 引擎，就像众所周知的 V8 引擎，我们经常接触的 Node.js 也是用的它。</p></blockquote><h3 id="DOM-渲染层与-GPU-硬件加速"><a href="#DOM-渲染层与-GPU-硬件加速" class="headerlink" title="DOM 渲染层与 GPU 硬件加速"></a>DOM 渲染层与 GPU 硬件加速</h3><ul><li>① 浏览器会先获取 DOM 树并依据样式将其分割成多个独立的渲染层</li><li>②CPU 将每个层绘制进绘图中</li><li>③ 将位图作为纹理上传至 GPU（显卡）绘制</li><li>④GPU 将所有的渲染层缓存（如果下次上传的渲染层没有发生变化，GPU 就不需要对其进行重绘）并复合多个渲染层最终形成我们的图像</li></ul><h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><p>不论是重排还是重绘，都会阻塞浏览器。要提高网页性能，就要降低重排和重绘的频率和成本，近可能少地触发重新渲染。</p><p>重排是由 CPU 处理的，而重绘是由 GPU 处理的，CPU 的处理效率远不及 GPU，并且重排一定会引发重绘，而重绘不一定会引发重排。所以在性能优化工作中，我们更应当着重减少重排的发生。</p><h4 id="重排-reflow"><a href="#重排-reflow" class="headerlink" title="重排 reflow"></a>重排 reflow</h4><p>渲染层内的元素布局发生修改，都会导致页面重写排列。</p><p>比如：窗口的尺寸发生变化、删除或添加 DOM 元素；修改了影响元素盒子大小的 css 属性（width height padding…）</p><h4 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘 repaint"></a>重绘 repaint</h4><p>绘制，所有对元素的视觉表现属性的修改，都会引起重绘。</p><h3 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h3><ul><li>CSS 属性读写分离</li><li>通过切换 class 或者 style.csstext 属性去批量操作元素样式</li><li>DOM 元素离线更新</li><li>将没用的元素设为不可见：visibility: hidden，减少重绘的压力</li><li>压缩 DOM 的深度：少用 DOM 完成页面样式，多使用伪元素或者 box-shadow 取代。</li><li>图片在渲染前指定大小：因为 img 元素是内联元素，所以在加载图片后会改变宽高，严重的情况会导致整个页面重排，所以最好在渲染前就指定其大小，或者让其脱离文档流。</li><li>对页面中可能发生大量重排重绘的元素单独触发渲染层，使用 GPU 分担 CPU 压力。（慎重）</li></ul><h2 id="JS-阻塞性能"><a href="#JS-阻塞性能" class="headerlink" title="JS 阻塞性能"></a>JS 阻塞性能</h2><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="Node-js-处理-IO-密集型请求"><a href="#Node-js-处理-IO-密集型请求" class="headerlink" title="Node.js 处理 IO 密集型请求"></a>Node.js 处理 IO 密集型请求</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513044&amp;idx=1&amp;sn=9b8526e9d641b970ee5ddac02dae3c57&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Node.js : 我只需要一个店小二</a></li></ul><p>node 的核心是事件驱动，通过 loop 去异步处理用户请求，相对于传统的后端服务，他们都是将用户的每个请求分配到异步队列中进行处理。</p><p>事件驱动的优势：在高并发 IO 时，不会造成堵塞。</p><p>Frond-End(Browser) <- nodejs="" -=""> Back-End(Java Server)</-></p><h3 id="pm2-实现-Node-js“多线程”"><a href="#pm2-实现-Node-js“多线程”" class="headerlink" title="pm2 实现 Node.js“多线程”"></a>pm2 实现 Node.js“多线程”</h3><ul><li><a href="https://www.zhihu.com/question/19653241/answer/15993549" target="_blank" rel="noopener">使用 Node.js 的优势和劣势都有哪些？</a></li></ul><p>pm2。这是它的官网：pm2.keymetrics.io/</p><p>它是一款 node.js 进程管理器，具体的功能，就是能在你的计算机里的每一个内核都启动一个 node.js 服务。</p><p>也就是说如果你的电脑或者服务器是多核处理器（现在也少见单核了吧），它就能启动多个 node.js 服务，并且它能够自动控制负载均衡，会自动将用户的请求分发至压力小的服务进程上处理。</p><h3 id="nginx-搭建反向代理"><a href="#nginx-搭建反向代理" class="headerlink" title="nginx 搭建反向代理"></a>nginx 搭建反向代理</h3><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://juejin.im/post/5c136bd16fb9a049d37efc47" target="_blank" rel="noopener">前端缓存最佳实践</a></li><li><a href="https://juejin.im/post/5b6fa8c86fb9a0099910ac91" target="_blank" rel="noopener">网站性能优化实战——从 12.67s 到 1.06s 的故事</a></li><li><a href="https://juejin.im/post/5ae081aaf265da0b767d263a" target="_blank" rel="noopener">你应该知道的前端——缓存</a></li><li>《大型网站性能监测、分析与优化》</li><li><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">【原】雅虎前端优化的 35 条军规</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;网络传输性能优化&quot;&gt;&lt;a href=&quot;#网络传输性能优化&quot; class=&quot;headerlink&quot; title=&quot;网络传输性能优化&quot;&gt;&lt;/a&gt;网络传输性能优化&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;重定向 → 拉取缓存 →DNS 查询 → 建立 TCP 链接 → 发起请求 → 接收响应 → 处理 HTML 元素 → 元素加载完成&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="web" scheme="http://47.101.33.81/categories/web/"/>
    
    
      <category term="web" scheme="http://47.101.33.81/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>MacOS如何使用 tree 生成目录结构</title>
    <link href="http://47.101.33.81/2019/09/02/tool-tree/"/>
    <id>http://47.101.33.81/2019/09/02/tool-tree/</id>
    <published>2019-09-02T07:01:37.000Z</published>
    <updated>2019-11-11T07:09:18.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h2><p><a href="https://brew.sh/" target="_blank" rel="noopener">homebrew官网</a></p><p><a href="[https://www.jianshu.com/p/de6f1d2d37bf](https://www.jianshu.com/p/de6f1d2d37bf">Homebrew介绍和使用</a></p><a id="more"></a><p>根据官网的方法安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p><p>比如我的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==&gt; This script will install:</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/brew</span><br><span class="line">/usr/<span class="built_in">local</span>/share/doc/homebrew</span><br><span class="line">/usr/<span class="built_in">local</span>/share/man/man1/brew.1</span><br><span class="line">/usr/<span class="built_in">local</span>/share/zsh/site-functions/_brew</span><br><span class="line">/usr/<span class="built_in">local</span>/etc/bash_completion.d/brew</span><br><span class="line">/usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line"></span><br><span class="line">Press RETURN to <span class="built_in">continue</span> or any other key to abort</span><br></pre></td></tr></table></figure></p><p>一路按照提示操作即可，不出意外的话，就安装成功了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew -v</span><br><span class="line">Homebrew 2.1.9</span><br><span class="line">Homebrew/homebrew-core (git revision c8ff; last commit 2019-08-01)</span><br><span class="line">Homebrew/homebrew-cask (git revision 04bff; last commit 2019-08-02)</span><br></pre></td></tr></table></figure></p><h2 id="Tree-安装"><a href="#Tree-安装" class="headerlink" title="Tree 安装"></a>Tree 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><p>常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">brew install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件夹下的所有文件</span></span><br><span class="line">tree -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示文件夹</span></span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示项目的层级，如三级</span></span><br><span class="line">tree -L 3  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤，如除node_modules文件</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">tree &gt; tree.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># Help</span></span><br><span class="line">tree --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p>最后，我的输出：<code>tree -I &quot;node_modules&quot; &gt; tree.md</code><br>查看 <code>tree.md</code> 的内容如下：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   ├── font-awesome</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── FontAwesome.otf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.eot</span><br><span class="line">│   │   │   ├── fontawesome-webfont.svg</span><br><span class="line">│   │   │   ├── fontawesome-webfont.ttf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.woff</span><br><span class="line">│   │   │   └── fontawesome-webfont.woff2</span><br><span class="line">│   │   └── scss</span><br><span class="line">│   │       ├── _animated.scss</span><br><span class="line">│   │       ├── _bordered-pulled.scss</span><br><span class="line">│   │       ├── _core.scss</span><br><span class="line">│   │       ├── _fixed-width.scss</span><br><span class="line">│   │       ├── _icons.scss</span><br><span class="line">│   │       ├── _larger.scss</span><br><span class="line">│   │       ├── _list.scss</span><br><span class="line">│   │       ├── _mixins.scss</span><br><span class="line">│   │       ├── _path.scss</span><br><span class="line">│   │       ├── _rotated-flipped.scss</span><br><span class="line">│   │       ├── _screen-reader.scss</span><br><span class="line">│   │       ├── _stacked.scss</span><br><span class="line">│   │       ├── _variables.scss</span><br><span class="line">│   │       └── font-awesome.scss</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── index.jsx</span><br><span class="line">│   ├── react.png</span><br><span class="line">│   └── style.css</span><br><span class="line">├── tree.md</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line">5 directories, 31 files</span><br></pre></td></tr></table></figure></p><h2 id="tree命令行参数"><a href="#tree命令行参数" class="headerlink" title="tree命令行参数"></a>tree命令行参数</h2><table><thead><tr><th>命令行参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件和目录。</td></tr><tr><td>-A</td><td>使用ASNI绘图字符显示树状图而非以ASCII字符组合。</td></tr><tr><td>-C</td><td>在文件和目录清单加上色彩，便于区分各种类型。</td></tr><tr><td>-d</td><td>显示目录名称而非内容。</td></tr><tr><td>-D</td><td>列出文件或目录的更改时间。</td></tr><tr><td>-f</td><td>在每个文件或目录之前，显示完整的相对路径名称。</td></tr><tr><td>-F</td><td>在末尾追加描述性字符，如 ls -F</td></tr><tr><td>-g</td><td>列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</td></tr><tr><td>-i</td><td>不以阶梯状列出文件或目录名称。</td></tr><tr><td>-I</td><td>不显示符合范本样式的文件或目录名称。</td></tr><tr><td>-l</td><td>如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</td></tr><tr><td>-n</td><td>不在文件和目录清单加上色彩。</td></tr><tr><td>-N</td><td>直接列出文件和目录名称，包括控制字符。</td></tr><tr><td>-p</td><td>列出权限标示。</td></tr><tr><td>-P</td><td>只显示符合范本样式的文件或目录名称。</td></tr><tr><td>-q</td><td>用”?”号取代控制字符，列出文件和目录名称。</td></tr><tr><td>-s</td><td>列出文件或目录大小。</td></tr><tr><td>-t</td><td>用文件和目录的更改时间排序。</td></tr><tr><td>-u</td><td>列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</td></tr><tr><td>-x</td><td>将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/ayseeing/p/4097066.html" target="_blank" rel="noopener">mac tree命令</a></li><li><a href="https://blog.csdn.net/qq673318522/article/details/53713903" target="_blank" rel="noopener">Mac使用tree生成目录结构</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Homebrew安装&quot;&gt;&lt;a href=&quot;#Homebrew安装&quot; class=&quot;headerlink&quot; title=&quot;Homebrew安装&quot;&gt;&lt;/a&gt;Homebrew安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;homebrew官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;[https://www.jianshu.com/p/de6f1d2d37bf](https://www.jianshu.com/p/de6f1d2d37bf&quot;&gt;Homebrew介绍和使用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://47.101.33.81/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="MacOS" scheme="http://47.101.33.81/tags/MacOS/"/>
    
      <category term="终端" scheme="http://47.101.33.81/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>学习 React 的一些记录日志</title>
    <link href="http://47.101.33.81/2019/08/24/react-doc/"/>
    <id>http://47.101.33.81/2019/08/24/react-doc/</id>
    <published>2019-08-24T10:15:52.000Z</published>
    <updated>2019-11-11T07:34:04.745Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习 React 的一些记录日志<br><a id="more"></a></p></blockquote><h2 id="Video-Course"><a href="#Video-Course" class="headerlink" title="Video Course"></a>Video Course</h2><h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><ul><li><a href="https://www.imooc.com/learn/1045" target="_blank" rel="noopener">基于实例的 react16 傻瓜课程</a> — 用一系列有趣的、简洁明快的实例由浅入深的阐述了 React 的特色，概念和基本使用</li><li><a href="https://www.imooc.com/learn/1023" target="_blank" rel="noopener">react16.4 快速上手</a> — 通过 Todolist 功能的实现，给大家讲解了 React 组件间的通信方式</li></ul><h3 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h3><ul><li><a href="https://www.imooc.com/learn/1061" target="_blank" rel="noopener">react 16 实现订单列表及评价功能</a> — 介绍了从项目创建、到组件划分、再到组件及页面逻辑实现的开发流程</li><li><a href="https://www.imooc.com/learn/944" target="_blank" rel="noopener">react 组件</a> — 比较详细地讲解组件和生命周期</li></ul><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><ul><li><a href="https://www.imooc.com/learn/953" target="_blank" rel="noopener">react响应用户输入</a> — 学习如何让数据逻辑与 UI 的结合使用、react 的事件处理机制以及 react 对 DOM 模型的操作</li><li><a href="https://www.imooc.com/learn/971" target="_blank" rel="noopener">react知识点综合运用实例</a> — 综合实例操作</li><li><a href="https://www.imooc.com/learn/1075" target="_blank" rel="noopener">react高级教程之高阶组件</a> — 高阶组件的应用：代理和继承</li></ul><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><ul><li><a href="https://zh-hans.reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React 官方文档</a></li><li><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design of React</a> — antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</li><li><a href="https://pro.ant.design/docs/getting-started-cn" target="_blank" rel="noopener">Ant Design Pro</a> — 是一个企业级中后台前端/设计解决方案</li><li><a href="https://mobile.ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design Mobile of React</a> — 是 Ant Design 的移动规范的 React 实现，服务于蚂蚁及口碑无线业务</li><li><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack 官方文档</a></li><li><a href="https://typescript.bootcss.com/tutorials/react-&amp;-webpack.html" target="_blank" rel="noopener">React 与 webpack</a></li></ul><h2 id="Learning-Materials"><a href="#Learning-Materials" class="headerlink" title="Learning Materials"></a>Learning Materials</h2><ul><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/index.html" target="_blank" rel="noopener">《react 入门教程》</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">《react 入门实例教程》</a> — 阮一峰</li><li><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">《typescript 热门教程》</a></li><li><a href="https://zhuanlan.zhihu.com/p/23412169" target="_blank" rel="noopener">《6 周学习计划，攻克 javascript 难关(react/redux/es6 etc.)》</a></li></ul><h2 id="My-Learning"><a href="#My-Learning" class="headerlink" title="My Learning"></a>My Learning</h2><h3 id="入门学习-React-的几个例子"><a href="#入门学习-React-的几个例子" class="headerlink" title="入门学习 React 的几个例子"></a>入门学习 React 的几个例子</h3><blockquote><p><a href="https://github.com/yangtao2o/myreact/tree/master/demo" target="_blank" rel="noopener">Demo 地址，戳我</a></p></blockquote><ol><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/01/index.html" target="_blank" rel="noopener">ReactDOM.render()</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/02/index.html" target="_blank" rel="noopener">Use Array in JSX</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/03/index.html" target="_blank" rel="noopener">组件</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/04/index.html" target="_blank" rel="noopener">this.props.children</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/05/index.html" target="_blank" rel="noopener">PropTypes</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/06/index.html" target="_blank" rel="noopener">获取真实的 DOM 节点</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/07/index.html" target="_blank" rel="noopener">this.state</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/08/index.html" target="_blank" rel="noopener">表单</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/09/index.html" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">使用 Promise 获取 Github 的数据</a></li><li><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Todo List</a></li><li><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">井字棋（Tic Tac Toe）</a></li></ol><h3 id="Nextjs-—-配合-React-打造静态化和服务端渲染应用"><a href="#Nextjs-—-配合-React-打造静态化和服务端渲染应用" class="headerlink" title="Nextjs — 配合 React 打造静态化和服务端渲染应用"></a>Nextjs — 配合 React 打造静态化和服务端渲染应用</h3><p><strong><a href="https://github.com/yangtao2o/myreact/tree/master/nextjs/01-hello-next" target="_blank" rel="noopener">Nextjs</a></strong></p><ul><li>Demo1: 学习官方文档</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nextjs/01-hello-next</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="My-Project"><a href="#My-Project" class="headerlink" title="My Project"></a>My Project</h2><ul><li><a href="https://github.com/yangtao2o/myreact/tree/master/product/01-ttt" target="_blank" rel="noopener">学习「井字游戏」</a></li><li><a href="https://github.com/yangtao2o/myreact/tree/master/product/02-news-app" target="_blank" rel="noopener">学习体验 Ant Design of React</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习 React 的一些记录日志&lt;br&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://47.101.33.81/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://47.101.33.81/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>入门 Webpack@3 的配置过程</title>
    <link href="http://47.101.33.81/2019/08/05/webpack-v3/"/>
    <id>http://47.101.33.81/2019/08/05/webpack-v3/</id>
    <published>2019-08-05T12:13:10.000Z</published>
    <updated>2019-11-11T07:33:17.062Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>入门 Webpack@3 的配置过程<br><a id="more"></a></p></blockquote><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><ul><li><a href="https://webpack.docschina.org/guides/" target="_blank" rel="noopener">webpack 指南</a></li><li><a href="https://www.jianshu.com/p/0e01ca947e50" target="_blank" rel="noopener">React 的 Webpack 配置</a></li></ul><p><em>PS：</em> 文章结尾有完整实例启动方法：<a href="https://github.com/yangtao2o/happymmall/tree/webpack%403-react" target="_blank" rel="noopener">Github地址</a></p><p>本次配置练习主要是针对 <code>webpack-v3</code>，切换分支至 <code>webpack@3-react</code> ，每一次 <code>Commits</code>，基本上对应着相应的文件配置，可以对照着瞅瞅。</p><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><h4 id="配置-Webpack"><a href="#配置-Webpack" class="headerlink" title="配置 Webpack"></a>配置 Webpack</h4><p>准备环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) ✗ node -v</span><br><span class="line">v11.13.0</span><br><span class="line">➜  happymmall git:(webpack@3-react) ✗ npm -v</span><br><span class="line">6.10.1</span><br><span class="line">➜  happymmall git:(webpack@3-react) ✗ git --version</span><br><span class="line">git version 2.17.2 (Apple Git-113)</span><br><span class="line">➜  happymmall git:(webpack@3-react) ✗ yarn -v</span><br><span class="line">1.17.3</span><br></pre></td></tr></table></figure><h5 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 <a href="https://yarn.bootcss.com/docs/install/#mac-stable" target="_blank" rel="noopener">yarn</a></h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># homebrew 安装</span></span><br><span class="line">brew install yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm/cnpm 安装</span></span><br><span class="line">npm install cnpm -g</span><br><span class="line">cnpm install yarn -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">➜  ~ yarn --version</span><br><span class="line">1.17.3</span><br></pre></td></tr></table></figure><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yarn init  <span class="comment"># 初始化</span></span><br><span class="line">yarn add [package]  <span class="comment"># 添加依赖包</span></span><br><span class="line">yarn add [package] --dev   <span class="comment"># 添加到 devDependencies</span></span><br><span class="line">yarn remove [package]  <span class="comment"># 删除依赖包</span></span><br><span class="line">yarn install   <span class="comment"># 安装所有依赖包</span></span><br></pre></td></tr></table></figure><h5 id="安装-webpack-3"><a href="#安装-webpack-3" class="headerlink" title="安装 webpack@3"></a>安装 webpack@3</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br><span class="line">yarn add webpack@3.10.0 --dev</span><br></pre></td></tr></table></figure><p>根目录新建 <code>webpack.config.js</code>,并新建 <code>src/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"app.js"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello, world"</span>);</span><br></pre></td></tr></table></figure><p>运行：<code>node_modules/.bin/webpack</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) ✗ node_modules/.bin/webpack</span><br><span class="line">Hash: 62e68b9cc366c7b50ac6</span><br><span class="line">Version: webpack 3.10.0</span><br><span class="line">Time: 34ms</span><br><span class="line"> Asset    Size  Chunks             Chunk Names</span><br><span class="line">app.js  2.5 kB       0  [emitted]  main</span><br><span class="line">   [0] ./src/index.js 28 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><p>打开 <code>dist/app.js</code>，搜索 <code>Hello</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"><span class="comment">/******/</span> ]);</span><br></pre></td></tr></table></figure><p>一个简单的文件就此打包成功，开心吧…</p><h4 id="配置-HMTL-模板"><a href="#配置-HMTL-模板" class="headerlink" title="配置 HMTL 模板"></a>配置 HMTL 模板</h4><p>文档：<a href="https://webpack.js.org/plugins/html-webpack-plugin/#root" target="_blank" rel="noopener">HtmlWebpackPlugin</a> 简化了 HTML 文件的创建，以便为你的 webpack 包提供服务。这对于在文件名中包含每次会随着编译而发生变化哈希的 webpack bundle 尤其有用。</p><p>安装 html-webpack-plugin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add html-webpack-plugin@2.30.1 --dev</span><br></pre></td></tr></table></figure><p>新建：<code>src/index.html</code>, 并初始化一个 html 内容，然后配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.js"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"app.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着跑一下：<code>node_modules/.bin/webpack</code>，不出意外的话，dist 下会出现一个 index.html，打开查看就会发现，不仅有我们自己指定的内容，还把<code>app.js</code>也自动引入了，这波操作够可以。</p><h4 id="Babel-处理脚本"><a href="#Babel-处理脚本" class="headerlink" title="Babel 处理脚本"></a>Babel 处理脚本</h4><p>文档：<a href="https://www.webpackjs.com/loaders/babel-loader/" target="_blank" rel="noopener">babel-loader</a></p><p>安装 babel</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-loader@7.1.2 babel-core@6.26.0 babel-preset-env@1.6.1 --dev</span><br></pre></td></tr></table></figure><p>设置 config 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules)/</span>, <span class="comment">// 忽略此文件</span></span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">"env"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>src/index.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"people"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">27</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：<code>node_modules/.bin/webpack</code>，然后再去<code>dist/app.js</code>，就会发现已经转译成功：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> People = <span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  _classCallCheck(<span class="keyword">this</span>, People);</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"people"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Man = (<span class="function"><span class="keyword">function</span>(<span class="params">_People</span>) </span>&#123;</span><br><span class="line">  _inherits(Man, _People);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    _classCallCheck(<span class="keyword">this</span>, Man);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _this = _possibleConstructorReturn(</span><br><span class="line">      <span class="keyword">this</span>,</span><br><span class="line">      (Man.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(Man)).call(<span class="keyword">this</span>, name)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    _this.age = <span class="number">27</span>;</span><br><span class="line">    <span class="keyword">return</span> _this;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Man;</span><br><span class="line">&#125;)(People);</span><br></pre></td></tr></table></figure><h4 id="配置-React"><a href="#配置-React" class="headerlink" title="配置 React"></a>配置 React</h4><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add babel-preset-react@6.24.1 --dev</span><br><span class="line">yarn add react@16.2.0 react-dom@16.2.0</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.jsx$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          presets: [<span class="string">"env"</span>, <span class="string">"react"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时候的入口文件也需要更改下测试</span></span><br><span class="line">entry: <span class="string">'./src/index.jsx'</span>,</span><br></pre></td></tr></table></figure><p>然后修改 <code>src/index.js</code> 为 <code>src/index.jsx</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, React.<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p>运行：<code>node_modules/.bin/webpack</code>，然后再去<code>dist/app.js</code>，查找如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">_reactDom2.default.render(</span><br><span class="line">  _react2.default.createElement(<span class="string">"h1"</span>, <span class="literal">null</span>, <span class="string">"Hello, React."</span>),</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>那么，表示解析 .jsx 成功。</p><h4 id="解析-CSS"><a href="#解析-CSS" class="headerlink" title="解析 CSS"></a>解析 CSS</h4><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add style-loader@0.19.1 css-loader@0.28.8 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 index.jsx 里添加：<code>import &#39;./style.css&#39;;</code>，在<code>style.css</code>添加一些：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着跑一下：<code>node_modules/.bin/webpack</code>，再接着去 dist 下的 app.js 找找：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module</span></span><br><span class="line">exports.push([<span class="built_in">module</span>.i, <span class="string">"body &#123;\n  color: red;\n  font-size: 16px;\n&#125;"</span>, <span class="string">""</span>]);</span><br></pre></td></tr></table></figure><p>嗯，已经被解析并添加到 app.js 文件中。但是，我们有时候需要大量的 css 文件，并需要 js 解析，那就需要个插件单独处理：<a href="https://webpack.js.org/plugins/extract-text-webpack-plugin/#root" target="_blank" rel="noopener">ExtractTextWebpackPlugin</a>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add extract-text-webpack-plugin@3.0.2 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">"./src/index.html"</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// Add</span></span><br><span class="line">  <span class="keyword">new</span> ExtractTextWebpackPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">],</span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    <span class="comment">// Add</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">        fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">        use: <span class="string">"css-loader"</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后跑一下，dist 下就会出现我们设置的 <code>styles.css</code> 文件，并且会自动添加至 <code>index.html</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解析-scss"><a href="#解析-scss" class="headerlink" title="解析 scss"></a>解析 scss</h4><p>安装: sass-loader node-sass</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add sass-loader@6.0.6 node-sass@4.7.2 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">  use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">    fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">    use: [<span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>]</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，我们去 src 下新建一个 <code>app.scss</code>:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  h1 &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-tag">blue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且在 <code>index.jsx</code> 中引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"./style.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"./app.scss"</span>;</span><br></pre></td></tr></table></figure><p>接着，跑一下看看，刷~的一声，打开 dist 下的 <code>styles.css</code>，看看是不是我们引入的内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试通过，完美！</p><h4 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h4><p>安装：<a href="https://webpack.js.org/loaders/url-loader/#root" target="_blank" rel="noopener">url-loader</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add file-loader@1.1.6 url-loader@0.6.2 --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">8192</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的 src 下找张图片，测试下是否通过，在 <code>index.jsx</code> 里添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ImgSrc <span class="keyword">from</span> <span class="string">"./react.png"</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello, React.&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img src=&#123;ImgSrc&#125; alt="react" /</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>然后跑一下，发现：如果图片大于 limit 的设置（8kb=8192/1024kb）就会出现在 dist 目录下，否则会以 base64 格式直接引入使用。</p><h4 id="处理-fonts-字体"><a href="#处理-fonts-字体" class="headerlink" title="处理 fonts 字体"></a>处理 fonts 字体</h4><p>先下载个<a href="http://www.fontawesome.com.cn/get-started/" target="_blank" rel="noopener">Font Awesome</a>试试水：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add font-awesome</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">'url-loader'</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        limit: <span class="number">8192</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按照以下几个步骤来试水：</p><ul><li>复制 <code>font-awesome/</code> 目录到你的项目中</li><li>只保留 fonts 文件 和 scss 文件里的内容，其他可以删除</li><li>最后去你的主文件：<code>app.scss</code> 添加它：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fa-font-path</span>: <span class="string">"./font-awesome/fonts"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"./font-awesome/scss/font-awesome.scss"</span>;</span><br></pre></td></tr></table></figure><p>接着我们跑一下：<code>node_modules/.bin/webpack</code>，dist 下瞬间就会出现一堆文件，表示测试通过。</p><h4 id="公共模块"><a href="#公共模块" class="headerlink" title="公共模块"></a>公共模块</h4><p><a href="https://webpack.docschina.org/plugins/commons-chunk-plugin/#%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">CommonsChunkPlugin</a>插件，是一个可选的用于建立一个独立文件(又称作 chunk)的功能，这个文件包括多个入口 chunk 的公共模块。</p><p>先访问缓存中的公共代码，加快浏览器的访问速度。</p><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">  name: <span class="string">'commons'</span>, <span class="comment">// 公共 chunk 的名称</span></span><br><span class="line">  filename: <span class="string">'js/base.js'</span>  <span class="comment">// 公共 chunk 的文件名</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h4 id="使用-webpack-dev-server"><a href="#使用-webpack-dev-server" class="headerlink" title="使用 webpack-dev-server"></a>使用 webpack-dev-server</h4><p><code>webpack-dev-server</code> 为你提供了一个简单的 <code>web server</code>，并且具有 <code>live reloading</code>(实时重新加载) 功能。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-server@2.9.7 --dev</span><br></pre></td></tr></table></figure><p>修改配置文件，告诉 <code>dev server</code>，从什么位置查找文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着去 <code>package.json</code>里添加一个可以直接运行 <code>dev server</code> 的 script：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --open",</span><br><span class="line">  "build": "webpack"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这样就不用每次都去访问 <code>node_modules/.bin/webpack</code> 了，直接启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动 dev server</span></span><br><span class="line">npm start</span><br><span class="line"><span class="comment"># 打包构建</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="清理-dist-文件夹"><a href="#清理-dist-文件夹" class="headerlink" title="清理 /dist 文件夹"></a>清理 /dist 文件夹</h4><p>需求：每次 <code>build</code> 的时候，发现 <code>/dist</code> 下的文件一直会堆砌，能不能每次构建的时候，只生成项目中真正在使用的文件？</p><p>方法：在每次构建前清理 <code>/dist</code> 文件夹，这样只会生成用到的文件。</p><p>使用 <code>clean-webpack-plugin</code> 插件来进行清理:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add clean-webpack-plugin --dev</span><br></pre></td></tr></table></figure><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin();</span><br></pre></td></tr></table></figure><h4 id="模块热替换-HMR"><a href="#模块热替换-HMR" class="headerlink" title="模块热替换 HMR"></a>模块热替换 HMR</h4><p>需求：在开发环境下，可不可以每次保存之后，不用刷新浏览器，就自动更新了呢？</p><p>方法：<a href="https://webpack.docschina.org/guides/hot-module-replacement/" target="_blank" rel="noopener">模块热替换</a>(<code>hot module replacement</code> 或 <code>HMR</code>)，只更新改动的文件。</p><p>设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">],</span><br><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">  hot: <span class="literal">true</span>,  <span class="comment">// 开启</span></span><br><span class="line">  port: <span class="number">8082</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，重启服务，然后修改 <code>index.jsx</code> 文件，就会发现自动更新了，妈妈再也不用担心我的 F5 了…</p><h4 id="启动-Server"><a href="#启动-Server" class="headerlink" title="启动 Server"></a>启动 Server</h4><p><code>webpack-dev-middleware</code> 是一个封装器(<code>wrapper</code>)，它可以把 <code>webpack</code> 处理过的文件发送到一个 <code>server</code>。</p><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack-dev-middleware@2.0.6 --dev</span><br><span class="line">yarn add express --dev</span><br></pre></td></tr></table></figure><p>根目录新建一个 <code>server.js</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">"./webpack.config.js"</span>);</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 告诉 express 使用 webpack-dev-middleware，</span></span><br><span class="line"><span class="comment">// 以及将 webpack.config.js 配置文件作为基础配置</span></span><br><span class="line">app.use(</span><br><span class="line">  webpackDevMiddleware(compiler, &#123;</span><br><span class="line">    publicPath: config.output.publicPath</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用配置文件的端口号</span></span><br><span class="line">app.listen(config.devServer.port, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;config.devServer.port&#125;</span>!\n`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们将会在 server 脚本使用 publicPath，以确保文件资源能够正确地 serve 在 <a href="http://localhost:8082" target="_blank" rel="noopener">http://localhost:8082</a> 下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">  filename: <span class="string">"app.js"</span>,</span><br><span class="line">  publicPath: <span class="string">'/'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>接着，添加一个 <code>npm script</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"server": "node server.js"</span><br></pre></td></tr></table></figure><p>跑一下：<code>npm run server</code>，访问 <code>http://localhost:8082/</code>，完美运行。</p><h4 id="最后的配置文件"><a href="#最后的配置文件" class="headerlink" title="最后的配置文件"></a>最后的配置文件</h4><p>webpack.config.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextWebpackPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">"./src/index.jsx"</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    filename: <span class="string">"app.js"</span>,</span><br><span class="line">    publicPath: <span class="string">"/"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    port: <span class="number">8082</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextWebpackPlugin(<span class="string">"styles.css"</span>),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"commons"</span>,</span><br><span class="line">      filename: <span class="string">"js/base.js"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">  ],</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/(node_modules)/</span>,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: <span class="string">"babel-loader"</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            presets: [<span class="string">"env"</span>, <span class="string">"react"</span>]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(sc|c)ss$/</span>,</span><br><span class="line">        use: ExtractTextWebpackPlugin.extract(&#123;</span><br><span class="line">          fallback: <span class="string">"style-loader"</span>,</span><br><span class="line">          use: [<span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"url-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf|svg)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"url-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              limit: <span class="number">8192</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><p>关于 tree 的使用总结：<a href="https://www.jianshu.com/p/6b57f6e40d64" target="_blank" rel="noopener">MacOS 如何使用 tree 生成目录结构</a></p><p>常用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">brew install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件夹下的所有文件</span></span><br><span class="line">tree -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示文件夹</span></span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示项目的层级，如三级</span></span><br><span class="line">tree -L 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤，如除node_modules文件</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">tree &gt; tree.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># Help</span></span><br><span class="line">tree --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我的输出：</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span> &gt; tree.md</span><br></pre></td></tr></table></figure><p>tree.md 的内容为：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist</span><br><span class="line">├── package.json</span><br><span class="line">├── server.js</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   ├── font-awesome</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── FontAwesome.otf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.eot</span><br><span class="line">│   │   │   ├── fontawesome-webfont.svg</span><br><span class="line">│   │   │   ├── fontawesome-webfont.ttf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.woff</span><br><span class="line">│   │   │   └── fontawesome-webfont.woff2</span><br><span class="line">│   │   └── scss</span><br><span class="line">│   │   ├── \_animated.scss</span><br><span class="line">│   │   ├── \_bordered-pulled.scss</span><br><span class="line">│   │   ├── \_core.scss</span><br><span class="line">│   │   ├── \_fixed-width.scss</span><br><span class="line">│   │   ├── \_icons.scss</span><br><span class="line">│   │   ├── \_larger.scss</span><br><span class="line">│   │   ├── \_list.scss</span><br><span class="line">│   │   ├── \_mixins.scss</span><br><span class="line">│   │   ├── \_path.scss</span><br><span class="line">│   │   ├── \_rotated-flipped.scss</span><br><span class="line">│   │   ├── \_screen-reader.scss</span><br><span class="line">│   │   ├── \_stacked.scss</span><br><span class="line">│   │   ├── \_variables.scss</span><br><span class="line">│   │   └── font-awesome.scss</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── index.jsx</span><br><span class="line">│   ├── react.png</span><br><span class="line">│   └── style.css</span><br><span class="line">├── tree.md</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line">5 directories, 32 files</span><br></pre></td></tr></table></figure><h4 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h4><blockquote><p>项目里的每一次 <code>Commits</code>，基本上对应着相应的文件配置，可以对照着瞅瞅。</p></blockquote><p>克隆一份项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/happymmall.git</span><br></pre></td></tr></table></figure><p>进入目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> happymmall</span><br></pre></td></tr></table></figure><p>切换分支至 webpack@3-react</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(master) git checkout webpack@3-react</span><br></pre></td></tr></table></figure><p>下载依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) yarn install</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  happymmall git:(webpack@3-react) npm start</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;入门 Webpack@3 的配置过程&lt;br&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://47.101.33.81/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://47.101.33.81/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>入门学习 React 一些实例</title>
    <link href="http://47.101.33.81/2019/08/02/react-demo/"/>
    <id>http://47.101.33.81/2019/08/02/react-demo/</id>
    <published>2019-08-02T01:10:59.000Z</published>
    <updated>2019-11-11T07:26:35.177Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是几个入门学习 React 的小 Demo，帮助自己学习了解 React 的运行机制，结合 <a href="https://zh-hans.reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React官方文档</a>，会更佳噢…</p></blockquote><a id="more"></a><h2 id="DEMO-目录"><a href="#DEMO-目录" class="headerlink" title="DEMO 目录"></a>DEMO 目录</h2><ol><li><a href="https://istaotao.com/myreact/demo/01/" target="_blank" rel="noopener">ReactDOM.render()</a></li><li><a href="https://istaotao.com/myreact/demo/02/" target="_blank" rel="noopener">Use Array in JSX</a></li><li><a href="https://istaotao.com/myreact/demo/03/" target="_blank" rel="noopener">组件</a></li><li><a href="https://istaotao.com/myreact/demo/04/" target="_blank" rel="noopener">this.props.children</a></li><li><a href="https://istaotao.com/myreact/demo/05/" target="_blank" rel="noopener">PropTypes</a></li><li><a href="https://istaotao.com/myreact/demo/06/" target="_blank" rel="noopener">获取真实的 DOM 节点</a></li><li><a href="https://istaotao.com/myreact/demo/07/" target="_blank" rel="noopener">this.state</a></li><li><a href="https://istaotao.com/myreact/demo/08/" target="_blank" rel="noopener">表单</a></li><li><a href="https://istaotao.com/myreact/demo/09/" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">使用 Promise 获取 Github 的数据</a></li><li><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Todo List</a></li><li><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">井字棋（Tic Tac Toe）</a></li></ol><p>引入资源 <a href="https://babeljs.io/en/setup/#installation" target="_blank" rel="noopener">With babel-standalone</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"output"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- Load Babel --&gt;</span><br><span class="line">&lt;!-- v6 &lt;script src=<span class="string">"https://unpkg.com/babel-standalone@6/babel.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> --&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/@babel/standalone/babel.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;!-- Your custom script here --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/babel"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> getMessage = <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">"Hello World"</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'output'</span>).innerHTML = getMessage();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Demo01-ReactDOM-render"><a href="#Demo01-ReactDOM-render" class="headerlink" title="Demo01: ReactDOM.render()"></a>Demo01: ReactDOM.render()</h3><p><a href="https://istaotao.com/myreact/demo/01/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/01/index.html" target="_blank" rel="noopener">Source</a></p><p>初始化咱先 Hello 一下，使用 jsx 语法，碰到代码块使用（{ }）包起来，碰到 html 标签，就使用（&lt; /&gt;）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"AAA"</span>, <span class="string">"BBB"</span>, <span class="string">"CCC"</span>];</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;names.map(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello, &#123;name&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">    &#125;)&#125;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("example")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="Demo02-Use-Array-in-JSX"><a href="#Demo02-Use-Array-in-JSX" class="headerlink" title="Demo02: Use Array in JSX"></a>Demo02: Use Array in JSX</h3><p><a href="https://istaotao.com/myreact/demo/02/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/02/index.html" target="_blank" rel="noopener">Source</a></p><p>如果 JavaScript 的变量是个数组，会展开这个数组的所有项.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">key</span>=<span class="string">"h1"</span>&gt;</span>Hello,<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, &lt;h2 key=<span class="string">"h2"</span>&gt;React is awesome!<span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>];</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;arr&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo03-组件"><a href="#Demo03-组件" class="headerlink" title="Demo03: 组件"></a>Demo03: 组件</h3><p><a href="https://istaotao.com/myreact/demo/03/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/03/index.html" target="_blank" rel="noopener">Source</a></p><p>变量 HelloMsg 是一个组件类。模板插入 <hellomsg> 时，会自动生成 HelloMsg 的一个实例。所有组件类都必须有自己的 render 方法，用于输出组件。</hellomsg></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMsg</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;HelloMsg name=<span class="string">"Dataozi"</span> /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"example"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Demo04-this-props-children"><a href="#Demo04-this-props-children" class="headerlink" title="Demo04: this.props.children"></a>Demo04: this.props.children</h3><p><a href="https://istaotao.com/myreact/demo/04/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/04/index.html" target="_blank" rel="noopener">Source</a></p><p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。</p><p>ps: 注意大小写 <code>React.Children</code>、<code>React.Component</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotesList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ol&gt;</span><br><span class="line">        &#123;React.Children.map(<span class="keyword">this</span>.props.children, <span class="function"><span class="keyword">function</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;child&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">        &#125;)&#125;</span><br><span class="line">      &lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;NotesList&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;Hello&lt;/</span>span&gt;</span><br><span class="line">    &lt;span&gt;World&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;React&lt;/</span>span&gt;</span><br><span class="line">  &lt;<span class="regexp">/NotesList&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("example")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><h3 id="Demo05-PropTypes"><a href="#Demo05-PropTypes" class="headerlink" title="Demo05: PropTypes"></a>Demo05: PropTypes</h3><p><a href="https://istaotao.com/myreact/demo/05/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/05/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://react.docschina.org/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">使用 PropTypes 进行类型检查</a></li></ul><p>React 内置了一些类型检查的功能。要在组件的 props 上进行类型检查，你只需配置特定的 propTypes 属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">  tilte: <span class="string">"Hello"</span>,</span><br><span class="line">  age: <span class="number">19</span>,</span><br><span class="line">  isStudent: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    tilte: PropTypes.string,</span><br><span class="line">    age: PropTypes.number,</span><br><span class="line">    isStudent: PropTypes.bool</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.props.data.tilte&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h2&gt;&#123;this.props.data.age&#125;&lt;/</span>h2&gt;</span><br><span class="line">        &lt;h3&gt;&#123;<span class="keyword">this</span>.props.data.isStudent ? <span class="string">"Yes"</span> : <span class="string">"No"</span>&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyTitle</span> <span class="attr">data</span>=<span class="string">&#123;data&#125;</span> /&gt;</span>, document.getElementById("root"));</span></span><br></pre></td></tr></table></figure><p>还可以通过配置特定的 defaultProps 属性来定义 props 的默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefaultTitle</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定 props 的默认值：</span></span><br><span class="line">DefaultTitle.defaultProps = &#123;</span><br><span class="line">  title: <span class="string">"Hello React!"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">DefaultTitle</span> /&gt;</span>, document.getElementById("root2"));</span></span><br></pre></td></tr></table></figure><h3 id="Demo06-获取真实的-DOM-节点"><a href="#Demo06-获取真实的-DOM-节点" class="headerlink" title="Demo06: 获取真实的 DOM 节点"></a>Demo06: 获取真实的 DOM 节点</h3><p><a href="https://istaotao.com/myreact/demo/06/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/06/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">Refs and the DOM</a></li></ul><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</p><ul><li>创建 Refs: Refs 是由<code>React.createRef()</code>创建的，并通过 ref 属性附加到 React 元素（比如 input）</li><li>访问 Refs: 当 ref 被传递给 render 中的元素时，对该节点的引用可以在 ref 的 current 属性中被访问，<code>this.myTextFocus.current.focus();</code></li></ul><p><strong><em>你不能在函数组件上使用 ref 属性，因为它们没有实例</em></strong></p><p>组件 MyComponent 的子节点有一个文本输入框，用于获取用户的输入。这时就必须获取真实的 DOM 节点，虚拟 DOM 是拿不到用户输入的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 创建一个 ref 来存储 myTextFocus 的 DOM 元素</span></span><br><span class="line">    <span class="keyword">this</span>.myTextFocus = React.createRef();</span><br><span class="line">    <span class="keyword">this</span>.handerClick = <span class="keyword">this</span>.handerClick.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handerClick() &#123;</span><br><span class="line">    <span class="comment">// 直接使用原生 API 使 text 输入框获得焦点</span></span><br><span class="line">    <span class="comment">// 通过 "current" 来访问 DOM 节点</span></span><br><span class="line">    <span class="keyword">this</span>.myTextFocus.current.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 告诉 React 我们想把 &lt;input&gt; ref 关联到</span></span><br><span class="line">    <span class="comment">// 构造器里创建的 `myTextFocus` 上</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;<span class="keyword">this</span>.myTextFocus&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"button"</span> value=<span class="string">"点击聚焦"</span> onClick=&#123;<span class="keyword">this</span>.handerClick&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;MyComponent /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo07-this-state"><a href="#Demo07-this-state" class="headerlink" title="Demo07: this.state"></a>Demo07: this.state</h3><p><a href="https://istaotao.com/myreact/demo/07/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/07/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">State &amp; 生命周期</a></li></ul><p>学习如何封装真正可复用的 Clock 组件。它将设置自己的计时器并每秒更新一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clock</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;; <span class="comment">//为 this.state 赋初值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// Clock初次被渲染到DOM时，为其挂载一个计时器</span></span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.tick(), <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// Clock被删除时，卸载其计时器</span></span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tick() &#123;</span><br><span class="line">    <span class="comment">// 使用 this.setState() 来时刻更新组件 state</span></span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Hello, React!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;h2&gt;现在是北京时间：&#123;<span class="keyword">this</span>.state.date.toLocaleTimeString()&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Clock</span> /&gt;</span>, document.getElementById("root"));</span></span><br></pre></td></tr></table></figure><h3 id="Demo08-表单"><a href="#Demo08-表单" class="headerlink" title="Demo08: 表单"></a>Demo08: 表单</h3><p><a href="https://istaotao.com/myreact/demo/08/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/08/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/forms.html" target="_blank" rel="noopener">表单</a></li></ul><p>受控组件：渲染表单的 React 组件还控制着用户输入过程中表单发生的操作，被 React 以这种方式控制取值的表单输入元素就叫做“受控组件”。</p><p>即：表单数据是由 React 组件来管理的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      <span class="comment">// 唯一数据源</span></span><br><span class="line">      value: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value: event.target.value <span class="comment">// 显示的值将随着用户输入而更新</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.value) &#123;</span><br><span class="line">      alert(<span class="string">"接受到的name值是："</span> + <span class="keyword">this</span>.state.value);</span><br><span class="line">    &#125;</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">"text"</span></span><br><span class="line">          value=&#123;<span class="keyword">this</span>.state.value&#125;</span><br><span class="line">          onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;NameForm /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><p><a href="https://zh-hans.reactjs.org/docs/uncontrolled-components.html" target="_blank" rel="noopener">非受控组件</a>：表单数据将交由 DOM 节点来处理，即使用 ref 来从 DOM 节点中获取表单数据</p><p><a href="https://istaotao.com/myreact/demo/08-1/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/08-1/index.html" target="_blank" rel="noopener">Source</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.input = React.createRef();</span><br><span class="line">    <span class="keyword">this</span>.handleSubmit = <span class="keyword">this</span>.handleSubmit.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleSubmit(event) &#123;</span><br><span class="line">    alert(<span class="string">"接受到的name值是："</span> + <span class="keyword">this</span>.input.current.value);</span><br><span class="line">    event.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form onSubmit=&#123;<span class="keyword">this</span>.handleSubmit&#125;&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> ref=&#123;<span class="keyword">this</span>.input&#125; /&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;NameForm /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo09-组件的生命周期"><a href="#Demo09-组件的生命周期" class="headerlink" title="Demo09: 组件的生命周期"></a>Demo09: 组件的生命周期</h3><p><a href="https://istaotao.com/myreact/demo/09/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/09/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://zh-hans.reactjs.org/docs/react-component.html" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">生命周期图谱速查表</a></li><li><a href="https://www.yuque.com/ant-design/course/lifemethods" target="_blank" rel="noopener">React 的生命周期</a> — Ant Design 语雀</li></ul><p>主要路线顺序：挂载 - 更新 - 卸载 - 错误处理</p><p><strong>挂载</strong></p><p>当组件实例被创建并插入 DOM 中时，其生命周期调用如下：</p><ul><li>consctructor() — React 组件的构造函数，不初始化 state 或不进行方法绑定，则不需要</li><li>static getDerivedStateFromProps() — 不常用</li><li>render() — 唯一必须实现的方法，并且应该是纯函数</li><li>componentDidMount() — 依赖于 DOM 节点的初始化应该在这里</li></ul><p><strong>更新</strong></p><p>当组件的 props 或 state 发生变化时，会触发更新：</p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate() — 不常用</li><li>componentDidUpdate() — 在更新后会被立即调用</li></ul><p><strong>卸载</strong></p><p>当组件从 DOM 中移除时：</p><ul><li>componentWillUnmount() — 会在组件卸载及销毁之前直接调用</li></ul><p><strong>错误处理</strong></p><p>当渲染过程，生命周期，或子组件的构造函数中抛出错误时：</p><ul><li>static getDerivedStateFromError()</li><li>componentDidCatch()</li></ul><p>过期的生命周期方法：</p><ul><li>UNSAFE_componentWillMount() — 挂载前调用，目前使用 constructor()初始化 state</li><li>UNSAFE_componentWillReceiveProps()</li><li>UNSAFE_componentWillUpdate()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      fontSize: <span class="number">12</span>,</span><br><span class="line">      opacity: <span class="number">0.01</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.timerID = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> opacity = <span class="keyword">this</span>.state.opacity;</span><br><span class="line">      <span class="keyword">let</span> fontSize = <span class="keyword">this</span>.state.fontSize;</span><br><span class="line">      opacity += <span class="number">0.02</span>;</span><br><span class="line">      fontSize += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (opacity &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        opacity = <span class="number">0.01</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fontSize &gt;= <span class="number">63</span>) &#123;</span><br><span class="line">        fontSize = <span class="number">12</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        fontSize,</span><br><span class="line">        opacity</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timerID);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;h1</span><br><span class="line">        style=&#123;&#123; <span class="attr">opacity</span>: <span class="keyword">this</span>.state.opacity, <span class="attr">fontSize</span>: <span class="keyword">this</span>.state.fontSize &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        Hello, &#123;<span class="keyword">this</span>.props.name&#125;</span><br><span class="line">      &lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Hello name="React" /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>));</span><br></pre></td></tr></table></figure><h3 id="Demo10-使用-Promise-获取-Github-的数据"><a href="#Demo10-使用-Promise-获取-Github-的数据" class="headerlink" title="Demo10: 使用 Promise 获取 Github 的数据"></a>Demo10: 使用 Promise 获取 Github 的数据</h3><p><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/10/index.html" target="_blank" rel="noopener">Source</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;ReportList</span><br><span class="line">    promise=&#123;$.getJSON(</span><br><span class="line">      <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span></span><br><span class="line">    )&#125;</span><br><span class="line">  /&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>从 Github 的 API 抓取数据，然后将 Promise 对象作为属性，传给 ReportList 组件。</p><p>如果 Promise 对象正在抓取数据（pending 状态），组件显示”loading…”；</p><p>如果 Promise 对象报错（rejected 状态），组件显示报错信息；</p><p>如果 Promise 对象抓取数据成功（fulfilled 状态），组件显示获取的数据。</p><p><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">在这里查看完整 Demo</a>/<a href="https://github.com/yangtao2o/myreact/blob/master/demo/11/index.html" target="_blank" rel="noopener">源码</a> — 谷歌浏览器有时候会报跨域的问题，可以使用火狐等浏览器试看</p><h2 id="接下来来几个混合实战吧"><a href="#接下来来几个混合实战吧" class="headerlink" title="接下来来几个混合实战吧"></a>接下来来几个混合实战吧</h2><h3 id="Demo11-Todo-List"><a href="#Demo11-Todo-List" class="headerlink" title="Demo11: Todo List"></a>Demo11: Todo List</h3><p><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/11/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://codepen.io/marekdano/pen/bVNYpq" target="_blank" rel="noopener">React todo list</a></li></ul><p>主要练习使用 <code>props</code> 和 <code>state</code>，使用 state 保存现有的待办事项列表及用户的一些操作（删除、完成）等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoApp</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      items: []</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.addItem = <span class="keyword">this</span>.addItem.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.deleteItem = <span class="keyword">this</span>.deleteItem.bind(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.doneItem = <span class="keyword">this</span>.doneItem.bind(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addItem(item) &#123;</span><br><span class="line">    <span class="keyword">const</span> newItem = &#123;</span><br><span class="line">      text: item.text,</span><br><span class="line">      id: <span class="built_in">Date</span>.now(),</span><br><span class="line">      done: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      items: <span class="keyword">this</span>.state.items.concat(newItem)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  deleteItem(index) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state.items.splice(index, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      items: <span class="keyword">this</span>.state.items</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  doneItem(index) &#123;</span><br><span class="line">    <span class="keyword">const</span> items = <span class="keyword">this</span>.state.items;</span><br><span class="line">    <span class="keyword">const</span> todo = items[index];</span><br><span class="line">    items.splice(index, <span class="number">1</span>);</span><br><span class="line">    todo.done = !todo.done;</span><br><span class="line">    todo.done ? items.unshift(todo) : items.push(todo);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; items &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"container"</span>&gt;</span><br><span class="line">        &lt;h1&gt;TODO&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;TodoList</span></span><br><span class="line"><span class="regexp">          items=&#123;this.state.items&#125;</span></span><br><span class="line"><span class="regexp">          deleteClick=&#123;this.deleteItem&#125;</span></span><br><span class="line"><span class="regexp">          doneClick=&#123;this.doneItem&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">        &lt;TodoForm addItem=&#123;<span class="keyword">this</span>.addItem&#125; items=&#123;<span class="keyword">this</span>.state.items&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Demo12-井字棋（Tic-Tac-Toe）"><a href="#Demo12-井字棋（Tic-Tac-Toe）" class="headerlink" title="Demo12: 井字棋（Tic Tac Toe）"></a>Demo12: 井字棋（Tic Tac Toe）</h3><p><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">Demo</a> / <a href="https://github.com/yangtao2o/myreact/blob/master/demo/12/index.html" target="_blank" rel="noopener">Source</a></p><ul><li><a href="https://codepen.io/gaearon/pen/gWWZgR?editors=0010" target="_blank" rel="noopener">Tic Tac Toe</a></li><li><a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#inspecting-the-starter-code" target="_blank" rel="noopener">井字棋游戏教程文档</a></li><li><a href="https://www.bbsmax.com/A/8Bz8kVodxg/" target="_blank" rel="noopener">React 的井字过三关</a></li></ul><h4 id="tic-tac-toe-三连棋-游戏的功能"><a href="#tic-tac-toe-三连棋-游戏的功能" class="headerlink" title="tic-tac-toe(三连棋)游戏的功能"></a>tic-tac-toe(三连棋)游戏的功能</h4><ul><li>能够判定玩家何时获胜</li><li>能够记录游戏进程</li><li>允许玩家查看游戏的历史记录，也可以查看任意一个历史版本的游戏棋盘状态</li><li>在游戏历史记录列表显示每一步棋的坐标，格式为 (列号, 行号)</li><li>在历史记录列表中加粗显示当前选择的项目</li><li>当无人获胜时，显示一个平局的消息</li><li style="list-style: none"><input type="checkbox"> 使用两个循环来渲染出棋盘的格子，而不是在代码里写死（hardcode）</li><li style="list-style: none"><input type="checkbox"> 添加一个可以升序或降序显示历史记录的按钮</li><li style="list-style: none"><input type="checkbox"> 每当有人获胜时，高亮显示连成一线的 3 颗棋子</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">React 入门实例教程</a> — 阮一峰</li><li><a href="https://github.com/ruanyf/react-demos" target="_blank" rel="noopener">react-demos</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这是几个入门学习 React 的小 Demo，帮助自己学习了解 React 的运行机制，结合 &lt;a href=&quot;https://zh-hans.reactjs.org/docs/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React官方文档&lt;/a&gt;，会更佳噢…&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://47.101.33.81/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://47.101.33.81/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs 日常杂记</title>
    <link href="http://47.101.33.81/2019/07/10/node-learning/"/>
    <id>http://47.101.33.81/2019/07/10/node-learning/</id>
    <published>2019-07-10T12:30:38.000Z</published>
    <updated>2019-11-11T06:55:33.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Node.js® is a JavaScript runtime built on <code>Chrome&#39;s V8 JavaScript engine</code>. Node.js uses an <code>event-driven</code>, <code>non-blocking I/O model</code> that makes it lightweight and efficient. Node.js’ package ecosystem, <code>npm</code>, is the largest ecosystem of open source libraries in the world.</p></blockquote><a id="more"></a><h2 id="学习书籍-视频"><a href="#学习书籍-视频" class="headerlink" title="学习书籍|视频"></a>学习书籍|视频</h2><ul><li><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a> - 文档</li><li><a href="http://nqdeng.github.io/7-days-nodejs/#1.1" target="_blank" rel="noopener">7-days-nodejs</a> - 文章</li><li><a href="https://github.com/alsotang/node-lessons" target="_blank" rel="noopener">《Node.js 包教不包会》</a> – 文章</li><li>《了不起的 Node.js：将 JavaScript 进行到底》- 书籍</li><li>《新时期的 Node.js 入门》- 书籍</li><li><a href="https://coding.imooc.com/class/320.html" target="_blank" rel="noopener">Node.js 从零开发 Web Server 博客项目 前端晋升全栈工程师必备</a> - 视频</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://cnodejs.org/getstart" target="_blank" rel="noopener">Node.js 入门</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js 官方文档</a></li><li><a href="https://cnodejs.org/" target="_blank" rel="noopener">CNode：Node.js 专业中文社区</a></li><li><a href="https://segmentfault.com/a/1190000013933520" target="_blank" rel="noopener">【全文】狼叔：如何正确的学习 Node.js</a></li><li><a href="http://www.expressjs.com.cn/guide/routing.html" target="_blank" rel="noopener">Express-4.x 官方指南</a></li><li><a href="https://www.jianshu.com/p/406f6df0f916" target="_blank" rel="noopener">react 全家桶+express 实战个人博客系列教程</a></li><li><a href="https://www.jianshu.com/p/c65ecdcffed1" target="_blank" rel="noopener">详解如何从零开始搭建 Express+Vue 开发环境</a></li><li><a href="https://www.jianshu.com/p/4940ae61b752" target="_blank" rel="noopener">vue 项目-前端 Vue 后台 express</a></li><li><a href="https://segmentfault.com/a/1190000015866331" target="_blank" rel="noopener">【实战】用 express+MongoDB 搭建一个完整的前端项目</a></li><li><a href="https://www.jianshu.com/p/92fa50ea0b84" target="_blank" rel="noopener">基于 Vue+express 的博客项目</a></li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li><a href="https://cnodejs.org/topic/560dbc826a1ed28204a1e7de" target="_blank" rel="noopener">Node.js 最新技术栈之 Promise 篇</a> - 2015</li><li><a href="https://blog.coding.net/blog/how-do-promises-work" target="_blank" rel="noopener">理解 Promise 的工作原理</a></li><li><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">JavaScript Promise 迷你书（中文版）</a></li></ul><h2 id="周边大咖"><a href="#周边大咖" class="headerlink" title="周边大咖"></a>周边大咖</h2><ul><li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="noopener">wesome-nodejs</a></li><li>@justjavac 大神的<a href="https://github.com/justjavac/free-programming-books-zh_CN/#%E7%BD%AE%E9%A1%B6" target="_blank" rel="noopener">免费的计算机编程类中文书籍</a></li><li><a href="https://github.com/i5ting/How-to-learn-node-correctly" target="_blank" rel="noopener">【知乎 Live】狼叔：如何正确的学习 Node.js</a></li></ul><h2 id="学习日志"><a href="#学习日志" class="headerlink" title="学习日志"></a>学习日志</h2><ul><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/http.md" target="_blank" rel="noopener">Http</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/tcp.md" target="_blank" rel="noopener">Tcp</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/connect.md" target="_blank" rel="noopener">Connect</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/event.md" target="_blank" rel="noopener">Event</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/express-init.md" target="_blank" rel="noopener">Express-init</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/express-spider.md" target="_blank" rel="noopener">Express-spider</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/blob/master/doc/express-spider-more.md" target="_blank" rel="noopener">Express-spider-more</a></li><li><a href="https://github.com/yangtao2o/nodejs-learn/tree/master/cnodejs" target="_blank" rel="noopener">npm package</a> 积累</li></ul><h2 id="Node-相关"><a href="#Node-相关" class="headerlink" title="Node 相关"></a>Node 相关</h2><ul><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-01-init.md" target="_blank" rel="noopener">网站初始化，实现 GET 和 POST 的 Ajax 请求</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">登录模块</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">上传图片模块</a></li><li><a href="https://github.com/yangtao2o/node-blog-express-koa2" target="_blank" rel="noopener">node-blog-express-koa2</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb" target="_blank" rel="noopener">node-express-mongodb</a></li><li><a href="https://github.com/yangtao2o/node-express-spider" target="_blank" rel="noopener">node-express-spider</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Node.js® is a JavaScript runtime built on &lt;code&gt;Chrome&amp;#39;s V8 JavaScript engine&lt;/code&gt;. Node.js uses an &lt;code&gt;event-driven&lt;/code&gt;, &lt;code&gt;non-blocking I/O model&lt;/code&gt; that makes it lightweight and efficient. Node.js’ package ecosystem, &lt;code&gt;npm&lt;/code&gt;, is the largest ecosystem of open source libraries in the world.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用 superagent 与 cheerio 完成简单爬虫</title>
    <link href="http://47.101.33.81/2019/07/06/node-express-spider/"/>
    <id>http://47.101.33.81/2019/07/06/node-express-spider/</id>
    <published>2019-07-06T06:38:13.000Z</published>
    <updated>2019-11-11T06:51:44.246Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬一下-CNode-专业中文社区"><a href="#爬一下-CNode-专业中文社区" class="headerlink" title="爬一下 CNode 专业中文社区"></a>爬一下 CNode 专业中文社区</h2><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">"https://cnodejs.org"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当在浏览器中访问 http://localhost:8000/ 时，输出 CNode(https://cnodejs.org/ ) 社区首页的所有帖子标题和链接，以 json 的形式。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用 superagent 获取 url</span></span><br><span class="line">  superagent.get(URL, (err, sres) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> next(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">    <span class="keyword">const</span> items = [];</span><br><span class="line">    <span class="keyword">const</span> $target = $(<span class="string">"#topic_list .topic_title"</span>);</span><br><span class="line">    <span class="keyword">let</span> itemsHtml = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    $target.each(<span class="function">(<span class="params">i, item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> $<span class="keyword">this</span> = $(item);</span><br><span class="line">      items.push(&#123;</span><br><span class="line">        title: $<span class="keyword">this</span>.attr(<span class="string">"title"</span>),</span><br><span class="line">        url: URL + $<span class="keyword">this</span>.attr(<span class="string">"href"</span>)</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"items---&gt;"</span>, items); <span class="comment">// 以 JSON 格式打印</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (items) &#123;</span><br><span class="line">      $(items).each(<span class="function">(<span class="params">i, item</span>) =&gt;</span> &#123;</span><br><span class="line">        itemsHtml += <span class="string">`&lt;li&gt;&lt;a href="<span class="subst">$&#123;item.url&#125;</span>" title="<span class="subst">$&#123;item.title&#125;</span>"&gt;<span class="subst">$&#123;item.title&#125;</span>&lt;/a&gt;&lt;/li&gt;`</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">      itemsHtml = <span class="string">`&lt;ol id="listItem"&gt;<span class="subst">$&#123;itemsHtml&#125;</span>&lt;/ol&gt;`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      itemsHtml = <span class="string">`&lt;p&gt;暂时还获取不到数据...&lt;/p&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.send(itemsHtml);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App is listening at port "</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="并发请求处理"><a href="#并发请求处理" class="headerlink" title="并发请求处理"></a>并发请求处理</h2><p>输出 <a href="https://cnodejs.org/" target="_blank" rel="noopener">CNode</a> 社区首页的所有主题的标题，链接和第一条评论，以 json 的格式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">"morgan"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">"async"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">8000</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">"https://cnodejs.org"</span>;</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"ejs"</span>);</span><br><span class="line">app.use(morgan(<span class="string">"dev"</span>));</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制并发请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"loading..."</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`正在请求<span class="subst">$&#123;URL&#125;</span>`</span>);</span><br><span class="line">  superagent.get(URL).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> topicUrls = [];</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">    <span class="keyword">let</span> concurrencyCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> fetchUrl = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> getItem = &#123;&#125;;</span><br><span class="line">      superagent.get(url).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">        concurrencyCount++;</span><br><span class="line"></span><br><span class="line">        getItem = &#123;</span><br><span class="line">          href: url,</span><br><span class="line">          title: $(<span class="string">".topic_full_title"</span>)</span><br><span class="line">            .text()</span><br><span class="line">            .replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">""</span>),</span><br><span class="line">          comment: $(<span class="string">".reply_content"</span>)</span><br><span class="line">            .eq(<span class="number">0</span>)</span><br><span class="line">            .text()</span><br><span class="line">            .replace(<span class="regexp">/[\ \r\n]/g</span>, <span class="string">""</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">          <span class="string">`\r\n正在请求第 <span class="subst">$&#123;concurrencyCount&#125;</span> 条的数据data:\r\n<span class="subst">$&#123;[</span></span></span><br><span class="line"><span class="string"><span class="subst">            <span class="built_in">JSON</span>.stringify(getItem)</span></span></span><br><span class="line"><span class="string"><span class="subst">          ]&#125;</span>`</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        callback(<span class="literal">null</span>, getItem);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $(<span class="string">"#topic_list .topic_title"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> $element = $(element);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> href = URL + $element.attr(<span class="string">"href"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`正在获取第 <span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span> 条列表的url：<span class="subst">$&#123;href&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">      topicUrls.push(href);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (topicUrls.length &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`\r\n开始并发请求...\r\n`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span>.mapLimit(</span><br><span class="line">      topicUrls,</span><br><span class="line">      <span class="number">3</span>,</span><br><span class="line">      (url, callback) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.time(<span class="string">"delay"</span>);</span><br><span class="line">        fetchUrl(url, callback);</span><br><span class="line">        <span class="built_in">console</span>.timeEnd(<span class="string">"delay"</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      (err, results) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"\r获取到的数据: \r\n"</span>, results);</span><br><span class="line">        res.json(results);</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App is listening at port "</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="优化下"><a href="#优化下" class="headerlink" title="优化下"></a>优化下</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">"express"</span>);</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="keyword">const</span> morgan = <span class="built_in">require</span>(<span class="string">"morgan"</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">"async"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> URL = <span class="string">"https://cnodejs.org"</span>;</span><br><span class="line"><span class="keyword">const</span> ALLNUMS = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> TIEMS = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">"view engine"</span>, <span class="string">"ejs"</span>);</span><br><span class="line">app.use(morgan(<span class="string">"dev"</span>));</span><br><span class="line">app.use(express.json());</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制并发请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">"/"</span>, (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"loading..."</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`正在请求<span class="subst">$&#123;URL&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getHomePageUrls = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    superagent.get(URL).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> topicUrls = [];</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">"#topic_list .topic_title"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">idx, element</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> $element = $(element);</span><br><span class="line">        <span class="keyword">const</span> href = URL + $element.attr(<span class="string">"href"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`正在获取第 <span class="subst">$&#123;idx + <span class="number">1</span>&#125;</span> 条列表的url：<span class="subst">$&#123;href&#125;</span>`</span>);</span><br><span class="line">        topicUrls.push(href);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">if</span> (topicUrls.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        resolve(topicUrls.slice(<span class="number">0</span>, ALLNUMS));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> concurrencyCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> fetchUrl = <span class="function">(<span class="params">url, callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> getItem = &#123;&#125;;</span><br><span class="line">    superagent.get(url).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> $ = cheerio.load(sres.text);</span><br><span class="line">      concurrencyCount++;</span><br><span class="line"></span><br><span class="line">      getItem = &#123;</span><br><span class="line">        href: url,</span><br><span class="line">        title: $(<span class="string">".topic_full_title"</span>)</span><br><span class="line">          .text()</span><br><span class="line">          .replace(<span class="regexp">/[\ \r\n]/g</span>, <span class="string">""</span>),</span><br><span class="line">        comment: $(<span class="string">".reply_content"</span>)</span><br><span class="line">          .eq(<span class="number">0</span>)</span><br><span class="line">          .text()</span><br><span class="line">          .replace(<span class="regexp">/[\ \r\n]/g</span>, <span class="string">""</span>)</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`\r\n正在请求第 <span class="subst">$&#123;concurrencyCount&#125;</span> 条的数据data:\r\n<span class="subst">$&#123;[</span></span></span><br><span class="line"><span class="string"><span class="subst">          <span class="built_in">JSON</span>.stringify(getItem)</span></span></span><br><span class="line"><span class="string"><span class="subst">        ]&#125;</span>`</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      callback(<span class="literal">null</span>, getItem);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Promise</span>.race([getHomePageUrls])</span><br><span class="line">    .then(<span class="function"><span class="params">itemUrls</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`\r\n开始并发 <span class="subst">$&#123;TIEMS&#125;</span> 次请求...\r\n`</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">async</span>.mapLimit(</span><br><span class="line">        itemUrls,</span><br><span class="line">        TIEMS,</span><br><span class="line">        (url, callback) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.time(<span class="string">"delay"</span>);</span><br><span class="line">          fetchUrl(url, callback);</span><br><span class="line">          <span class="built_in">console</span>.timeEnd(<span class="string">"delay"</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        (err, results) =&gt; &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"\r获取到的数据: \r\n"</span>, results);</span><br><span class="line">          res.json(results);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(err));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(PORT, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"App is listening at port "</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;爬一下-CNode-专业中文社区&quot;&gt;&lt;a href=&quot;#爬一下-CNode-专业中文社区&quot; class=&quot;headerlink&quot; title=&quot;爬一下 CNode 专业中文社区&quot;&gt;&lt;/a&gt;爬一下 CNode 专业中文社区&lt;/h2&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://47.101.33.81/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="http://47.101.33.81/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs系列之Events</title>
    <link href="http://47.101.33.81/2019/06/25/node-events/"/>
    <id>http://47.101.33.81/2019/06/25/node-events/</id>
    <published>2019-06-25T12:11:58.000Z</published>
    <updated>2019-11-11T06:52:24.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js-事件循环"><a href="#Node-js-事件循环" class="headerlink" title="Node.js 事件循环"></a>Node.js 事件循环</h2><p>Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。</p><a id="more"></a><p>Node.js 几乎每一个 API 都是支持回调函数的。</p><p>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。</p><p>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p><p><code>EventEmitter</code> 提供了多个属性，如<code>on</code>和<code>emit</code>。</p><p><code>on</code> 函数用于绑定事件函数，<code>emit</code> 属性用于触发一个事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'建立连接...'</span>)</span><br><span class="line">  <span class="comment">// 触发 dataReceived 事件</span></span><br><span class="line">  eventEmitter.emit(<span class="string">'dataReceived'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定 dataReceived 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'dataReceived'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'接收数据中...'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发 connection 事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"数据接收完毕！"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜ node 02-event.js</span><br><span class="line">建立连接...</span><br><span class="line">接收数据中...</span><br><span class="line">数据接收完毕！</span><br></pre></td></tr></table></figure><p>EventEmitter 类写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// class 继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line"></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'触发事件'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>);</span><br></pre></td></tr></table></figure><h2 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h2><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 <code>net.Server</code> 对象会在每次有新连接时触发一个事件， 一个 <code>fs.readStream</code> 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 <code>events.EventEmitter</code> 的实例。</p><p>EventEmitter 类由 events 模块定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter();</span><br></pre></td></tr></table></figure><p><code>EventEmitter</code> 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。</p><p>对于每个事件，<code>EventEmitter</code> 支持 若干个事件监听器。</p><p>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个监听器。</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> <span class="title">firstListener</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'第一个监听器'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二个监听器。</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> <span class="title">secondListener</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`第二个监听器中的事件有参数 <span class="subst">$&#123;arg1&#125;</span>、<span class="subst">$&#123;arg2&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第三个监听器</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, <span class="function"><span class="keyword">function</span> <span class="title">thirdListener</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> parameters = args.join(<span class="string">', '</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`第三个监听器中的事件有参数 <span class="subst">$&#123;parameters&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myEmitter.listeners(<span class="string">'event'</span>));</span><br><span class="line"></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>myEmitter 为事件 event 注册了三个个事件监听器，然后触发 event 事件，输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一个监听器</span><br><span class="line">第二个监听器中的事件有参数 1、2</span><br><span class="line">第三个监听器中的事件有参数 1, 2, 3, 4, 5</span><br></pre></td></tr></table></figure><p><code>EventEmitter</code> 提供了多个属性，初了绑定事件函数的<code>on</code>和触发事件函数的<code>emit</code>，还有如下一些属性：</p><ul><li><p>addListener(event, listener)<br>为指定事件添加一个监听器到监听器数组的尾部，<code>emitter.on(eventName, listener)</code> 的别名。</p></li><li><p>once(event, listener)<br>为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器</p></li><li><p>removeListener(event, listener)<br>移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器</p></li><li><p>removeAllListeners([event])<br>移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器</p></li><li><p>setMaxListeners(n)<br>默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</p></li><li><p>listeners(event)<br>返回名为 eventName 的事件的监听器数组的副本</p></li><li><p>on(event, listener)<br>为指定事件注册一个监听器，接受一个字符串 event 和一个回调函数</p></li><li><p>off(eventName, listener)<br><code>removeListener()</code> 的别名</p></li><li><p>emit(event, [arg1], [arg2], […])<br>按监听器的顺序执行执行每个监听器，如果事件有注册监听返回 true，否则返回 false</p></li><li><p>listenerCount(eventName)<br>返回正在监听的名为 eventName 的事件的监听器的数量</p></li></ul><p>练习下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>)</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> listener1 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器1启动'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> listener2 = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'监听器2启动'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, listener1)</span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, listener2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> listeners = myEmitter.listenerCount(<span class="string">'event'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`现在有<span class="subst">$&#123;listeners&#125;</span>个监听器正在监听事件`</span>)</span><br><span class="line"></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>)</span><br><span class="line"></span><br><span class="line">myEmitter.off(<span class="string">'event'</span>, listener1)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'监听器1已被移除'</span>)</span><br><span class="line"></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>)</span><br><span class="line"></span><br><span class="line">listeners = myEmitter.listenerCount(<span class="string">'event'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`现在有 <span class="subst">$&#123;listeners&#125;</span> 个监听器正在监听事件`</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'End!'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[nodemon] starting `node 04-event.js`</span><br><span class="line">现在有2个监听器正在监听事件</span><br><span class="line">监听器1启动</span><br><span class="line">监听器2启动</span><br><span class="line">监听器1已被移除</span><br><span class="line">监听器2启动</span><br><span class="line">现在有 1 个监听器正在监听事件</span><br><span class="line">End!</span><br></pre></td></tr></table></figure><h2 id="错误事件"><a href="#错误事件" class="headerlink" title="错误事件"></a>错误事件</h2><p>当 EventEmitter 实例出错时，应该触发 ‘error’ 事件。 这些在 Node.js 中被视为特殊情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmitter</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误信息'</span>));</span><br></pre></td></tr></table></figure><p>如果没有为 ‘error’ 事件注册监听器，则当 ‘error’ 事件触发时，会抛出错误、打印堆栈跟踪、并退出 Node.js 进程。</p><p>所以最佳实践是，应该始终为 ‘error’ 事件注册监听器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">myEmitter.on(<span class="string">'error'</span>, (err) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'错误信息'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myEmitter.emit(<span class="string">'error'</span>, <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错误'</span>));</span><br><span class="line"><span class="comment">// 打印: 错误信息</span></span><br></pre></td></tr></table></figure><h2 id="Node-应用程序是如何工作的"><a href="#Node-应用程序是如何工作的" class="headerlink" title="Node 应用程序是如何工作的"></a>Node 应用程序是如何工作的</h2><p>创建一个 input.txt ,文件内容如：<code>www.runoob.com</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻塞</span></span><br><span class="line"><span class="comment">// 在文件读取完后才执行完程序</span></span><br><span class="line"><span class="keyword">const</span> getData = fs.readFileSync(<span class="string">'test/input.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getData.toString())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'阻塞程序运行结束'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非阻塞</span></span><br><span class="line"><span class="comment">// 不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能</span></span><br><span class="line">fs.readFile(<span class="string">'test/input.txt'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'非阻塞程序运行结束'</span>)</span><br></pre></td></tr></table></figure><p>如果没发生错误，readFileSync 或者 readFile 跳过 err 对象的输出，文件内容就通过回调函数输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">www.runoob.com</span><br><span class="line">阻塞程序运行结束</span><br><span class="line">非阻塞程序运行结束</span><br><span class="line">www.runoob.com</span><br></pre></td></tr></table></figure><p>接下来我们删除 input.txt 文件，执行结果如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; [Error: ENOENT: no such file or directory, open <span class="string">'input.txt'</span>] errno: -2, code: <span class="string">'ENOENT'</span>, syscall: <span class="string">'open'</span>, path: <span class="string">'input.txt'</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>菜鸟教程之 <a href="https://www.runoob.com/nodejs/nodejs-event.html" target="_blank" rel="noopener">Node.js 学习</a></li><li>官方文档之 <a href="http://nodejs.cn/api/events.html" target="_blank" rel="noopener">events（事件触发器）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Node-js-事件循环&quot;&gt;&lt;a href=&quot;#Node-js-事件循环&quot; class=&quot;headerlink&quot; title=&quot;Node.js 事件循环&quot;&gt;&lt;/a&gt;Node.js 事件循环&lt;/h2&gt;&lt;p&gt;Node.js 是单进程单线程应用程序，但是因为 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以性能非常高。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://47.101.33.81/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="http://47.101.33.81/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs系列之HTTP</title>
    <link href="http://47.101.33.81/2019/06/14/node-http/"/>
    <id>http://47.101.33.81/2019/06/14/node-http/</id>
    <published>2019-06-14T11:10:40.000Z</published>
    <updated>2019-11-11T06:51:25.375Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>超文本传输协议，是一种 Web 协议，属于 TCP 上层的协议。</p></blockquote><p>HTTP 模块式 Node 的核心模块，主要提供了一系列用于网络传输的 API。</p><a id="more"></a><p>HTTP 消息头如下所示(键是小写的，值不能被修改)：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"content-length"</span>: <span class="string">"123"</span>,</span><br><span class="line">  <span class="attr">"content-type"</span>: <span class="string">"text/plain"</span>,</span><br><span class="line">  <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"mysite.com"</span>,</span><br><span class="line">  <span class="attr">"accept"</span>: <span class="string">"*/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建-HTTP-服务器"><a href="#创建-HTTP-服务器" class="headerlink" title="创建 HTTP 服务器"></a>创建 HTTP 服务器</h2><p>使用 NodeJS 内置的 http 模块简单实现一个 HTTP 服务器:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line">    response.end(<span class="string">"Hello World!"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>以上程序创建了一个 HTTP 服务器并监听 3000 端口，打开浏览器访问该端口<code>http://127.0.0.1:3000/</code>就能够看到效果。</p><p>使用 createServer 创建一个 HTTP 服务器，该方法返回一个 http.server 类的实例。</p><p>createServer 方法包含了一个匿名的回调函数，该函数有两个参数 request，response，它们是 IncomingMessage 和 ServerResponse 的实例。</p><p>分别表示 HTTP 的 request 和 response 对象，当服务器创建完成后，Node 进程开始循环监听 3000 端口。</p><p>http.server 类定义了一系列的事件，如 connection 和 request 事件。</p><h2 id="处理-HTTP-请求"><a href="#处理-HTTP-请求" class="headerlink" title="处理 HTTP 请求"></a>处理 HTTP 请求</h2><h3 id="method，URL-和-header"><a href="#method，URL-和-header" class="headerlink" title="method，URL 和 header"></a>method，URL 和 header</h3><p>Node 将相关的信息封装在一个对象（request）中，该对象是 IncomingMessage 的实例。</p><p>获取 method、URL：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> method = req.method;</span><br><span class="line"><span class="keyword">const</span> url = req.url;</span><br></pre></td></tr></table></figure><p>比如访问<code>http://127.0.0.1:8000/index.html?name=tao</code>，就会输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"/index.html?name=tao"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL 的值为去除网站服务器地址之外的完整值。</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>获取 HTTP header 信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> headers = req.headers;</span><br><span class="line"><span class="keyword">const</span> userAgent = headers[<span class="string">"user-agent"</span>];</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1:8000"</span>,</span><br><span class="line">    <span class="attr">"user-agent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0"</span>,</span><br><span class="line">    <span class="attr">"accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>,</span><br><span class="line">    <span class="attr">"accept-language"</span>: <span class="string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span>,</span><br><span class="line">    <span class="attr">"accept-encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">    <span class="attr">"upgrade-insecure-requests"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"cache-control"</span>: <span class="string">"max-age=0"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"userAgent"</span>: <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:68.0) Gecko/20100101 Firefox/68.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>header 是一个 JSON 对象，可以对属性名进行单独索引。</p><h3 id="request-body"><a href="#request-body" class="headerlink" title="request body"></a>request body</h3><p>Node 使用 stream 处理 HTTP 的请求体，并且注册了两个事件：data 和 end。</p><p>获取完整的 HTTP 内容体：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> body = [];</span><br><span class="line"></span><br><span class="line">request.on(<span class="string">"data"</span>, chunk =&gt; &#123;</span><br><span class="line">  body.push(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">request.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">  body = Buffer.concat(body).toString();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Response-对象"><a href="#Response-对象" class="headerlink" title="Response 对象"></a>Response 对象</h2><h2 id="get-post-请求"><a href="#get-post-请求" class="headerlink" title="get/post 请求"></a>get/post 请求</h2><p>综上所述，我们来组织一个简易的 get、post 请求实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> method = req.method;</span><br><span class="line">    <span class="keyword">const</span> url = req.url;</span><br><span class="line">    <span class="keyword">const</span> path = url.split(<span class="string">"?"</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">const</span> query = querystring.parse(url.split(<span class="string">"?"</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">const</span> headers = req.headers;</span><br><span class="line">    <span class="keyword">const</span> userAgent = headers[<span class="string">"user-agent"</span>];</span><br><span class="line">    <span class="keyword">const</span> resData = &#123;</span><br><span class="line">      method,</span><br><span class="line">      url,</span><br><span class="line">      path,</span><br><span class="line">      query,</span><br><span class="line">      headers,</span><br><span class="line">      userAgent</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    res.setHeader(<span class="string">"Content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">"GET"</span>) &#123;</span><br><span class="line">      res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">"POST"</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> postData = [];</span><br><span class="line"></span><br><span class="line">      req.on(<span class="string">"data"</span>, chunk =&gt; &#123;</span><br><span class="line">        postData.push(chunk);</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      req.on(<span class="string">"end"</span>, () =&gt; &#123;</span><br><span class="line">        resData.postData = Buffer.concat(postData).toString();</span><br><span class="line">        res.end(<span class="built_in">JSON</span>.stringify(resData));</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><p>比如<code>POST</code>请求 <code>http://127.0.0.1:8000/api/blog?ip=2</code>，然后使用 Postman 工具测试结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"/api/blog?ip=2"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/api/blog"</span>,</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"ip"</span>: <span class="string">"2"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"content-type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">    <span class="attr">"cache-control"</span>: <span class="string">"no-cache"</span>,</span><br><span class="line">    <span class="attr">"postman-token"</span>: <span class="string">"9e6cb382-8551-4a3f-b352-0581bb377cbc"</span>,</span><br><span class="line">    <span class="attr">"user-agent"</span>: <span class="string">"PostmanRuntime/7.6.0"</span>,</span><br><span class="line">    <span class="attr">"accept"</span>: <span class="string">"*/*"</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"127.0.0.1:8000"</span>,</span><br><span class="line">    <span class="attr">"accept-encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">    <span class="attr">"content-length"</span>: <span class="string">"62"</span>,</span><br><span class="line">    <span class="attr">"connection"</span>: <span class="string">"keep-alive"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"userAgent"</span>: <span class="string">"PostmanRuntime/7.6.0"</span>,</span><br><span class="line">  <span class="attr">"postData"</span>: <span class="string">"&#123;\n\t\"title\": \"你说什么\",\n\t\"content\": \"我知道你知道\"\n&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><a href="http://nodejs.cn/api/http.html" target="_blank" rel="noopener">http</a> 模块提供两种使用方式：</p><ol><li>作为服务端使用时，创建一个 HTTP 服务器，监听 HTTP 客户端请求并返回响应。</li><li>作为客户端使用时，发起一个 HTTP 客户端请求，获取服务端响应。</li></ol><h3 id="一个简单的-Web-服务器"><a href="#一个简单的-Web-服务器" class="headerlink" title="一个简单的 Web 服务器"></a>一个简单的 Web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"/"</span> == req.url) &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">      res.end(</span><br><span class="line">        [</span><br><span class="line">          <span class="string">'&lt;form method="POST" action="/url"&gt;'</span>,</span><br><span class="line">          <span class="string">"&lt;h1&gt;My Form&lt;/h1&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;fieldset&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;label&gt;Personal information&lt;/label&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;p&gt;What is your name?&lt;/p&gt;"</span>,</span><br><span class="line">          <span class="string">'&lt;input type="text" name="name" /&gt;'</span>,</span><br><span class="line">          <span class="string">"&lt;p&gt;&lt;button&gt;Submit&lt;/button&gt;&lt;/p&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;/fieldset&gt;"</span>,</span><br><span class="line">          <span class="string">"&lt;/form&gt;"</span></span><br><span class="line">        ].join(<span class="string">""</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"/url"</span> == req.url &amp;&amp; <span class="string">"POST"</span> == req.method) &#123;</span><br><span class="line">      <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">      req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        body += chunk;</span><br><span class="line">      &#125;);</span><br><span class="line">      req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">        res.end(</span><br><span class="line">          <span class="string">"&lt;p&gt;Content-type: "</span> +</span><br><span class="line">            req.headers[<span class="string">"content-type"</span>] +</span><br><span class="line">            <span class="string">"&lt;/p&gt;"</span> +</span><br><span class="line">            <span class="string">"&lt;p&gt;Data: "</span> +</span><br><span class="line">            qs.parse(body).name +</span><br><span class="line">            <span class="string">"&lt;/p&gt;"</span></span><br><span class="line">        );</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">404</span>);</span><br><span class="line">      res.end(<span class="string">"Not Found."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="一个-Twitter-Web-客户端"><a href="#一个-Twitter-Web-客户端" class="headerlink" title="一个 Twitter Web 客户端"></a>一个 Twitter Web 客户端</h3><p>创建服务器：app.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">    req.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">      body += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>);</span><br><span class="line">      res.end(<span class="string">"Done"</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"\n got name \033[90m"</span> + qs.parse(body).name + <span class="string">"\033[39m\n"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>创建客户端：client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params">theName</span>) </span>&#123;</span><br><span class="line">  http</span><br><span class="line">    .request(</span><br><span class="line">      &#123;</span><br><span class="line">        host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">        port: <span class="number">3000</span>,</span><br><span class="line">        url: <span class="string">"/"</span>,</span><br><span class="line">        method: <span class="string">"POST"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> body = <span class="string">""</span>;</span><br><span class="line">        res.setEncoding(<span class="string">"utf8"</span>);</span><br><span class="line">        res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">          body += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line">        res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">"\n  \033[90m request complete! \033[39m"</span>);</span><br><span class="line">          process.stdout.write(<span class="string">"\n your name: "</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .end(qs.stringify(&#123; <span class="attr">name</span>: theName &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">process.stdout.write(<span class="string">"\n your name: "</span>);</span><br><span class="line">process.stdin.resume();</span><br><span class="line">process.stdin.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">process.stdin.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  send(name.replace(<span class="string">"\n"</span>, <span class="string">""</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>启动<code>node app.js</code>，再启动<code>node client.js</code></p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS 是基于 TLS/SSL 的 HTTP 协议。在 Node.js 中，作为一个单独的模块实现。</p><p>HTTPS 模块与 HTTP 模块极为类似，区别在于 HTTPS 模块需要额外处理 SSL 证书。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">"https"</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  key: fs.readFileSync(<span class="string">"test/fixtures/keys/agent2-key.pem"</span>),</span><br><span class="line">  cert: fs.readFileSync(<span class="string">"test/fixtures/keys/agent2-cert.pem"</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">https</span><br><span class="line">  .createServer(options, (req, res) =&gt; &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(<span class="string">"hello world\n"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>处理 HTTP 请求时 url 模块使用率超高，因为该模块允许解析 URL、生成 URL，以及拼接 URL。</p><p>首先我们来看看一个完整的 URL 的各组成部分，输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; require(<span class="string">'url'</span>).parse(<span class="string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span>);</span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: <span class="string">'http:'</span>,</span><br><span class="line">  slashes: <span class="literal">true</span>,</span><br><span class="line">  auth: <span class="string">'user:pass'</span>,</span><br><span class="line">  host: <span class="string">'host.com:8080'</span>,</span><br><span class="line">  port: <span class="string">'8080'</span>,</span><br><span class="line">  hostname: <span class="string">'host.com'</span>,</span><br><span class="line">  <span class="built_in">hash</span>: <span class="string">'#hash'</span>,</span><br><span class="line">  search: <span class="string">'?query=string'</span>,</span><br><span class="line">  query: <span class="string">'query=string'</span>,</span><br><span class="line">  pathname: <span class="string">'/p/a/t/h'</span>,</span><br><span class="line">  path: <span class="string">'/p/a/t/h?query=string'</span>,</span><br><span class="line">  href: <span class="string">'http://user:pass@host.com:8080/p/a/t/h?query=string#hash'</span>&#125;</span><br></pre></td></tr></table></figure><p>当然，不完整的 url，也可以解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">  .createServer(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> body = [];</span><br><span class="line">    <span class="keyword">const</span> tmp = request.url; <span class="comment">// /foo/bar?a=b</span></span><br><span class="line"></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"url-parse"</span>, url.parse(tmp));</span><br><span class="line"></span><br><span class="line">    response.end(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"protocol"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"slashes"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"auth"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"port"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"hostname"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"hash"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"search"</span>: <span class="string">"?a=b"</span>,</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"a=b"</span>,</span><br><span class="line">  <span class="attr">"pathname"</span>: <span class="string">"/foo/bar"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/foo/bar?a=b"</span>,</span><br><span class="line">  <span class="attr">"href"</span>: <span class="string">"/foo/bar?a=b"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>format 方法允许将一个 URL 对象转换为 URL 字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> urlFormat = url.format(&#123;</span><br><span class="line">  protocol: <span class="string">"http:"</span>,</span><br><span class="line">  host: <span class="string">"www.example.com"</span>,</span><br><span class="line">  pathname: <span class="string">"/p/a/t/h"</span>,</span><br><span class="line">  search: <span class="string">"query=string"</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(&#123; urlFormat &#125;); <span class="comment">// &#123; urlFormat: 'http://www.example.com/p/a/t/h?query=string' &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Query-String"><a href="#Query-String" class="headerlink" title="Query String"></a>Query String</h2><p><a href="http://nodejs.org/api/querystring.html" target="_blank" rel="noopener">querystring</a> 模块用于实现 URL 参数字符串与参数对象的互相转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">querystring.parse(<span class="string">"foo=bar&amp;baz=qux&amp;baz=quux&amp;corge"</span>);</span><br><span class="line"><span class="comment">// &#123; foo: 'bar', baz: [ 'qux', 'quux' ], corge: '' &#125;</span></span><br><span class="line"></span><br><span class="line">querystring.stringify(&#123; <span class="attr">foo</span>: <span class="string">"bar"</span>, <span class="attr">baz</span>: [<span class="string">"qux"</span>, <span class="string">"quux"</span>], <span class="attr">corge</span>: <span class="string">""</span> &#125;);</span><br><span class="line"><span class="comment">// 'foo=bar&amp;baz=qux&amp;baz=quux&amp;corge='</span></span><br></pre></td></tr></table></figure><h2 id="Zlib"><a href="#Zlib" class="headerlink" title="Zlib"></a>Zlib</h2><p>zlib 模块提供了数据压缩和解压的功能。当我们处理 HTTP 请求和响应时，可能需要用到这个模块。</p><h2 id="Net"><a href="#Net" class="headerlink" title="Net"></a>Net</h2><p>net 模块可用于创建 Socket 服务器或 Socket 客户端。</p><p>由于 Socket 在前端领域的使用范围还不是很广，这里先不涉及到 WebSocket 的介绍，仅仅简单演示一下如何从 Socket 层面来实现 HTTP 请求和响应。</p><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><p>使用 NodeJS 操作网络，特别是操作 HTTP 请求和响应时会遇到一些惊喜，这里对一些常见问题做解答。</p><ul><li>为什么通过 headers 对象访问到的 HTTP 请求头或响应头字段不是驼峰的？</li></ul><p>从规范上讲，HTTP 请求头和响应头字段都应该是驼峰的。但现实是残酷的，不是每个 HTTP 服务端或客户端程序都严格遵循规范，所以 NodeJS 在处理从别的客户端或服务端收到的头字段时，都统一地转换为了小写字母格式，以便开发者能使用统一的方式来访问头字段，例如<code>headers[&#39;content-length&#39;]</code>。</p><ul><li>为什么 http 模块创建的 HTTP 服务器返回的响应是 chunked 传输方式的？</li></ul><p>因为默认情况下，使用<code>.writeHead</code>方法写入响应头后，允许使用<code>.write</code>方法写入任意长度的响应体数据，并使用<code>.end</code>方法结束一个响应。由于响应体数据长度不确定，因此 NodeJS 自动在响应头里添加了<code>Transfer-Encoding: chunked</code>字段，并采用 chunked 传输方式。但是当响应体数据长度确定时，可使用<code>.writeHead</code>方法在响应头里加上<code>Content-Length</code>字段，这样做之后 NodeJS 就不会自动添加<code>Transfer-Encoding</code>字段和使用 chunked 传输方式。</p><ul><li>为什么使用 http 模块发起 HTTP 客户端请求时，有时候会发生 socket hang up 错误？</li></ul><p>答： 发起客户端 HTTP 请求前需要先创建一个客户端。http 模块提供了一个全局客户端<code>http.globalAgent</code>，可以让我们使用<code>.request</code>或<code>.get</code>方法时不用手动创建客户端。但是全局客户端默认只允许 5 个并发 Socket 连接，当某一个时刻 HTTP 客户端请求创建过多，超过这个数字时，就会发生<code>socket hang up</code>错误。解决方法也很简单，通过<code>http.globalAgent.maxSockets</code>属性把这个数字改大些即可。另外，https 模块遇到这个问题时也一样通过<code>https.globalAgent.maxSockets</code>属性来处理。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="http://nqdeng.github.io/7-days-nodejs/#1.1" target="_blank" rel="noopener">7-days-nodejs</a> - 文章</li><li>《了不起的 Node.js：将 JavaScript 进行到底》- 书籍</li><li>《新时期的 Node.js 入门》- 书籍</li><li><a href="https://coding.imooc.com/class/320.html" target="_blank" rel="noopener">Node.js 从零开发 Web Server 博客项目 前端晋升全栈工程师必备</a> - 视频</li><li><a href="http://nodejs.cn/api/http.html" target="_blank" rel="noopener">http（HTTP）</a> - 官方文档</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;超文本传输协议，是一种 Web 协议，属于 TCP 上层的协议。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;HTTP 模块式 Node 的核心模块，主要提供了一系列用于网络传输的 API。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://47.101.33.81/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="http://47.101.33.81/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs系列之TCP</title>
    <link href="http://47.101.33.81/2019/06/12/node-tcp/"/>
    <id>http://47.101.33.81/2019/06/12/node-tcp/</id>
    <published>2019-06-12T11:37:08.000Z</published>
    <updated>2019-11-11T06:47:58.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>传输控制协议（TCP）是一个面向连接的协议，保证了两台计算机之间数据传输的可靠性和顺序。</p><p>Node HTTP 服务器是构建于 Node TCP 服务器之上的。</p><a id="more"></a><p>TCP 的特性：</p><ul><li>面向连接的通信和保证顺序的传递</li><li>面向字节 - ASCII、Unicode</li><li>可靠性</li><li>流控制</li><li>拥堵控制 - Qos</li></ul><p>Socket 是对 TCP 协议的一种封装方式，Socket本身不是协议，而是一个编程接口。</p><h2 id="telnet允许在终端手动建立一个TCP连接"><a href="#telnet允许在终端手动建立一个TCP连接" class="headerlink" title="telnet允许在终端手动建立一个TCP连接"></a>telnet允许在终端手动建立一个TCP连接</h2><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>使用 Node.js 写一个web服务器，并监听 3000 端口，然后 <code>node app.js</code> 运行下是否正确<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'http'</span>).createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>);</span><br><span class="line">  res.end(<span class="string">'Hello world'</span>);</span><br><span class="line">&#125;).listen(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure></p><h4 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h4><p>使用<code>telnet 127.0.0.1 3000</code>建立一个连接，然后输入<code>GET / HTTP/1.1</code>，回车两次，然后服务器端就出现了响应：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~ telnet 127.0.0.1 3000</span><br><span class="line"></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Sun, 15 Sep 2019 06:20:43 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line"></span><br><span class="line">b</span><br><span class="line">Hello world</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></p><p>总结：</p><ul><li>成功建立了一个 TCP 连接</li><li>创建了一个HTTP请求</li><li>接收到一个HTTP响应</li><li>到达的数据和在Node.js中写的一样</li></ul><h2 id="基于TCP的聊天程序"><a href="#基于TCP的聊天程序" class="headerlink" title="基于TCP的聊天程序"></a>基于TCP的聊天程序</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>,</span><br><span class="line">  users = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = net.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">conn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nickname;</span><br><span class="line"></span><br><span class="line">  conn.setEncoding(<span class="string">'utf8'</span>)</span><br><span class="line">  conn.write(</span><br><span class="line">    <span class="string">'\n &gt; 欢迎访问 \033[92mNode-Chat\033[39m!'</span></span><br><span class="line">  + <span class="string">'\n &gt; '</span> + count + <span class="string">'个其他用户已连接'</span></span><br><span class="line">  + <span class="string">'\n &gt; 请输入你的用户名并回车：'</span></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  count++</span><br><span class="line"></span><br><span class="line">  conn.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    data = data.replace(<span class="string">'\r\n'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!nickname) &#123;</span><br><span class="line">      <span class="keyword">if</span>(users[data]) &#123;</span><br><span class="line">        conn.write(<span class="string">'\033[93m&gt; 昵称已被使用，请重试：\033[39m '</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nickname = data</span><br><span class="line">        users[nickname] = conn</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'users: '</span>, conn)</span><br><span class="line">        broadcast(<span class="string">'\033[90m &gt; '</span> + nickname + <span class="string">' 上线了\033[39m\n'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      broadcast(<span class="string">'\033[96m &gt; '</span> + nickname + <span class="string">':\033[39m '</span> + data + <span class="string">'\n'</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  conn.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count--</span><br><span class="line">    <span class="keyword">delete</span> users[nickname]</span><br><span class="line">    broadcast(<span class="string">'\033[90m &gt; '</span> + nickname + <span class="string">' 下线了\033[39m\n'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 向每一个用户发送信息</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">broadcast</span> (<span class="params">msg, exceptMyself</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> users) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!exceptMyself || i != nickname) &#123;</span><br><span class="line">        users[i].write(msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'\033[96m  server listening on *: 3000\033[39m'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>单独运行：<code>telnet 127.0.0.1 3000</code>，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">~ telnet 127.0.0.1 3000</span><br><span class="line"></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line"></span><br><span class="line"> &gt; 欢迎访问 Node-Chat!</span><br><span class="line"> &gt; 0个其他用户已连接</span><br><span class="line"> &gt; 请输入你的用户名并回车：XiaoMing</span><br><span class="line"> &gt; XiaoMing 上线了</span><br><span class="line">Hi </span><br><span class="line"> &gt; HanMeimei 上线了</span><br><span class="line"> &gt; HanMeimei: Hello</span><br><span class="line"> &gt; LiSi 上线了</span><br><span class="line"> &gt; LiSi: Ni hao ma?</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二位用户</span></span><br><span class="line"> &gt; 欢迎访问 Node-Chat!</span><br><span class="line"> &gt; 1个其他用户已连接</span><br><span class="line"> &gt; 请输入你的用户名并回车：HanMeimei</span><br><span class="line"> &gt; HanMeimei 上线了</span><br><span class="line">Hello</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三位用户</span></span><br><span class="line"> &gt; 欢迎访问 Node-Chat!</span><br><span class="line"> &gt; 2个其他用户已连接</span><br><span class="line"> &gt; 请输入你的用户名并回车：LiSi</span><br><span class="line"> &gt; LiSi 上线了</span><br><span class="line">Ni hao ma?</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;传输控制协议（TCP）是一个面向连接的协议，保证了两台计算机之间数据传输的可靠性和顺序。&lt;/p&gt;
&lt;p&gt;Node HTTP 服务器是构建于 Node TCP 服务器之上的。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://47.101.33.81/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="http://47.101.33.81/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs系列之Connect</title>
    <link href="http://47.101.33.81/2019/06/11/node-connect/"/>
    <id>http://47.101.33.81/2019/06/11/node-connect/</id>
    <published>2019-06-11T06:28:31.000Z</published>
    <updated>2019-11-11T06:41:52.056Z</updated>
    
    <content type="html"><![CDATA[<p>Connect 是一个基于 HTTP 服务器的工具集，成为中间件（middleware）。</p><p>中间件，其实就是一个简单的 JavaScript 函数。除了处理 req 和 res 对象之外，还接受一个 next 函数来做流控制。</p><a id="more"></a><h2 id="一个简单的网站"><a href="#一个简单的网站" class="headerlink" title="一个简单的网站"></a>一个简单的网站</h2><p>初始化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</span><br><span class="line"><span class="keyword">var</span> serveStatic = <span class="built_in">require</span>(<span class="string">"serve-static"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = connect();</span><br><span class="line"></span><br><span class="line">app.use(serveStatic(path.join(__dirname, <span class="string">"public-optimized"</span>)));</span><br><span class="line">app.use(serveStatic(path.join(__dirname, <span class="string">"public"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// respond to all requests</span></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.end(<span class="string">"Hello from Connect!\n"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create node.js http server and listen on port</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>中间件的使用，模拟登录登出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">"connect"</span>);</span><br><span class="line"><span class="keyword">var</span> morgan = <span class="built_in">require</span>(<span class="string">"morgan"</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">"body-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">"cookie-parser"</span>);</span><br><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">"express-session"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">require</span>(<span class="string">"./config/users.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// logger</span></span><br><span class="line">app.use(morgan(<span class="string">"dev"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse an HTML body into a string</span></span><br><span class="line">app.use(bodyParser());</span><br><span class="line"></span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.use(</span><br><span class="line">  session(&#123;</span><br><span class="line">    secret: <span class="string">"my site secret"</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/"</span> == req.url &amp;&amp; req.session.logged_in) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(</span><br><span class="line">      <span class="string">`Welcome back, &lt;b&gt;<span class="subst">$&#123;req.session.name&#125;</span>&lt;/b&gt;&lt;a href="/logout"&gt;Logout&lt;/a&gt;`</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/"</span> == req.url &amp;&amp; <span class="string">"GET"</span> == req.method) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    res.end(</span><br><span class="line">      [</span><br><span class="line">        <span class="string">'&lt;form method="POST" action="/login"&gt;'</span>,</span><br><span class="line">        <span class="string">"&lt;h1&gt;Login&lt;/h1&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;fieldset&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;label&gt;Please log in&lt;/label&gt;"</span>,</span><br><span class="line">        <span class="string">'Username: &lt;input type="text" name="user" /&gt;&lt;br&gt;'</span>,</span><br><span class="line">        <span class="string">'Password: &lt;input type="password" name="password" /&gt;'</span>,</span><br><span class="line">        <span class="string">"&lt;p&gt;&lt;button&gt;Submit&lt;/button&gt;&lt;/p&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;/fieldset&gt;"</span>,</span><br><span class="line">        <span class="string">"&lt;/form&gt;"</span></span><br><span class="line">      ].join(<span class="string">""</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/login"</span> == req.url &amp;&amp; <span class="string">"POST"</span> == req.method) &#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html"</span> &#125;);</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !users[req.body.user] ||</span><br><span class="line">      req.body.password != users[req.body.user].password</span><br><span class="line">    ) &#123;</span><br><span class="line">      res.end(<span class="string">'Bad username/password&lt;br&gt;&lt;a href="/"&gt;Back&lt;/a&gt;'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      req.session.logged_in = <span class="literal">true</span>;</span><br><span class="line">      req.session.name = users[req.body.user].name;</span><br><span class="line">      res.end(<span class="string">"Success!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"/logout"</span> == req.url) &#123;</span><br><span class="line">    req.session.logged_in = <span class="literal">false</span>;</span><br><span class="line">    res.writeHead(<span class="number">200</span>);</span><br><span class="line">    res.end(<span class="string">"Logged out!"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//create node.js http server and listen on port</span></span><br><span class="line">http.createServer(app).listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Connect 是一个基于 HTTP 服务器的工具集，成为中间件（middleware）。&lt;/p&gt;
&lt;p&gt;中间件，其实就是一个简单的 JavaScript 函数。除了处理 req 和 res 对象之外，还接受一个 next 函数来做流控制。&lt;/p&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="http://47.101.33.81/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="http://47.101.33.81/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>js设计模式学习之单例模式</title>
    <link href="http://47.101.33.81/2019/05/03/mode-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://47.101.33.81/2019/05/03/mode-单例模式/</id>
    <published>2019-05-03T13:24:26.000Z</published>
    <updated>2019-05-03T13:27:02.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote><a id="more"></a><h4 id="实现一个单例模式"><a href="#实现一个单例模式" class="headerlink" title="实现一个单例模式"></a>实现一个单例模式</h4><p>用一个变量标志当前是否已经为某个类型创建过对象，如果是，则下次直接返回之前创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过 <code>Singleton.getInstance</code>来获取 Singleton 类的唯一对象，里边使用了 new 来获取，导致了这个类的“不透明性”。</p><h4 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h4><p>创建一个“透明”的单例类，就是让我们从这个类中创建对象的时候可以和使用其他普通类一样：<code>var aa = new CreateDiv(&#39;Sisi1&#39;);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> CreateDiv;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>下面这段代码中，CreateDiv 的构造函数负责了两件事：创建对象和执行初始化 init 方法，及保证只有一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">  <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是，如果我们要创建很多的div，这里的 <code>return instance = this;</code> 就需要删掉。</p><h4 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h4><p>这时候，为了避免上面不能复用的尴尬，通过引入代理类的方式，把负责管理单例的逻辑移交至代理类<code>ProxySingletonCreateDiv</code>，这样<code>CreateDiv</code>只是一个普通的类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ProxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-中的单例模式"><a href="#JavaScript-中的单例模式" class="headerlink" title="JavaScript 中的单例模式"></a>JavaScript 中的单例模式</h4><p>单例模式的核心是：确保只有一个实例，并提供全局访问。</p><ol><li>使用命名空间</li></ol><p>对象字面量的方式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace1.a(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>把a和b都定义为 namespace1 的属性，减少了变量和全局作用域打交道的机会，还可以动态地创建命名空间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">MyApp.namespace = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = name.split(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">var</span> current = MyApp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> parts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!current[parts[i]]) &#123;</span><br><span class="line">      current[parts[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current[parts[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyApp.namespace(<span class="string">'event'</span>);</span><br><span class="line">MyApp.namespace(<span class="string">'dom.style'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyApp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;</span><br><span class="line">  event: &#123;&#125;,</span><br><span class="line">  dom: &#123;</span><br><span class="line">    style: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 使用闭包封装私有变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用下划线约定私有变量 _name 和 _age。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _name = <span class="string">'Seven'</span>;</span><br><span class="line">  <span class="keyword">var</span> _age = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _name + <span class="string">'-'</span> + _age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.getUserInfo()) <span class="comment">// Seven-27</span></span><br></pre></td></tr></table></figure><h4 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h4><p>宗旨：在需要的时候才创建对象！！！</p><p>栗子：QQ的登录浮窗</p><p>第一种方案：页面加载完成的时候便创建好浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是，不管我们登录与否，都会创建悬浮窗，所以我们可以修改为：在点击登录的时候再创建悬浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时候，虽然达到了惰性的目的，却失去了单例的效果，每次点击登录，都会创建一个新的悬浮窗。</p><p>所以我们需要一个变量来判断是否已经创建过悬浮窗：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!div) &#123; <span class="comment">// 判断是否已创建</span></span><br><span class="line">      div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">      div.style.display = <span class="string">'none'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h4><p>虽然上面的悬浮框是一个可用的惰性单例，但是仍然违反了单一职责原则，如果我们要创建其他的标签，就需要把创建悬浮窗的函数复制一份，再修修改改，无法做到复用。</p><p>所以，我们需要把不变的部分隔离出来，进行抽象，无论创建什么标签，都是一样的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span>(!obj) &#123;</span><br><span class="line">  obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，继续：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时，我们创建其他标签就只需要关系如何创建该标签就可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createIframe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = <span class="string">'https://baidu.com'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleIframe = getSingle(createIframe);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn2'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  createSingleIframe();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>单例模式是一种简单却非常常用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。</p><p><em>创建对象</em> 和 <em>管理单例</em> 的职责被分布在两个不同的方法中，两个方法组合起来才具有单例模式的威力。</p><p>学习资料：</p><ul><li>《JavaScript 设计模式与开发实践》第 4 章</li></ul><p>发布：</p><ul><li>掘金<a href="https://juejin.im/post/5ccb927a6fb9a0324936c2c6" target="_blank" rel="noopener">《js设计模式学习之单例模式》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://47.101.33.81/categories/JavaScript/"/>
    
    
      <category term="设计模式" scheme="http://47.101.33.81/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>jQuery插件写法小结之重写轮播图功能</title>
    <link href="http://47.101.33.81/2019/05/03/plugin-slide-photo/"/>
    <id>http://47.101.33.81/2019/05/03/plugin-slide-photo/</id>
    <published>2019-05-03T13:19:29.000Z</published>
    <updated>2019-11-13T05:45:07.770Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在维护老网站的时候，发现一些jQuery库的使用有些臃肿，并且大部分自定义的js文件很容易污染全局变量，所以想着重写下，虽然jQuery的辉煌时代已经过去了，但是他的思想，依旧灿烂（滚去维护去）</p></blockquote><a id="more"></a><h2 id="先举个栗子"><a href="#先举个栗子" class="headerlink" title="先举个栗子"></a>先举个栗子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> methods = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 可自定义扩展项</span></span><br><span class="line">      options = $.extend(</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;&#125;, </span><br><span class="line">        $.fn.myPlugin.defaults,</span><br><span class="line">        options</span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'options'</span>, options, <span class="keyword">this</span>)</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Name is '</span>, $.fn.myPlugin.defaults.name, <span class="string">'.'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Age is '</span>, $.fn.myPlugin.defaults.age, <span class="string">'.'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.display == <span class="string">"none"</span> &amp;&amp; (<span class="keyword">this</span>.style.display = <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (getComputedStyle(<span class="keyword">this</span>, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>) == <span class="string">"none"</span>)</span><br><span class="line">          <span class="keyword">this</span>.style.display = defaultDisplay(<span class="keyword">this</span>.nodeName)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.css(<span class="string">"display"</span>, <span class="string">"none"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 命名空间最好只有一个</span></span><br><span class="line">  $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法调用，可满足三种情况：1. method, 2. init, 3. error</span></span><br><span class="line">    <span class="keyword">if</span>(methods[method]) &#123;</span><br><span class="line">      <span class="keyword">return</span> methods[method].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));  <span class="comment">//将具有length属性的对象转成数组</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> method === <span class="string">'object'</span> || !method) &#123;</span><br><span class="line">      <span class="comment">// 如果没有参数或者参数</span></span><br><span class="line">      <span class="keyword">return</span> methods.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $.error(<span class="string">'Method'</span> + method + <span class="string">'does not exist on jQuery.myPlugin.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.myPlugin.defaults =  &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(jQuery)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- 测试 --- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化init</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改参数</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'wuwang'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'27'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调取方法</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(<span class="string">'hide'</span>)</span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(<span class="string">'show'</span>)</span><br></pre></td></tr></table></figure><p>简单易懂，但是五脏俱全，接下来简单说明：</p><h4 id="搞定复杂参数列表"><a href="#搞定复杂参数列表" class="headerlink" title="搞定复杂参数列表"></a>搞定复杂参数列表</h4><p>首先，我们一般传参如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a1, a2, a3, a4</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>那如果不传参呐？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="literal">null</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>就需要如上使用 null 来站位，参数多了，保证你晕。</p><p>所以，我们使用 <strong>可选哈希参数（options hash）</strong>，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line">foo(<span class="number">1</span>, &#123;</span><br><span class="line">    a4: <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>接着，我们使用 jQuery 的 $.extend() 工具函数合并可选参数，并设置默认值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a1, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;</span><br><span class="line">        a2: value2,</span><br><span class="line">        a3: value3,</span><br><span class="line">        a4: value4</span><br><span class="line">    &#125;, options || &#123;&#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，就有了栗子中形态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> settings = $.extend(</span><br><span class="line">    <span class="literal">true</span>,  <span class="comment">// 是否为深拷贝</span></span><br><span class="line">    &#123;&#125;,    <span class="comment">// 使用源元素属性来扩展目标对象</span></span><br><span class="line">    $.fn.myPlugin.defaults,  <span class="comment">// 默认的一个对象，将属性添加到 target（即&#123;&#125;） 目标对象中</span></span><br><span class="line">    options  <span class="comment">// 多个源后会覆盖前面同名的属性</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样，就再也不会纠结参数的不传或者多个占位传参，挺好。</p><p>实际操作下：先看一个多个参数的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).myPlugin(&#123;</span><br><span class="line">  <span class="string">'mynewname'</span>: <span class="string">'lisi'</span>,</span><br><span class="line">  <span class="string">'mynewage'</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印settings： &#123;name: "zhangsan", age: "20", mynewname: "lisi", mynewage: 22&#125;</span></span><br></pre></td></tr></table></figure><p>再看一个：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).myPlugin(&#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'lisi'</span>,</span><br><span class="line">  <span class="string">'mynewage'</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;name: "lisi", age: "20", mynewage: 22&#125;</span></span><br></pre></td></tr></table></figure></p><p>一看就懂，有则覆盖，无则添加，完美。</p><h4 id="统一命名空间"><a href="#统一命名空间" class="headerlink" title="统一命名空间"></a>统一命名空间</h4><p>由于是jQuery插件，都挂载在 jQuery 对象下，所以恰当命名空间的插件尽可能不与其他插件冲突，甚至是 jQuery 的核心库方法。</p><p>比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;&#125;  <span class="comment">// 定义默认项</span></span><br><span class="line">    <span class="keyword">var</span> methods = &#123;&#125;  <span class="comment">// 定义方法</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;&#125;  <span class="comment">// 定义 myPlugin 命名空间并赋值一个匿名函数</span></span><br><span class="line">&#125;(jQuery)</span><br></pre></td></tr></table></figure></p><h4 id="允许公开访问默认设置"><a href="#允许公开访问默认设置" class="headerlink" title="允许公开访问默认设置"></a>允许公开访问默认设置</h4><p>为了更加的定制化，我们需要暴露默认的设置，这样我们就可以修改设置了。</p><p>首先修改 defaults 变量，为了暴露给外部世界，需要把它赋值给 $.fn 属性。并且为了统一命名空间原则，需要把它作为 myPlugin 的属性，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin.defaults =  &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接着，当使用默认值来合并参数选项时，在项目中只出现一次，即在 init() 方法里，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 可自定义扩展项</span></span><br><span class="line">      options = $.extend(</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;&#125;, </span><br><span class="line">        $.fn.myPlugin.defaults,</span><br><span class="line">        options</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当我们在浏览器里直接测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line">$.fn.myPlugin.defaults.name   <span class="comment">// zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">$.fn.myPlugin.defaults.name = <span class="string">'wangwu'</span></span><br><span class="line"><span class="comment">// "wangwu"</span></span><br></pre></td></tr></table></figure></p><h4 id="维护链式调用性"><a href="#维护链式调用性" class="headerlink" title="维护链式调用性"></a>维护链式调用性</h4><p>使用 <code>return this</code> ，可以维护链式调用性。</p><h4 id="Array-prototype-slice-call"><a href="#Array-prototype-slice-call" class="headerlink" title="Array.prototype.slice.call()"></a>Array.prototype.slice.call()</h4><p><code>Array.prototype.slice.call(arguments)</code>能将具有length属性的对象转成数组 （<code>arguments.toArray().slice()</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">length</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="string">'first'</span>,<span class="number">1</span>:<span class="string">'second'</span>&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(a);   <span class="comment">//Array [ "first", "second" ]</span></span><br></pre></td></tr></table></figure><h2 id="再举个栗子"><a href="#再举个栗子" class="headerlink" title="再举个栗子"></a>再举个栗子</h2><p>项目中经常使用轮播图，我们就在前人的基础上，模仿一下吧（你就说是抄的不就行了麽）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showPhoto</span>(<span class="params">options, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $photoElement = $(options.photoElement);</span><br><span class="line">        <span class="keyword">if</span> (!$photoElement.is(<span class="string">':animated'</span>)) &#123;</span><br><span class="line">          $photoElement.animate(&#123;</span><br><span class="line">            opacity: <span class="number">0.5</span></span><br><span class="line">          &#125;, <span class="number">0</span>).attr(</span><br><span class="line">            <span class="string">'src'</span>,</span><br><span class="line">            options.transformer(options.$thumbnails[index].src)</span><br><span class="line">          ).animate(&#123;</span><br><span class="line">            opacity: <span class="number">1</span></span><br><span class="line">          &#125;, <span class="number">800</span>);</span><br><span class="line">          options.current = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">var</span> methods = &#123;</span><br><span class="line">      init: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">         options = $.extend(</span><br><span class="line">            <span class="literal">true</span>, &#123;&#125;,</span><br><span class="line">            $.fn.slidePhoto.defaults,</span><br><span class="line">            options, &#123;</span><br><span class="line">               current: <span class="number">0</span>, <span class="comment">// 初始值为0</span></span><br><span class="line">               $thumbnails: <span class="keyword">this</span>.filter(<span class="string">'img'</span>), <span class="comment">//选出所有的图片</span></span><br><span class="line">               delay: options.delay &gt;= <span class="number">1000</span> ? options.delay : <span class="number">1000</span>,</span><br><span class="line">            &#125;</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 点击图片，切换对应大图</span></span><br><span class="line">         options.$thumbnails.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, options.$thumbnails.index(<span class="keyword">this</span>));</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示下一张</span></span><br><span class="line">         $(options.nextControl + <span class="string">', '</span> + options.photoElement).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = (options.current + <span class="number">1</span>) % options.$thumbnails.length; <span class="comment">// 取模</span></span><br><span class="line"></span><br><span class="line">            showPhoto(options, index);</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示上一张</span></span><br><span class="line">         $(options.previousControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = options.current === <span class="number">0</span> ? options.$thumbnails.length - <span class="number">1</span> : options.current - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            showPhoto(options, index);</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示第一张</span></span><br><span class="line">         $(options.firstControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, <span class="number">0</span>);</span><br><span class="line">         &#125;).triggerHandler(<span class="string">'click'</span>); <span class="comment">// 主要是初始时触发，触发被选元素上指定的事件，返回事件处理函数的返回值</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示最后一张</span></span><br><span class="line">         $(options.lastControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, options.$thumbnails.length - <span class="number">1</span>);</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 自动播放</span></span><br><span class="line">         <span class="keyword">var</span> tick;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            tick = <span class="built_in">window</span>.setInterval(</span><br><span class="line">               <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  $(options.nextControl).triggerHandler(<span class="string">'click'</span>)</span><br><span class="line">               &#125;, options.delay);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 鼠标移入移出状态</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">mouserStatus</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            $(obj).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (tick) &#123;</span><br><span class="line">                  <span class="built_in">window</span>.clearInterval(tick);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;).mouseleave(autoPlay);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (options.autoPlayControl) &#123;</span><br><span class="line">            autoPlay();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 鼠标滑动暂停、播放</span></span><br><span class="line">         mouserStatus(options.photoElement);</span><br><span class="line">         mouserStatus(options.$thumbnails);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $.fn.slidePhoto = <span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (methods[method]) &#123;</span><br><span class="line">         <span class="keyword">return</span> methods[method].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($.type(method) === <span class="string">'object'</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> methods.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         $.error(<span class="string">'Method '</span> + method + <span class="string">' does not exist on jQuery.slidePhoto'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $.fn.slidePhoto.defaults = &#123;</span><br><span class="line">      photoElement: <span class="string">'img.photomatic-photo'</span>, <span class="comment">// 大图显示</span></span><br><span class="line">      transformer: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name.replace(<span class="string">'thumbnail'</span>, <span class="string">'photo'</span>); <span class="comment">// 将'thumbnail' 替换为 'photo'，即最终返回大图的src属性值</span></span><br><span class="line">      &#125;,</span><br><span class="line">      nextControl: <span class="literal">null</span>, <span class="comment">// 下一张</span></span><br><span class="line">      previousControl: <span class="literal">null</span>, <span class="comment">// 前一张</span></span><br><span class="line">      firstControl: <span class="literal">null</span>, <span class="comment">// 第一张</span></span><br><span class="line">      lastControl: <span class="literal">null</span>, <span class="comment">// 最后一张</span></span><br><span class="line">      autoPlayControl: <span class="literal">false</span>,</span><br><span class="line">      delay: <span class="number">3000</span> <span class="comment">// 延时</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure><p>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#thumbnails-pane img'</span>).slidePhoto(&#123;</span><br><span class="line">    photoElement: <span class="string">'#photo-display'</span>,</span><br><span class="line">    previousControl: <span class="string">'#previous-button'</span>,</span><br><span class="line">    nextControl: <span class="string">'#next-button'</span>,</span><br><span class="line">    firstControl: <span class="string">'#first-button'</span>,</span><br><span class="line">    lastControl: <span class="string">'#last-button'</span>,</span><br><span class="line">    autoPlayControl: <span class="literal">true</span>,</span><br><span class="line">    delay: <span class="number">3000</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>参考：</p><ul><li>《jQuery实战 第三版》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在维护老网站的时候，发现一些jQuery库的使用有些臃肿，并且大部分自定义的js文件很容易污染全局变量，所以想着重写下，虽然jQuery的辉煌时代已经过去了，但是他的思想，依旧灿烂（滚去维护去）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具库" scheme="http://47.101.33.81/categories/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
    
      <category term="js插件" scheme="http://47.101.33.81/tags/js%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>初探 this、call 和 apply</title>
    <link href="http://47.101.33.81/2019/05/03/js-this-apply-call/"/>
    <id>http://47.101.33.81/2019/05/03/js-this-apply-call/</id>
    <published>2019-05-03T13:16:03.000Z</published>
    <updated>2019-05-03T13:22:55.761Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote><p>JavaScript 中 this 总是指向一个对象</p></blockquote><a id="more"></a><h4 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h4><ol><li>作为对象的方法调用</li></ol><p>this 指向该对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  getA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === obj); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><ol start="2"><li>作为普通函数调用</li></ol><p>当函数不作为对象的属性被调用时，普通函数的 this 总是指向全局对象，浏览器里就是 window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"globalName"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"tyang"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getName()); <span class="comment">// tyang</span></span><br><span class="line"><span class="built_in">console</span>.log(getName()); <span class="comment">// globalName</span></span><br></pre></td></tr></table></figure><p><code>obj.getName()</code> 作为 obj 对象的属性被调用，this 指向 obj 对象;</p><p><code>getName()</code> 使用变量 getName 引用 obj.getName，此时是函数调用方式，this 指向全局 window;</p><p>在严格模式，情况有所不同：this 不会指向全局对象，而是 undefined：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>当函数作为某个对象的方法调用时，this 等于那个对象。不过，匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gName = <span class="string">"The window"</span>;</span><br><span class="line"><span class="keyword">var</span> gObject = &#123;</span><br><span class="line">  gName: <span class="string">"My object"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 返回一个匿名函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.gName;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gObject.getName()()); <span class="comment">// 'The window'</span></span><br><span class="line"><span class="keyword">var</span> getNameFunc = gObject.getName();</span><br><span class="line"><span class="built_in">console</span>.log(getNameFunc()); <span class="comment">// 'The window'</span></span><br></pre></td></tr></table></figure><p>创建了一个全局对象 <code>gName</code>，这个对象包含一个方法 <code>getName()</code>， 这个方法返回一个匿名函数，这个匿名函数返回 <code>this.name</code>。因此调用 <code>gObject.getName()()</code> 会立即执行匿名函数，并返回一个字符串 <code>&#39;The window&#39;</code>。</p><p>为什么匿名函数没有取得包含作用域的 this 对象呢？</p><p>每个函数再被调用的时候，会自动取得两个特殊变量：this 和 arguments，内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。</p><p>所以，可以在外部作用域中设置一个变量来保存 this 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gName = <span class="string">"The window"</span>;</span><br><span class="line"><span class="keyword">var</span> gObject = &#123;</span><br><span class="line">  gName: <span class="string">"My object"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 将 this 对象赋值给 that 变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.gName; <span class="comment">// that 引用着 gObject</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gObject.getName()()); <span class="comment">// 'My object'</span></span><br></pre></td></tr></table></figure><p>当然，arguments 对象也可以如此使用：对该对象的引用保存到另一个闭包能够访问的变量中。</p><ol><li>构造器调用</li></ol><p>当使用 new 运算符调用函数时，该函数会返回一个对象，一般情况下，构造器里的 this 指向返回的这个对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"Lisi"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameObj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(nameObj.name); <span class="comment">// Lisi</span></span><br></pre></td></tr></table></figure><p>但是，当显式返回一个 object 类型的对象时，那最终会返回这个对象，并不是之前的 this：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"Lisi"</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 如果这里不会烦 object 类型的数据，如：return 'wangwu'，就不会返回显式对象</span></span><br><span class="line">    name: <span class="string">"wangwu"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameObj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(nameObj.name); <span class="comment">// wangwu</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Function.prototype.call 或 Function.prototype.apply 调用</li></ol><p>call 和 apply 可以动态地改变传入函数的 this：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personObj = &#123;</span><br><span class="line">  name: <span class="string">"ytao"</span>,</span><br><span class="line">  age: <span class="string">"22"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.call(personObj)); <span class="comment">// ytao22</span></span><br></pre></td></tr></table></figure><h4 id="丢失的-this"><a href="#丢失的-this" class="headerlink" title="丢失的 this"></a>丢失的 this</h4><p>我们一般会重写这个获取 id 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getId(<span class="string">"divBox"</span>);</span><br></pre></td></tr></table></figure><p>那可不可以这样呢：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getId2 = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId2(<span class="string">"divBox"</span>); <span class="comment">// Uncaught TypeError: Illegal invocation</span></span><br></pre></td></tr></table></figure><p>结果直接报错，当 <code>getElementById</code> 方法作为 document 对象的属性被调用时， 方法内部的 this 是指向 document 的。如果 <code>getId2(&#39;divBox&#39;)</code>，相当于是普通函数调用，函数内部的 this 指向的是 window。</p><p>所以，按照这个思路，我们可以这样模拟一下它的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById = (<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> func.apply(<span class="built_in">document</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="built_in">document</span>.getElementById);</span><br><span class="line"></span><br><span class="line">getId3 = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId3(<span class="string">"divBox"</span>);</span><br></pre></td></tr></table></figure><h3 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h3><blockquote><p>fun.apply(thisArg, [argsArray])</p><p>fun.call(thisArg, arg1, arg2, …)</p></blockquote><p>在函数式编程中，call 和 apply 方法尤为有用，两者用法一致，只是传参的形式上有所区别而已。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>apply() 接受两个参数，第一个参数指定了函数体内 this 对象，第二个是数组或者类数组，apply() 方法将这个集合中的元素作为参数传递给被调用的函数。</p><p>call() 方法的作用和 apply() 方法类似，区别就是 call()方法接受的是参数列表，而 apply()方法接受的是一个参数数组。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">Function​.prototype​.apply()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">Function​.prototype​.call()</a></li></ul><p>第一个参数为 null，函数体内的 this 会指向默认的宿主对象，但是在严格模式下，依然是 null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> applyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">&#125;;</span><br><span class="line">applyFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> applyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">null</span>);</span><br><span class="line">&#125;;</span><br><span class="line">applyFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ol><li>改变 this 指向</li></ol><p>假如在一个点击事件函数中有一个内部函数 func，当点击事件被触发时，就会出现如下情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"divBox"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// undefined，这里的 this 指向了 window</span></span><br><span class="line">  &#125;;</span><br><span class="line">  func();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时，我们用 call() 来改变一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"divBox"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  &#125;;</span><br><span class="line">  func.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟 bind 方法</li></ol><blockquote><p>function.bind(thisArg[, arg1[, arg2[, …]]])</p></blockquote><p>bind()方法创建一个新的函数，在调用时设置 this 关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// 保存原函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回新函数</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>); <span class="comment">// 将传入的 context 当做新函数体内的 this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindObj = &#123;</span><br><span class="line">  name: <span class="string">"tyang"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// tyang</span></span><br><span class="line">&#125;.bind(bindObj);</span><br><span class="line"></span><br><span class="line">bindFunc();</span><br></pre></td></tr></table></figure><p>这是一个简化版的 <code>Function.prototype.bind</code>实现，<code>self.apply(context, arguments)</code>才是执行原来的 bindFunc 函数，并且指定 context 对象为 bindFunc 函数体内的 this。</p><p>我们再继续修改下，使之可以预先添加一些参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">    context = [].shift.call(<span class="built_in">arguments</span>), <span class="comment">// 获取参数中第一个为绑定的this上下文</span></span><br><span class="line">    args = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将剩余的参数转化为数组</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回新函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))); <span class="comment">//arguments 为新函数的参数，即传入的 3，4</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindObj = &#123;</span><br><span class="line">  name: <span class="string">"lisisi"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// lisisi</span></span><br><span class="line">  <span class="built_in">console</span>.log([a, b, c, d]); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">&#125;.bind(bindObj, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">bindFunc(<span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><code>self.apply(context, [].concat.call(args, [].slice.call(arguments)));</code>，执行新函数的时候，会把之前传入的 context 作为 this，<code>[].slice.call(arguments)</code>将新函数传入的参数转化为数组，并作为<code>[].concat.call(args)</code>的给定参数，组合两次，作为新函数最终的参数。</p><ol start="3"><li>借用其他对象的方法</li></ol><p>第一种，”借用构造函数“实现一些类似继承的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  A.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">B.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bbb = <span class="keyword">new</span> B(<span class="string">"Yangtao"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bbb.getName()); <span class="comment">//Yangtao</span></span><br></pre></td></tr></table></figure><p>第二种，给类数组对象使用数组方法，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>再比如之前用到的，把 arguments 转成真正的数组的时候可以借用 <code>Array.prototype.slice.call(arguments)</code>，想截去头一个元素时，借用<code>Array.prototype.shift.call(arguments)</code></p><p>虽然我们可以把”任意“对象传入 <code>Array.prototype.push</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aObj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(aObj, <span class="string">"first"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aObj.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(aObj[<span class="number">0</span>]); <span class="comment">// first</span></span><br></pre></td></tr></table></figure><p>但是，这个对象也得满足以下两个条件：</p><ul><li>对象本身要可以存取属性</li><li>对象的 length 属性可读写</li></ul><p>如果是其他类型，比如 number，无法存取；比如函数，length 属性不可写，使用 call 或 apply 就会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(num, <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num.length); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(funcObj, <span class="string">"3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(funcObj.length); <span class="comment">// Uncaught TypeError: Cannot assign to read only property 'length' of function 'function () &#123;&#125;'</span></span><br></pre></td></tr></table></figure><p>学习资料：</p><ul><li>《JavaScript 高程 3》第七章</li><li>《JavaScript 设计模式与开发实践 · 曾探》第 2 章</li></ul><p>发布：</p><ul><li>掘金<a href="https://juejin.im/post/5cb915546fb9a0688539b53b" target="_blank" rel="noopener">《初探 this、call 和 apply》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript 中 this 总是指向一个对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://47.101.33.81/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://47.101.33.81/tags/JavaScript/"/>
    
  </entry>
  
</feed>
