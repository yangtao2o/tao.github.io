<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大涛子</title>
  
  <subtitle>简单、极致、不失风趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yangtao.site/"/>
  <updated>2020-03-14T04:25:07.814Z</updated>
  <id>http://yangtao.site/</id>
  
  <author>
    <name>杨涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gulp 自动化构建</title>
    <link href="http://yangtao.site/2020/03/14/gulp-v4/"/>
    <id>http://yangtao.site/2020/03/14/gulp-v4/</id>
    <published>2020-03-14T04:18:36.000Z</published>
    <updated>2020-03-14T04:25:07.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Gulp 自动化构建的一些过程，以及其他插件的结合使用等</p></blockquote><a id="more"></a><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><ul><li><a href="https://www.gulpjs.com.cn/docs/getting-started/quick-start/" target="_blank" rel="noopener">Gulp 快速入门指南</a></li><li><a href="https://github.com/yangtao2o/gulp-project/tree/master/src/mygulp" target="_blank" rel="noopener">Github Demo</a></li></ul><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>项目根目录创建<code>gulpfile.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultTask</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"success"</span>);</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = defaultTask;</span><br></pre></td></tr></table></figure><p>gulp 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  gulp-project git:(master) ✗ gulp</span><br><span class="line">[17:06:29] Using gulpfile ~/Documents/GitHub/gulp-project/gulpfile.js</span><br><span class="line">[17:06:29] Starting <span class="string">'default'</span>...</span><br><span class="line">success</span><br><span class="line">[17:06:29] Finished <span class="string">'default'</span> after 2.67 ms</span><br></pre></td></tr></table></figure><h3 id="Gulpfile-分割"><a href="#Gulpfile-分割" class="headerlink" title="Gulpfile 分割"></a>Gulpfile 分割</h3><blockquote><p>Node 的模块解析功能允许你将 gulpfile.js’ 文件替换为同样命名为 gulpfile.js 的目录，该目录中包含了一个名为 index.js 的文件，该文件被当作 gulpfile.js 使用。并且，该目录中还可以包含各个独立的任务（task）模块。 — 官方文档</p></blockquote><p>创建 <code>gulpfile.js</code>目录，<code>gulpfile.js</code>目录下新建 <code>index.js</code></p><h3 id="组合任务"><a href="#组合任务" class="headerlink" title="组合任务"></a>组合任务</h3><ul><li>series() 允许将多个独立的任务组合为一个更大的操作</li><li>对于希望以最大并发来运行的任务（tasks），可以使用 parallel() 方法将它们组合起来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clean</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssTranspile</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssMinify</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsTranspile</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsBundle</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsMinify</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">publish</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = series(</span><br><span class="line">  clean,</span><br><span class="line">  parallel(cssTranspile, series(jsTranspile, jsBundle)),</span><br><span class="line">  parallel(cssMinify, jsMinify),</span><br><span class="line">  publish</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[16:50:36] Starting <span class="string">'default'</span>...</span><br><span class="line">[16:50:36] Starting <span class="string">'clean'</span>...</span><br><span class="line">[16:50:36] Finished <span class="string">'clean'</span> after 606 μs</span><br><span class="line">[16:50:36] Starting <span class="string">'cssTranspile'</span>...</span><br><span class="line">[16:50:36] Finished <span class="string">'cssTranspile'</span> after 199 μs</span><br><span class="line">[16:50:36] Starting <span class="string">'jsTranspile'</span>...</span><br><span class="line">[16:50:36] Finished <span class="string">'jsTranspile'</span> after 131 μs</span><br><span class="line">[16:50:36] Starting <span class="string">'jsBundle'</span>...</span><br><span class="line">[16:50:36] Finished <span class="string">'jsBundle'</span> after 125 μs</span><br><span class="line">[16:50:36] Starting <span class="string">'cssMinify'</span>...</span><br><span class="line">[16:50:36] Starting <span class="string">'jsMinify'</span>...</span><br><span class="line">[16:50:36] Finished <span class="string">'cssMinify'</span> after 183 μs</span><br><span class="line">[16:50:36] Finished <span class="string">'jsMinify'</span> after 218 μs</span><br><span class="line">[16:50:36] Starting <span class="string">'publish'</span>...</span><br><span class="line">[16:50:36] Finished <span class="string">'publish'</span> after 115 μs</span><br><span class="line">[16:50:36] Finished <span class="string">'default'</span> after 4.55 ms</span><br></pre></td></tr></table></figure><p>当一个组合操作执行时，这个组合中的每一个任务每次被调用时都会被执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is INCORRECT</span></span><br><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> css = series(clean, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> javascript = series(clean, <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">exports.default = parallel(css, javascript);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[17:02:45] Starting <span class="string">'default'</span>...</span><br><span class="line">[17:02:45] Starting <span class="string">'clean'</span>...</span><br><span class="line">[17:02:45] Starting <span class="string">'clean'</span>...</span><br><span class="line">[17:02:45] Finished <span class="string">'clean'</span> after 850 μs</span><br><span class="line">[17:02:45] Starting <span class="string">'&lt;anonymous&gt;'</span>...</span><br><span class="line">[17:02:45] Finished <span class="string">'clean'</span> after 2.04 ms</span><br><span class="line">[17:02:45] Starting <span class="string">'&lt;anonymous&gt;'</span>...</span><br><span class="line">[17:02:45] Finished <span class="string">'&lt;anonymous&gt;'</span> after 563 μs</span><br><span class="line">[17:02:45] Finished <span class="string">'&lt;anonymous&gt;'</span> after 438 μs</span><br><span class="line">[17:02:45] Finished <span class="string">'default'</span> after 7.67 ms</span><br></pre></td></tr></table></figure><p>重构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is INCORRECT</span></span><br><span class="line"><span class="keyword">const</span> &#123; series, parallel &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> css = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> javascript = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.default = series(clean, parallel(css, javascript));</span><br></pre></td></tr></table></figure><p>再次输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[17:04:48] Starting <span class="string">'default'</span>...</span><br><span class="line">[17:04:48] Starting <span class="string">'clean'</span>...</span><br><span class="line">[17:04:48] Finished <span class="string">'clean'</span> after 546 μs</span><br><span class="line">[17:04:48] Starting <span class="string">'css'</span>...</span><br><span class="line">[17:04:48] Starting <span class="string">'javascript'</span>...</span><br><span class="line">[17:04:48] Finished <span class="string">'css'</span> after 242 μs</span><br><span class="line">[17:04:48] Finished <span class="string">'javascript'</span> after 285 μs</span><br><span class="line">[17:04:48] Finished <span class="string">'default'</span> after 3.4 ms</span><br></pre></td></tr></table></figure><h3 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h3><blockquote><p>Node 库以多种方式处理异步功能。最常见的模式是 error-first callbacks，但是你还可能会遇到 streams、promises、event emitters、child processes, 或 observables。gulp 任务（task）规范化了所有这些类型的异步功能。 — 官方文档</p></blockquote><ul><li>返回 stream</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">streamTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">"*.js"</span>).pipe(dest(<span class="string">"output"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = streamTask;</span><br></pre></td></tr></table></figure><p>然后发现，根目录下会看到 output 目录，及根目录下所有以 <code>*js</code>结尾的文件，包括目录。</p><ul><li>返回 promise</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">"the value is ignored"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = promiseTask;</span><br></pre></td></tr></table></figure><h3 id="返回-event-emitter"><a href="#返回-event-emitter" class="headerlink" title="返回 event emitter"></a>返回 event emitter</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; EventEmitter &#125; = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventEmitterTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> emitter = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> emitter.emit(<span class="string">"finish"</span>), <span class="number">250</span>);</span><br><span class="line">  <span class="keyword">return</span> emitter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = eventEmitterTask;</span><br></pre></td></tr></table></figure><h3 id="使用-callback"><a href="#使用-callback" class="headerlink" title="使用 callback"></a>使用 callback</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackTask</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `cb()` should be called by some async work</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = callbackTask;</span><br></pre></td></tr></table></figure><h3 id="使用-async-await"><a href="#使用-async-await" class="headerlink" title="使用 async/await"></a>使用 async/await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncAwaitTask</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; version &#125; = fs.readFileSync(<span class="string">"package.json"</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"version"</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="built_in">Promise</span>.resolve(<span class="string">"some result"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = asyncAwaitTask;</span><br></pre></td></tr></table></figure><h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);</span><br><span class="line"></span><br><span class="line">exports.default = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">"src/assets/**/*.js"</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">".min.js"</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">"output/"</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="browsersync"><a href="#browsersync" class="headerlink" title="browsersync"></a>browsersync</h3><ul><li><a href="http://www.browsersync.cn/docs/gulp/#gulp-install" target="_blank" rel="noopener">Browsersync + Gulp.js</a></li></ul><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install browser-sync gulp --save-dev</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; task, watch &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">"browser-sync"</span>).create();</span><br><span class="line"><span class="keyword">const</span> reload = browserSync.reload;</span><br><span class="line"><span class="keyword">const</span> serve = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  browserSync.init(&#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">"./src"</span>,</span><br><span class="line">      https: <span class="literal">true</span>,</span><br><span class="line">      directory: <span class="literal">true</span> <span class="comment">//从与目录列表的应用程序目录中的文件即成</span></span><br><span class="line">      <span class="comment">// index: "index.html"  //从应用程序目录中提供文件，指定特定文件名为索引</span></span><br><span class="line">    &#125;,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    notify: <span class="literal">false</span> <span class="comment">// 开启静默模式</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  watch(<span class="string">"src/*.html"</span>).on(<span class="string">"change"</span>, reload);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">task(serve);</span><br></pre></td></tr></table></figure><p>本地使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, watch, series, parallel &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</span><br><span class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);</span><br><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">"browser-sync"</span>).create();</span><br><span class="line"><span class="keyword">const</span> reload = browserSync.reload;</span><br><span class="line"><span class="keyword">const</span> jsWatcher = watch(<span class="string">"src/**/*.js"</span>);</span><br><span class="line"><span class="keyword">const</span> cssWatcher = watch(<span class="string">"src/**/*.css"</span>);</span><br><span class="line"><span class="keyword">const</span> htmlWatcher = watch(<span class="string">"src/**/*.html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> clean = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> css = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> javascript = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// body omitted</span></span><br><span class="line">  cb();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  browserSync.init(&#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">"./src"</span>,</span><br><span class="line">      <span class="comment">// https: true,</span></span><br><span class="line">      directory: <span class="literal">true</span> <span class="comment">//从与目录列表的应用程序目录中的文件即成，如果要指定文件，可注释掉</span></span><br><span class="line">      <span class="comment">// index: "index.html"  //从应用程序目录中提供文件，指定特定文件名为索引</span></span><br><span class="line">    &#125;,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    notify: <span class="literal">false</span> <span class="comment">// 开启静默模式</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 globs 并在发生更改时运行任务</span></span><br><span class="line">jsWatcher.on(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path, stats</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`File <span class="subst">$&#123;path&#125;</span> was changed`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cssWatcher.on(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path, stats</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`File <span class="subst">$&#123;path&#125;</span> was changed`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">htmlWatcher.on(<span class="string">"change"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path, stats</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`File <span class="subst">$&#123;path&#125;</span> was changed`</span>);</span><br><span class="line">  reload(); <span class="comment">// Reloading Browsers</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">exports.build = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(<span class="string">"src/assets/**/*.js"</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(rename(&#123; <span class="attr">extname</span>: <span class="string">".min.js"</span> &#125;))</span><br><span class="line">    .pipe(dest(<span class="string">"output/"</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.serve = serve;</span><br><span class="line"></span><br><span class="line">exports.default = series(clean, parallel(css, javascript));</span><br></pre></td></tr></table></figure><p>然后在根目录下的<code>package.json</code>，修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "gulp",</span><br><span class="line">  "build": "gulp build",</span><br><span class="line">  "serve": "gulp serve"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="Gulp-SASS"><a href="#Gulp-SASS" class="headerlink" title="Gulp + SASS"></a>Gulp + SASS</h2><p>-<a href="https://www.sass.hk/install/" target="_blank" rel="noopener">如何安装 Sass</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass gulp-sass --save-dev</span><br></pre></td></tr></table></figure><p><code>gulpfile.js</code> 文件主要配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, watch &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">"gulp-sass"</span>);</span><br><span class="line">sass.compiler = <span class="built_in">require</span>(<span class="string">"node-sass"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scss</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(scssGlobSrc)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">outputStyle</span>: <span class="string">"expanded"</span> &#125;).on(<span class="string">"error"</span>, sass.logError))</span><br><span class="line">    .pipe(dest(<span class="string">"dist/sass"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.scss = scss;</span><br></pre></td></tr></table></figure><p>启动：<code>gulp scss</code>。</p><h2 id="Gulp-Browsersync"><a href="#Gulp-Browsersync" class="headerlink" title="Gulp + Browsersync"></a>Gulp + Browsersync</h2><ul><li><a href="http://www.browsersync.cn/docs/gulp/" target="_blank" rel="noopener">Browsersync + Gulp.js</a></li></ul><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install browser-sync gulp --save-dev</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; task, watch &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> browserSync = <span class="built_in">require</span>(<span class="string">"browser-sync"</span>).create();</span><br><span class="line"><span class="keyword">const</span> reload = browserSync.reload;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> serve = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  browserSync.init(&#123;</span><br><span class="line">    server: &#123;</span><br><span class="line">      baseDir: <span class="string">"./src"</span>,</span><br><span class="line">      https: <span class="literal">true</span>,</span><br><span class="line">      directory: <span class="literal">true</span> <span class="comment">//从与目录列表的应用程序目录中的文件即成</span></span><br><span class="line">      <span class="comment">// index: "index.html"  //从应用程序目录中提供文件，指定特定文件名为索引</span></span><br><span class="line">    &#125;,</span><br><span class="line">    port: <span class="number">8080</span>,</span><br><span class="line">    notify: <span class="literal">false</span> <span class="comment">// 开启静默模式</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  watch(<span class="string">"src/*.html"</span>).on(<span class="string">"change"</span>, reload);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.serve = serve;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp serve</span><br></pre></td></tr></table></figure><h2 id="Gulp-TypeScript"><a href="#Gulp-TypeScript" class="headerlink" title="Gulp + TypeScript"></a>Gulp + TypeScript</h2><p>根目录下初始化：<code>tsc --init</code>。</p><p>安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D typescript gulp-typescript</span><br></pre></td></tr></table></figure><p>配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ts = <span class="built_in">require</span>(<span class="string">"gulp-typescript"</span>);</span><br><span class="line"><span class="keyword">const</span> tsProject = ts.createProject(<span class="string">"tsconfig.json"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">typescript</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> tsProject</span><br><span class="line">    .src()</span><br><span class="line">    .pipe(tsProject())</span><br><span class="line">    .js.pipe(dest(<span class="string">"dist/ts"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.typescript = typescript;</span><br></pre></td></tr></table></figure><p>src 目录下新建文件 <code>main.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">  fullName: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> firstName: <span class="built_in">string</span>, <span class="keyword">public</span> lastName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.fullName = <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span> `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`hello, <span class="subst">$&#123;person.firstName&#125;</span> <span class="subst">$&#123;person.lastName&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> Student(<span class="string">"Yang"</span>, <span class="string">"Tao"</span>);</span><br><span class="line"></span><br><span class="line">greeter(user);</span><br><span class="line"><span class="built_in">console</span>.log(user.fullName);</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp typescript</span><br></pre></td></tr></table></figure><h2 id="Riot"><a href="#Riot" class="headerlink" title="Riot"></a>Riot</h2><ul><li><a href="http://eux.baidu.com/blog/fe/riot-js-%E6%A1%86%E6%9E%B6%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">Riot.js 框架深入解析</a></li><li><a href="https://cloud.tencent.com/developer/article/1019472" target="_blank" rel="noopener">riot.js 教程【一】简介</a></li><li><a href="https://riot.js.org/documentation/" target="_blank" rel="noopener">RIOT</a>文档</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Gulp 自动化构建的一些过程，以及其他插件的结合使用等&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://yangtao.site/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="gulp" scheme="http://yangtao.site/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>Zepto 对象思想与源码分析</title>
    <link href="http://yangtao.site/2020/03/12/zepto/"/>
    <id>http://yangtao.site/2020/03/12/zepto/</id>
    <published>2020-03-12T09:56:32.000Z</published>
    <updated>2020-03-14T04:14:34.145Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.kancloud.cn/wangfupeng/zepto-design-srouce/173680" target="_blank" rel="noopener">zepto 对象思想与源码分析</a></p></blockquote><a id="more"></a><h2 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h2><h3 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a><code>Array.prototype</code></h3><p><strong>每一个函数，都有一个 prototype 属性</strong>，不管是你自定义的，还是函数内置的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(fn.prototype); <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.prototype.constructor === fn); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/19526072/53319611-f76d3c00-390d-11e9-8542-313fa56bffab.png" alt="image"></p><p>这里的 <code>fn.prototype</code> 打印出一个对象，对象里的 <code>constructor</code> 属性又指回了该函数本身 fn。</p><p>即<strong>每一个原型对象都有一个 consctructor 属性指向关联的构造函数</strong>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.constructor === <span class="built_in">Array</span>; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/19526072/53319627-ff2ce080-390d-11e9-8dab-3659d53b1296.png" alt="image"></p><p>我们接着看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype); <span class="comment">// [constructor: ƒ, concat: ƒ, copyWithin: ƒ, fill: ƒ, find: ƒ, …]</span></span><br></pre></td></tr></table></figure><p>这里，除了 constructor 属性，还有其他内置的属性，即我们经常使用的操作数组的方法。</p><h3 id="proto-隐式原型"><a href="#proto-隐式原型" class="headerlink" title="__proto__(隐式原型)"></a><code>__proto__</code>(隐式原型)</h3><p>所有通过函数 <code>new</code> （构造函数）出来的实例对象，都有一个 <code>__proto__</code>属性，指向该对象的 <code>prototype</code>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/19526072/53319688-2f747f00-390e-11e9-9555-af336e12b587.png" alt="image"></p><p>原型链：由相互关联的原型(<code>__proto__</code>)组成的链状结构就是原型链。</p><p>举个关于继承 extends 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Animal eat"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Dog bark"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal();</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">dog.eat(); <span class="comment">// Animal eat</span></span><br><span class="line">dog.bark(); <span class="comment">// Dog bark</span></span><br></pre></td></tr></table></figure><p>上面看明白了，那么 ES6 的继承我们也就可以明白原理了，即 <code>class Dog extends Animal</code> 相当于 <code>Dog.prototype = new Animal()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Animal eat!"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Dog bark!"</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">"哈士奇"</span>);</span><br><span class="line">dog.eat();</span><br><span class="line">dog.bark();</span><br></pre></td></tr></table></figure><p>接下来，我们就清楚为什么能这样：</p><p><strong>当我们要使用一个对象（数组）的某个功能时，如果该对象本身具有这个功能，直接调用，没有的话，那就去自身的<code>__proto__</code>属性中去找</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  myfn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"myfn"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.myfn(); <span class="comment">// 'myfn'</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"myfn"</span>); <span class="comment">//true</span></span><br><span class="line">obj.toString(); <span class="comment">// "[object Object]"</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">"toString"</span>); <span class="comment">// false</span></span><br><span class="line">obj.__proto__.hasOwnProperty(<span class="string">"toString"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>hasOwnProperty()</code>就可以得出这个属性是否是属于该对象本身的属性:</p><ul><li>myfn 是我们自定义的，<code>obj.hasOwnProperty(&#39;myfn&#39;)</code>为 true</li><li>toString() 我们不是自定义的，却可以使用，查一下是否属于自定义属性，<code>obj.hasOwnProperty(&#39;toString&#39;)</code>，答案为 false</li><li>既然不属于自定义属性，那就去自身的<code>__proto__</code>去找，然后去原型对象上查一下，<code>obj.__proto__.hasOwnProperty(&#39;toString&#39;)</code>，哦，原来在这儿</li></ul><p>在源码中，我们经常看到<code>Array.prototype.concat</code>，其实就是我们使用的<code>[].concat</code>，<code>[]</code>，因为<code>[].__proto__ === Array.prototype</code></p><h3 id="proto-是可修改的"><a href="#proto-是可修改的" class="headerlink" title="__proto__是可修改的"></a><code>__proto__</code>是可修改的</h3><p>比如，我们新增一个<code>addClass()</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.__proto__.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;;</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">arr.addClass(); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/19526072/53319708-44e9a900-390e-11e9-9899-6c303f5467aa.png" alt="image"></p><p>但是，这里要注意，如下重写之后，就没有了诸如 push、concat 等方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.__proto__ = &#123;</span><br><span class="line">  addClass: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">arr.push(<span class="number">3</span>); <span class="comment">//Uncaught TypeError: arr.push is not a function</span></span><br></pre></td></tr></table></figure><h3 id="Object-prototype的原型"><a href="#Object-prototype的原型" class="headerlink" title="Object.prototype的原型"></a><code>Object.prototype</code>的原型</h3><p>万物皆对象，到最后依旧是对象，最后这个东东是个啥，我们来看一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数 Person</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例对象 myfn，它的 隐式原型 指向了其构造函数的 原型对象</span></span><br><span class="line"><span class="keyword">var</span> myfn = <span class="keyword">new</span> Person();</span><br><span class="line">myfn.__proto__ === Person.prototype; <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那构造函数 Person 的 隐式原型又指向了谁呢</span></span><br><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function呐</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个呢</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">fn.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>; <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">//"object"</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>所有的函数都有一个 <code>prototype</code>属性，该属性指向了一个对象，该对象就是调用该构造函数而创建出来的实例（如 myfn）的原型（如<code>myfn.__proto__</code>）,即：<code>myfn.__proto__ === Person.prototype</code></p></li><li><p>所有的对象（除 null）都具有一个<code>__proto__</code>属性，该属性指向该对象的原型，比如：<code>myfn.__proto__ === Person.prototype</code></p></li><li><p>原型也是一个对象，根据上条，那原型的原型，就是<code>Object.prototype</code></p></li><li><p>最后的 null 对象，可以当做是 什么都没有</p></li></ul><p>盗一张图，我们就更加清楚了（蓝色这条表示的是原型链）<br><img src="https://user-images.githubusercontent.com/19526072/53319411-64340680-390d-11e9-80b9-4b86736291b2.png" alt="image"></p><p>参考资料：</p><ul><li><a href="https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684" target="_blank" rel="noopener">js 原型链基础</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript 深入之从原型到原型链 </a></li><li><a href="https://www.cnblogs.com/wangfupeng1988/p/3978131.html" target="_blank" rel="noopener">深入理解 javascript 原型和闭包（3）——prototype 原型</a></li></ul><h2 id="Zepto-对象设计"><a href="#Zepto-对象设计" class="headerlink" title="Zepto 对象设计"></a>Zepto 对象设计</h2><h3 id="主体设计"><a href="#主体设计" class="headerlink" title="主体设计"></a>主体设计</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $,</span><br><span class="line">    zepto = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...省略N行代码...</span></span><br><span class="line"></span><br><span class="line">  zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    dom = dom || [];</span><br><span class="line">    dom.__proto__ = $.fn;   <span class="comment">// 关键位置</span></span><br><span class="line">    dom.selector = selector || <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 针对参数情况，分别对dom赋值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终调用 zepto.Z 返回的数据</span></span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zepto.init(selector, context);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 里面有若干个工具函数</span></span><br><span class="line">  $.fn = &#123;</span><br><span class="line">    forEach: emptyArray.forEach,</span><br><span class="line">    <span class="comment">// ...省略N行代码...</span></span><br><span class="line">    concat: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// ...省略N行代码...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...省略N行代码...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> $;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.Zepto = Zepto;</span><br><span class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto);</span><br></pre></td></tr></table></figure><h3 id="自定义模拟"><a href="#自定义模拟" class="headerlink" title="自定义模拟"></a>自定义模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $,</span><br><span class="line">    zepto = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i,</span><br><span class="line">      len = dom.length ? dom.length : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dom.length; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>[i] = dom[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length = len;</span><br><span class="line">    <span class="keyword">this</span>.selector = selector || <span class="string">""</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">    <span class="keyword">var</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> zepto.init(selector);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  $.fn = &#123;</span><br><span class="line">    css: <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"css"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    html: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"html"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Z.prototype = $.fn;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.$ = $;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>流程：<code>$() -&gt; zepto.init() -&gt; zepto.Z() -&gt; new Z() -&gt; Z.prototype = $.fn;</code></p><h3 id="最新版（v1-2-0）模拟"><a href="#最新版（v1-2-0）模拟" class="headerlink" title="最新版（v1.2.0）模拟"></a>最新版（v1.2.0）模拟</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $;</span><br><span class="line">    <span class="keyword">var</span> zepto = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大Z构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> i,</span><br><span class="line">        len = dom ? dom.length : <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i];</span><br><span class="line">      <span class="keyword">this</span>.length = len;</span><br><span class="line">      <span class="keyword">this</span>.selector = selector || <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// zepto.Z() 返回大Z构造函数的实例，方便实例对象的 __proto 就会指向 Z.prototype</span></span><br><span class="line">    zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 DOM，并调用 zepto.Z()</span></span><br><span class="line">    zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 自定义模拟方法，源码并非这样简单</span></span><br><span class="line">      <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice;</span><br><span class="line">      <span class="keyword">var</span> dom = slice.call(<span class="built_in">document</span>.querySelectorAll(selector));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create a new Zepto collection from the nodes found</span></span><br><span class="line">      <span class="keyword">return</span> zepto.Z(dom, selector);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第一步初始化</span></span><br><span class="line">    $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> zepto.init(selector, context);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法属性</span></span><br><span class="line">    $.fn = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: zepto.Z,  // 手动绑定 <span class="keyword">constructor</span> 属性</span><br><span class="line">      length: 0,</span><br><span class="line">      push: "push method",</span><br><span class="line">      css: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"css"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    $.fn.on = <span class="function"><span class="keyword">function</span>(<span class="params">event, data, callback</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"on method"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    $.fn.off = <span class="function"><span class="keyword">function</span>(<span class="params">event, data, callback</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"off method"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.bind = <span class="function"><span class="keyword">function</span>(<span class="params">event, data, callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.on(event, data, callback);</span><br><span class="line">    &#125;;</span><br><span class="line">    $.fn.unbind = <span class="function"><span class="keyword">function</span>(<span class="params">event, callback</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.off(event, callback);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最终的方法属性等都指向了 $.fn，这里就是原型的关键使用</span></span><br><span class="line">    zepto.Z.prototype = Z.prototype = $.fn;</span><br><span class="line"></span><br><span class="line">    $.zepto = zepto;</span><br><span class="line">    <span class="keyword">return</span> $;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.Zepto = Zepto;</span><br><span class="line">  <span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto);</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><ul><li><a href="https://www.imooc.com/learn/745" target="_blank" rel="noopener">zepto设计和源码分析</a> - 视频</li><li><a href="http://www.kancloud.cn/wangfupeng/zepto-design-srouce/173680" target="_blank" rel="noopener">zepto 对象思想与源码分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kancloud.cn/wangfupeng/zepto-design-srouce/173680&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zepto 对象思想与源码分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://yangtao.site/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="zepto" scheme="http://yangtao.site/tags/zepto/"/>
    
  </entry>
  
  <entry>
    <title>AJAX 请求</title>
    <link href="http://yangtao.site/2020/01/07/ajax/"/>
    <id>http://yangtao.site/2020/01/07/ajax/</id>
    <published>2020-01-07T07:06:16.000Z</published>
    <updated>2020-01-07T09:51:42.474Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>关于 http 请求的几种方式</p></blockquote><a id="more"></a><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>具体来说，AJAX 包括以下几个步骤：</p><ul><li>创建 XMLHttpRequest 实例</li><li>发出 HTTP 请求</li><li>接收服务器传回的数据</li><li>更新网页数据</li></ul><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MYTHOD = <span class="string">"GET"</span>;</span><br><span class="line"><span class="keyword">const</span> URL =</span><br><span class="line">  <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span>;</span><br><span class="line"><span class="keyword">let</span> xhr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理低版本IE不兼容问题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定回调函数，监听通信状态（readyState属性）的变化</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span> &amp;&amp; xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获错误</span></span><br><span class="line">xhr.onerror = <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Error: "</span>, xhr.statusText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发出 HTTP 请求</span></span><br><span class="line">xhr.open(MYTHOD, URL, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="设置头信息"><a href="#设置头信息" class="headerlink" title="设置头信息"></a>设置头信息</h2><p>该方法必须在 open()之后、send()之前调用。如果该方法多次调用，设定同一个字段，则每一次调用的值会被合并成一个单一的值发送。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">xhr.setRequestHeader(<span class="string">"Content-Length"</span>, <span class="built_in">JSON</span>.stringify(data).length);</span><br><span class="line">xhr.send(<span class="built_in">JSON</span>.stringify(data));</span><br></pre></td></tr></table></figure><h2 id="Ajax-Promise"><a href="#Ajax-Promise" class="headerlink" title="Ajax+Promise"></a>Ajax+Promise</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ajax = <span class="function">(<span class="params">&#123; method = <span class="string">"GET"</span>, path, body, headers &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//进行Promise封装</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    request.open(method, path, <span class="literal">true</span>); <span class="comment">//配置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">"GET"</span>) &#123;</span><br><span class="line">      request.send(<span class="literal">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> headers) &#123;</span><br><span class="line">        <span class="comment">//遍历header,设置响应头</span></span><br><span class="line">        <span class="keyword">let</span> value = headers[key];</span><br><span class="line">        request.setRequestHeader(key, value);</span><br><span class="line">      &#125;</span><br><span class="line">      request.send(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (request.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.status &gt;= <span class="number">200</span> &amp;&amp; request.status &lt; <span class="number">400</span>) &#123;</span><br><span class="line">          resolve.call(<span class="literal">undefined</span>, request.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request.status &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">          reject.call(<span class="literal">undefined</span>, request);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用ajax</span></span><br><span class="line">ajax(&#123;</span><br><span class="line">  method: <span class="string">"get"</span>,</span><br><span class="line">  path: <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span>,</span><br><span class="line">  headers: &#123;</span><br><span class="line">    <span class="string">"content-type"</span>: <span class="string">"application/json"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(</span><br><span class="line">  responseText =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(responseText);</span><br><span class="line">  &#125;,</span><br><span class="line">  request =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(request);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="jQuery-使用"><a href="#jQuery-使用" class="headerlink" title="jQuery 使用"></a>jQuery 使用</h2><p>get 方法，返回一个 deferred 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> URL =</span><br><span class="line">  <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span>;</span><br><span class="line"><span class="keyword">let</span> request = $.get(URL);</span><br><span class="line">request</span><br><span class="line">  .done(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .fail(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">let</span> request = $.ajax(&#123;</span><br><span class="line">  url: URL,</span><br><span class="line">  type: <span class="string">"GET"</span></span><br><span class="line">&#125;);</span><br><span class="line">request.done(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data)).fail(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><p>使用 promise：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span>,</span><br><span class="line">      type: <span class="string">"GET"</span>,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;,</span><br><span class="line">      error: <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        resolve(err);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getData()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="Fetch-函数"><a href="#Fetch-函数" class="headerlink" title="Fetch 函数"></a>Fetch 函数</h2><p>Fetch 提供了 Request 和 Response 对象（以及与网络请求有关的其他内容）的一般定义。</p><p>Fetch API 提供了 fetch() 方法，它被定义在 BOM 的 window 对象中，你可以用它来发起对远程资源的请求。</p><p>fetch() 方法返回的是一个 Promise 对象，让你能够对请求的返回结果进行检索。</p><p>fetch 的配置：</p><ul><li><code>Promise fetch(String url [, Object options])</code>;</li><li><code>Promise fetch(Request req [, Object options])</code>;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> URL = <span class="string">'https://api.github.com/search/repositories?q=javascript&amp;sort=stars'</span>;</span><br><span class="line"><span class="keyword">let</span> req = <span class="keyword">new</span> Request(URL, &#123; <span class="attr">method</span>: <span class="string">"GET"</span>, <span class="attr">cache</span>: <span class="string">"reload"</span> &#125;);</span><br><span class="line">fetch(req)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(json);</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>fetch 和 ajax 的主要区别：</p><ul><li>fetch()返回的 promise 将不会拒绝 http 的错误状态，即使响应是一个 HTTP 404 或者 500</li><li>在默认情况下 fetch 不会接受或者发送 cookies</li></ul><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>基本使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> URL =</span><br><span class="line">  <span class="string">"https://api.github.com/search/repositories?q=javascript&amp;sort=stars"</span>;</span><br><span class="line">axios</span><br><span class="line">  .get(URL)</span><br><span class="line">  .then(<span class="function"><span class="params">response</span> =&gt;</span> <span class="built_in">console</span>.log(response))</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br></pre></td></tr></table></figure><p>或者使用 <code>async/await</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> axios.get(URL);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">getData().then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data));</span><br></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="http://javascript.ruanyifeng.com/bom/ajax.html" target="_blank" rel="noopener">AJAX – JavaScript 标准参考教程(alpha)</a></li><li><a href="https://segmentfault.com/a/1190000018935873?utm_source=tag-newest" target="_blank" rel="noopener">原生 javaScript 实现 Ajax 和 jQuery 实现 Ajax</a></li><li><a href="https://segmentfault.com/a/1190000015938472" target="_blank" rel="noopener">回调、使用 Promise 封装 ajax()、Promise 入门</a></li><li><a href="https://www.jianshu.com/p/7762515f8d1a" target="_blank" rel="noopener">Fetch</a></li><li><a href="http://www.axios-js.com/" target="_blank" rel="noopener">axios-易用、简洁且高效的 http 库</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;关于 http 请求的几种方式&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="面试" scheme="http://yangtao.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
      <category term="Ajax" scheme="http://yangtao.site/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 类型判断</title>
    <link href="http://yangtao.site/2020/01/07/code-typeof/"/>
    <id>http://yangtao.site/2020/01/07/code-typeof/</id>
    <published>2020-01-07T06:42:25.000Z</published>
    <updated>2020-01-07T07:00:58.458Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习<a href="https://github.com/mqyqingfeng/Blog/issues/28" target="_blank" rel="noopener">JavaScript 专题之类型判断(上)</a>的文章总结，其实就是照抄，哈哈哈哈…顺便几一句文章里的话：所有这些点，都必须脚踏实地在具体应用场景下去分析、去选择，要让场景说话。</p></blockquote><a id="more"></a><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p>最新的 ECMAScript 标准定义了 8 种数据类型：</p><p>7 种原始类型:</p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>String</li><li>Symbol</li><li>BigInt</li></ul><p>和 Object</p><p>使用 typeof 检测类型如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Number"</span>; <span class="comment">// number</span></span><br><span class="line"><span class="string">"String"</span>; <span class="comment">// string</span></span><br><span class="line"><span class="string">"Boolean"</span>; <span class="comment">// boolean</span></span><br><span class="line"><span class="string">"Undefined"</span>; <span class="comment">// undefined</span></span><br><span class="line"><span class="string">"Null"</span>; <span class="comment">// object</span></span><br><span class="line"><span class="string">"Symbol"</span>; <span class="comment">// symbol</span></span><br><span class="line"><span class="string">"BigInt"</span>; <span class="comment">// bigint</span></span><br><span class="line"><span class="string">"Object"</span>; <span class="comment">// object</span></span><br></pre></td></tr></table></figure><p>所以 typeof 能检测出七种基本类型的值，但是，除此之外 Object 下还有很多细分的类型呐，如 Array、Function、Date、RegExp、Error 等。</p><p>如果用 typeof 去检测这些类型，返回的都是 object，除了 Function：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> date); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> error); <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> fn); <span class="comment">// function</span></span><br></pre></td></tr></table></figure><h2 id="Object-prototype-toString"><a href="#Object-prototype-toString" class="headerlink" title="Object.prototype.toString"></a>Object.prototype.toString</h2><p>所有，该如何区分 object 呢？我们用<code>Object.prototype.toString</code>。</p><p>规范：当 toString 方法被调用的时候，下面的步骤会被执行：</p><ul><li>如果 this 值是 undefined，就返回 <code>[object Undefined]</code></li><li>如果 this 的值是 null，就返回 <code>[object Null]</code></li><li>让 O 成为 <code>ToObject(this)</code> 的结果</li><li>让 class 成为 O 的内部属性 <code>[[Class]]</code> 的值</li><li>最后返回由 <code>&quot;[object &quot;</code> 和 <code>class</code> 和 <code>&quot;]&quot;</code> 三个部分组成的字符串</li></ul><p>通过规范，我们至少知道了调用 <code>Object.prototype.toString</code> 会返回一个由 <code>&quot;[object &quot; 和 class 和 &quot;]&quot;</code> 组成的字符串，而 class 是要判断的对象的内部属性。</p><p>我们可以了解到这个 class 值就是识别对象类型的关键！</p><p>正是因为这种特性，我们可以用 <code>Object.prototype.toString</code> 方法识别出更多类型！</p><p>先看下常见的 15 种（ES6 新增：Symbol Set Map，还有 BigInt）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = <span class="number">1</span>; <span class="comment">// [object Number]</span></span><br><span class="line"><span class="keyword">var</span> string = <span class="string">"123"</span>; <span class="comment">// [object String]</span></span><br><span class="line"><span class="keyword">var</span> boolean = <span class="literal">true</span>; <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="keyword">var</span> und = <span class="literal">undefined</span>; <span class="comment">// [object Undefined]</span></span><br><span class="line"><span class="keyword">var</span> nul = <span class="literal">null</span>; <span class="comment">// [object Null]</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;; <span class="comment">// [object Object]</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">// [object Array]</span></span><br><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">// [object Date]</span></span><br><span class="line"><span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>(); <span class="comment">// [object Error]</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/g</span>; <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// [object Function]</span></span><br><span class="line"><span class="keyword">var</span> symb = <span class="built_in">Symbol</span>(<span class="string">"test"</span>); <span class="comment">// [object Symbol]</span></span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// [object Set]</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// [object Map]</span></span><br><span class="line"><span class="keyword">var</span> bigI = BigInt(<span class="number">1</span>); <span class="comment">// [object BigInt]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>[i]));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkType(</span><br><span class="line">  number,</span><br><span class="line">  string,</span><br><span class="line">  boolean,</span><br><span class="line">  und,</span><br><span class="line">  nul,</span><br><span class="line">  obj,</span><br><span class="line">  array,</span><br><span class="line">  date,</span><br><span class="line">  error,</span><br><span class="line">  reg,</span><br><span class="line">  func,</span><br><span class="line">  symb,</span><br><span class="line">  set,</span><br><span class="line">  map,</span><br><span class="line">  bigI</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>除了以上 15 种，还有以下 3 种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">Math</span>)); <span class="comment">// [object Math]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">JSON</span>)); <span class="comment">// [object JSON]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">arguments</span>)); <span class="comment">// [object Arguments]</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h2 id="type-API"><a href="#type-API" class="headerlink" title="type API"></a>type API</h2><p>写一个 type 函数能检测各种类型的值，如果是基本类型，就使用 typeof，引用类型就使用 toString。</p><p>此外鉴于 typeof 的结果是小写，我也希望所有的结果都是小写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> class2type = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Boolean Number String Function Array Date RegExp Object Error Null Undefined"</span></span><br><span class="line">  .split(<span class="string">" "</span>)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    class2type[<span class="string">"[object "</span> + item + <span class="string">"]"</span>] = item.toLowerCase(); <span class="comment">// e.g. '[object Boolean]': 'boolean'</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj + <span class="string">""</span>; <span class="comment">// IE6</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span></span><br><span class="line">    ? class2type[<span class="built_in">Object</span>.prototype.toString.call(obj)] || <span class="string">"object"</span></span><br><span class="line">    : <span class="keyword">typeof</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>class2type[Object.prototype.toString.call(obj)] || &quot;object&quot;</code>的 object，为了 ES6 新增的 Symbol、Map、Set 等类型返回 object。</p><p>当然也可以添加进去，返回的就是对应的类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> class2type = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="string">"Boolean Number String Function Array Date RegExp Object Error Null Undefined Symbol Set Map BigInt"</span></span><br><span class="line">  .split(<span class="string">" "</span>)</span><br><span class="line">  .map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    class2type[<span class="string">"[object "</span> + item + <span class="string">"]"</span>] = item.toLowerCase();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj + <span class="string">""</span>; <span class="comment">// IE6</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">"object"</span> || <span class="keyword">typeof</span> obj === <span class="string">"function"</span></span><br><span class="line">    ? class2type[<span class="built_in">Object</span>.prototype.toString.call(obj)]</span><br><span class="line">    : <span class="keyword">typeof</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isFunction"><a href="#isFunction" class="headerlink" title="isFunction"></a>isFunction</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> type(obj) === <span class="string">"function"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isArray =</span><br><span class="line">  <span class="built_in">Array</span>.isArray ||</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> type(obj) === <span class="string">"array"</span>;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="plainObject"><a href="#plainObject" class="headerlink" title="plainObject"></a>plainObject</h2><p><code>plainObject</code> 来自于 jQuery，可以翻译成纯粹的对象，所谓”纯粹的对象”，就是该对象是通过 “{}” 或 “new Object” 创建的，该对象含有零个或者多个键值对。</p><p>之所以要判断是不是 <code>plainObject</code>，是为了跟其他的 JavaScript 对象如 null，数组，宿主对象（documents）等作区分，因为这些用 typeof 都会返回 object。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上节中写 type 函数时，用来存放 toString 映射结果的对象</span></span><br><span class="line"><span class="keyword">var</span> class2type = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 Object.prototype.toString</span></span><br><span class="line"><span class="keyword">var</span> toString = class2type.toString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于 Object.prototype.hasOwnProperty</span></span><br><span class="line"><span class="keyword">var</span> hasOwn = class2type.hasOwnProperty;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> proto, Ctor;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 排除掉明显不是obj的以及一些宿主对象如Window</span></span><br><span class="line">  <span class="keyword">if</span> (!obj || toString.call(obj) !== <span class="string">"[object Object]"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * getPrototypeOf es5 方法，获取 obj 的原型</span></span><br><span class="line"><span class="comment">   * 以 new Object 创建的对象为例的话</span></span><br><span class="line"><span class="comment">   * obj.__proto__ === Object.prototype</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  proto = <span class="built_in">Object</span>.getPrototypeOf(obj);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有原型的对象是纯粹的，Object.create(null) 就在这里返回 true</span></span><br><span class="line">  <span class="keyword">if</span> (!proto) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 以下判断通过 new Object 方式创建的对象</span></span><br><span class="line"><span class="comment">   * 判断 proto 是否有 constructor 属性，如果有就让 Ctor 的值为 proto.constructor</span></span><br><span class="line"><span class="comment">   * 如果是 Object 函数创建的对象，Ctor 在这里就等于 Object 构造函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  Ctor = hasOwn.call(proto, <span class="string">"constructor"</span>) &amp;&amp; proto.constructor;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里判断 Ctor 构造函数是不是 Object 构造函数，用于区分自定义构造函数和 Object 构造函数</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="keyword">typeof</span> Ctor === <span class="string">"function"</span> &amp;&amp;</span><br><span class="line">    hasOwn.toString.call(Ctor) === hasOwn.toString.call(<span class="built_in">Object</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EmptyObject"><a href="#EmptyObject" class="headerlink" title="EmptyObject"></a>EmptyObject</h2><p>jQuery 提供了 <code>isEmptyObject</code> 方法来判断是否是空对象，代码简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmptyObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line">  <span class="comment">// 判断是否有属性，for 循环一旦执行，就说明有属性，有属性就会返回 false</span></span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(&#123;&#125;)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject([])); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="literal">null</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="literal">undefined</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="number">1</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="string">""</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isEmptyObject(<span class="literal">true</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Window-对象"><a href="#Window-对象" class="headerlink" title="Window 对象"></a>Window 对象</h2><p>Window 对象作为客户端 JavaScript 的全局对象，它有一个 window 属性指向自身。我们可以利用这个特性判断是否是 Window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isWindow</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj !== <span class="literal">null</span> &amp;&amp; obj === obj.window;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isArrayLike"><a href="#isArrayLike" class="headerlink" title="isArrayLike"></a>isArrayLike</h2><p>如果 isArrayLike 返回 true，至少要满足三个条件之一：</p><ul><li>是数组</li><li>长度为 0</li><li>lengths 属性是大于 0 的数字类型，并且 <code>obj[length - 1]</code>必须存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayLike</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// obj 必须有 length属性</span></span><br><span class="line">  <span class="keyword">var</span> length = !!obj &amp;&amp; <span class="string">"length"</span> <span class="keyword">in</span> obj &amp;&amp; obj.length;</span><br><span class="line">  <span class="keyword">var</span> typeRes = type(obj);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 排除掉函数和 Window 对象</span></span><br><span class="line">  <span class="keyword">if</span> (typeRes === <span class="string">"function"</span> || isWindow(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    typeRes === <span class="string">"array"</span> ||</span><br><span class="line">    length === <span class="number">0</span> ||</span><br><span class="line">    (<span class="keyword">typeof</span> length === <span class="string">"number"</span> &amp;&amp; length &gt; <span class="number">0</span> &amp;&amp; length - <span class="number">1</span> <span class="keyword">in</span> obj)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="isElement"><a href="#isElement" class="headerlink" title="isElement"></a>isElement</h2><p>判断是不是 DOM 元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isElement</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !!(obj &amp;&amp; obj.nodeType === <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(isElement(div)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(isElement(<span class="string">""</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/28" target="_blank" rel="noopener">JavaScript 专题之类型判断(上)</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/30" target="_blank" rel="noopener">JavaScript 专题之类型判断(下)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习&lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/28&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JavaScript 专题之类型判断(上)&lt;/a&gt;的文章总结，其实就是照抄，哈哈哈哈…顺便几一句文章里的话：所有这些点，都必须脚踏实地在具体应用场景下去分析、去选择，要让场景说话。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="面试" scheme="http://yangtao.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 数组去重的几种方式</title>
    <link href="http://yangtao.site/2020/01/07/code-unique/"/>
    <id>http://yangtao.site/2020/01/07/code-unique/</id>
    <published>2020-01-07T05:14:42.000Z</published>
    <updated>2020-01-07T06:37:17.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数组去重，老生常谈，把学习到的多种方式进行归纳总结</p></blockquote><a id="more"></a><h2 id="双层循环"><a href="#双层循环" class="headerlink" title="双层循环"></a>双层循环</h2><p>第一种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arrLen = arr.length; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, resLen = result.length; j &lt; resLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === result[j]) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j === result.length) &#123;</span><br><span class="line">      result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arrary = [].concat(arr); <span class="comment">// 避免修改原数组，存个副本</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arrary.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arrary[i] === arrary[j]) &#123;</span><br><span class="line">        arrary.splice(j, <span class="number">1</span>); <span class="comment">// splice() 修改原数组，所以需要手动修改长度</span></span><br><span class="line">        len--;</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arrary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="indexOf-方法"><a href="#indexOf-方法" class="headerlink" title="indexOf 方法"></a>indexOf 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (result.indexOf(current) === <span class="number">-1</span>) &#123;</span><br><span class="line">      result.push(current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="filter-indexOf-方法"><a href="#filter-indexOf-方法" class="headerlink" title="filter + indexOf 方法"></a>filter + indexOf 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.indexOf(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span></span><br><span class="line">  arr.filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> arr.indexOf(item) === index);</span><br></pre></td></tr></table></figure><p>如果我们对一个已经排好序的数组去重，这种方法效率肯定高于使用 indexOf：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span></span><br><span class="line">  arr</span><br><span class="line">    .concat()</span><br><span class="line">    .sort()</span><br><span class="line">    .filter(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> !index || item !== arr[index - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>不过对于下面这种就会失效：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="string">"1"</span>, <span class="number">1</span>, <span class="string">"1"</span>];</span><br><span class="line"><span class="comment">//输出 [ 1, '1', 1, '1', 2, 3 ]</span></span><br></pre></td></tr></table></figure><h2 id="Object-键值对"><a href="#Object-键值对" class="headerlink" title="Object 键值对"></a>Object 键值对</h2><p>利用一个空的 Object 对象，我们把数组的值存成 Object 的 key 值，比如 <code>Object[value1] = true</code>，在判断另一个值的时候，如果 <code>Object[value2]</code>存在的话，就说明该值是重复的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">item</span> =&gt;</span></span><br><span class="line">    obj.hasOwnProperty(<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item))</span><br><span class="line">      ? <span class="literal">false</span></span><br><span class="line">      : (obj[<span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item)] = <span class="literal">true</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>typeof item + item</code> 是为了区分 1 还是 ‘1’</li><li><code>typeof item + JSON.stringify(item)</code> 是为了区分 <code>{value: 1}, {value: 1}</code></li></ol><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">"1"</span>, &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">1</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getObjType = <span class="function"><span class="params">arr</span> =&gt;</span> arr.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">typeof</span> item + <span class="built_in">JSON</span>.stringify(item));</span><br><span class="line"></span><br><span class="line">getObjType(arr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ["number1", "string"1"", "object&#123;"value":1&#125;", "object&#123;"value":1&#125;"]</span></span><br></pre></td></tr></table></figure><h2 id="Set-集合-和-Map-集合"><a href="#Set-集合-和-Map-集合" class="headerlink" title="Set 集合 和 Map 集合"></a>Set 集合 和 Map 集合</h2><p>ES6 去重方式已经是非常的精简：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">let</span> unique = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> !seen.has(item) &amp;&amp; seen.set(item, <span class="literal">true</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/27" target="_blank" rel="noopener">JavaScript 专题之数组去重</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;数组去重，老生常谈，把学习到的多种方式进行归纳总结&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="面试" scheme="http://yangtao.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Sass 日常使用总结</title>
    <link href="http://yangtao.site/2019/12/31/css-sass/"/>
    <id>http://yangtao.site/2019/12/31/css-sass/</id>
    <published>2019-12-31T04:37:40.000Z</published>
    <updated>2020-01-02T12:35:28.598Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世界上最成熟、最稳定、最强大的专业级CSS扩展语言！ - Sass 官网<br>简单汇总一下 sass 的日常使用，又简单地看了一下 Bootstrap@4 里应用的一个 Demo。</p></blockquote><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我本地结合 gulp+sass 自动化工具使用，主要如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass gulp-sass --save-dev</span><br></pre></td></tr></table></figure><p><code>gulpfile.js</code> 文件主要配置如下，详情可以参考<a href="https://github.com/yangtao2o/gulp-project/tree/master/src/mygulp" target="_blank" rel="noopener">这里</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; src, dest, watch &#125; = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">const</span> sass = <span class="built_in">require</span>(<span class="string">"gulp-sass"</span>);</span><br><span class="line">sass.compiler = <span class="built_in">require</span>(<span class="string">"node-sass"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scss</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> src(scssGlobSrc)</span><br><span class="line">    .pipe(sass(&#123; <span class="attr">outputStyle</span>: <span class="string">"expanded"</span> &#125;).on(<span class="string">"error"</span>, sass.logError))</span><br><span class="line">    .pipe(dest(<span class="string">"dist/sass"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.scss = scss;</span><br></pre></td></tr></table></figure><p>启动：<code>gulp scss</code>。</p><ul><li><a href="https://www.sass.hk/install/" target="_blank" rel="noopener">如何安装 Sass</a></li></ul><h2 id="四种编译排版"><a href="#四种编译排版" class="headerlink" title="四种编译排版"></a>四种编译排版</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*未编译样式*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">  &amp;-title &#123;</span><br><span class="line">    <span class="selector-tag">height</span>: 30<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">line-height</span>: 30<span class="selector-tag">px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nested 编译排版格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*命令行内容*/</span></span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">style</span><span class="selector-class">.scss</span><span class="selector-pseudo">:style.css</span> <span class="selector-tag">--style</span> <span class="selector-tag">nested</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译过后样式*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>expanded 编译排版格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*命令行内容*/</span></span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">style</span><span class="selector-class">.scss</span><span class="selector-pseudo">:style.css</span> <span class="selector-tag">--style</span> <span class="selector-tag">expanded</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译过后样式*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compact 编译排版格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*命令行内容*/</span></span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">style</span><span class="selector-class">.scss</span><span class="selector-pseudo">:style.css</span> <span class="selector-tag">--style</span> <span class="selector-tag">compact</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译过后样式*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>compressed 编译排版格式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*命令行内容*/</span></span><br><span class="line"><span class="selector-tag">sass</span> <span class="selector-tag">style</span><span class="selector-class">.scss</span><span class="selector-pseudo">:style.css</span> <span class="selector-tag">--style</span> <span class="selector-tag">compressed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译过后样式*/</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静默注释"><a href="#静默注释" class="headerlink" title="静默注释"></a>静默注释</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="comment">// 这种注释内容不会出现在生成的css文件中</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="comment">/* 这种注释内容会出现在生成的css文件中 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>非常简单明了，变量申明：<code>$color: #4a4a4a;</code>，变量引用：<code>color: $color;</code>，具体例子演示如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$bg-color</span>: <span class="number">#f90</span>;</span><br><span class="line"><span class="variable">$font-color</span>: <span class="number">#444</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="variable">$bg-color</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$font-color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$font-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="嵌套-CSS-规则"><a href="#嵌套-CSS-规则" class="headerlink" title="嵌套 CSS 规则"></a>嵌套 CSS 规则</h2><p>文档：在 Sass 中，你可以像俄罗斯套娃那样在规则块中嵌套规则块。sass 在输出 css 时会帮你把这些嵌套规则处理好，避免你的重复书写。</p><p>看个例子，基本就知道什么意思：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="variable">$font-color</span>;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;::after &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"..."</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>够简洁，不过有一些嵌套规则，需要稍稍留意，比如：</p><ul><li>父选择器的标识符<code>&amp;</code></li><li>群组选择器的嵌套</li><li>子组合选择器和同层组合选择器：<code>&gt;、+ 和 ~</code></li><li>属性嵌套</li></ul><h3 id="父选择器的标识符"><a href="#父选择器的标识符" class="headerlink" title="父选择器的标识符"></a>父选择器的标识符</h3><p>父选择器的标识符<code>&amp;</code>，记住<code>&amp;</code>是爸爸，你可以在爸爸的后边，也可以在爸爸的前边，随你，哈哈哈哈：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$font-color</span>;</span><br><span class="line">  <span class="comment">/* Dad after */</span></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/* Dad before */</span></span><br><span class="line">  <span class="selector-class">.header</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Dad after */</span></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Dad before */</span></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dad 是爸爸们：<code>nav a</code>，什么场景能用到<code>Dad before</code>？想想<code>nav a</code>是通用样式，我想给 header 组件单独<code>nav a</code>的样式，即<code>.header nav a</code>，即<code>.header &amp;</code>。</p><p>当然，还可以这样用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">  &amp;-sidebar &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="群组选择器的嵌套"><a href="#群组选择器的嵌套" class="headerlink" title="群组选择器的嵌套"></a>群组选择器的嵌套</h3><p>文档例子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="selector-tag">h1</span>,</span><br><span class="line">  <span class="selector-tag">h2</span>,</span><br><span class="line">  <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.8em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">0.8em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">aside</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>名字就已经告诉咱们这个规则的要点是：群组。大括号<code>{</code>前端的都可以是一个群组，比如<code>.container</code>，比如<code>nav, aside</code>，不论多少。</p><p>做为群组的任何一员，有权利获取子嗣，而且还得跟其他群组成员一模一样，若 Ta 有 三个（<code>h1, h2, h3</code>）子嗣，那群组的任何一员也得各自有三个子嗣；Ta 如果只有一个（<code>a</code>）子嗣，即使群组人很多，也得每个成员一人一个。</p><p>演练：有三个组件<code>header article footer</code>，我希望字体颜色有默认值，链接例外，并且有 hover 变化。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.acticle</span>,</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$font-color</span>;</span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.acticle</span>,</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.acticle</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.acticle</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-class">.footer</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子组合和同层组合"><a href="#子组合和同层组合" class="headerlink" title="子组合和同层组合"></a>子组合和同层组合</h3><p>子组合选择器 <code>&gt;</code> 和同层组合选择器 <code>+、~</code>，和 CSS 的规则一致。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选择article 后的同层所有 article 元素 */</span></span><br><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择nav元素后紧跟的article元素 */</span></span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 选择article下的所有命中section选择器的元素 */</span></span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文档例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  ~ article &#123;</span><br><span class="line">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">dashed</span> <span class="selector-id">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">dl</span> &gt; &#123;</span><br><span class="line">    dt &#123;</span><br><span class="line">      <span class="selector-tag">color</span>: <span class="selector-id">#333</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">dd</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">nav</span> + &amp; &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">article</span> ~ <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> dashed <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> &gt; <span class="selector-tag">section</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dt</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">dl</span> &gt; <span class="selector-tag">dd</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> + <span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h3><blockquote><p>规则：把属性名从中划线-的地方断开，在根属性后边添加一个冒号<code>:</code>，紧跟一个<code>{ }</code>块，把子属性部分写在这个<code>{ }</code>块中。就像 css 选择器嵌套一样，sass 会把你的子属性一一解开，把根属性和子属性部分通过中划线<code>-</code>连接起来，最后生成的效果与你手动一遍遍写的 css 样式一样：</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: &#123;</span><br><span class="line">    style: solid;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ccc</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span> &#123;</span><br><span class="line">    left: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一句话：我要把<code>border-style</code>里的<code>-</code>打断，拆散左右，并替换成<code>:</code>，重新使用<code>{}</code>嵌套使用，宗旨就是不破不立，有破才有立，把所有重复的东西统统归并，只写关键部位。</p><h2 id="Rules"><a href="#Rules" class="headerlink" title="@-Rules"></a>@-Rules</h2><h3 id="import-导入"><a href="#import-导入" class="headerlink" title="@import 导入"></a>@import 导入</h3><p>在单独使用 css 的 <code>@import</code> 规则导入文件，是不及 <code>link</code> 的效率，比如加载字体库，有次在项目中就吃过这个亏，那会发誓打死我也不用这个规则。</p><p>sass 的<code>@import</code> 规则是在生成 css 文件时就把相关文件导入进来，所以，和 css 的<code>@import</code>没有什么关系，放心食用。</p><p>但是由于 sass 兼容原生的 css，所以它也支持原生的 CSS<code>@import</code>，比如导入文件或者 url 是以 <code>.css</code>结尾的。</p><p>使用：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用方法</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"header"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"footer"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个导入</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"rounded-corners"</span>, <span class="string">"text-shadow"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套导入</span></span><br><span class="line"><span class="selector-class">.blue-theme</span> &#123;</span><br><span class="line">  @<span class="keyword">import</span> <span class="string">"blue-theme"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将文件命名为 <code>_colors.scss</code>，便不会编译<code>_colours.css</code> 文件，但是导入时依然是<code>@import &quot;colors&quot;;</code>。</p><h3 id="media-媒体查询"><a href="#media-媒体查询" class="headerlink" title="@media 媒体查询"></a>@media 媒体查询</h3><p>Sass 中 @media 指令与 CSS 中用法一样，不过还允许其在 CSS 规则中嵌套，编译时，@media 将被编译到文件的最外层，包含嵌套的父选择器。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  @<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 拼接 and */</span></span><br><span class="line">@<span class="keyword">media</span> screen &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    @<span class="keyword">media</span> (max-width: 1140px) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.other</span> &#123;</span><br><span class="line">    @<span class="keyword">media</span> (max-width: 640px) &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (orientation: landscape) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 拼接 and */</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">1140px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">640px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.other</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="@extend"></a>@extend</h3><p>和其他语言一样，就是继承。比如代码中的<code>.error</code>，以及同级<code>.intrusion</code>，都会被继承：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: url(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .error;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span>,</span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#f00</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span><span class="selector-class">.intrusion</span>,</span><br><span class="line"><span class="selector-class">.intrusion</span><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/image/hacked.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.seriousError</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制指令"><a href="#控制指令" class="headerlink" title="控制指令"></a>控制指令</h2><h3 id="if"><a href="#if" class="headerlink" title="@if"></a>@if</h3><p>和 JavaScript 的 if 一样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$type</span>: monster;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$type</span> == ocean &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$type</span> == monster &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h3><p>区别在于 through 与 to 的含义：through 包含最后一位，而 to 不包含：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 to 3 &#123;</span><br><span class="line">  <span class="selector-class">.list-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1em</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 3 &#123;</span><br><span class="line">  <span class="selector-class">.item-</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2rem</span> * <span class="variable">$i</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item-3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h3><p>类似于 JavaScript 的 <code>for...in</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">each</span> <span class="variable">$kind</span> in small, middle, large &#123;</span><br><span class="line">  .#&#123;<span class="variable">$kind</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">"/images/#&#123;$kind&#125;-icon.png"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.small-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/small-icon.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/middle-icon.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/large-icon.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h2><p>混合器使用<code>@mixin</code>标识符定义，通过<code>@include</code>来使用这个混合器，用来解决大段重用的代码。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> clearfix &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">  * <span class="selector-tag">html</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> clearfix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"."</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* <span class="selector-tag">html</span> <span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最强大的一点就是如同函数一般，可以传参，不仅可以指定默认值，并且可以使用关键词参数，这样就不用管参数前后顺序了：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> border-value(<span class="variable">$width</span>: 1px, <span class="variable">$color</span>: <span class="number">#333</span>, <span class="variable">$style</span>: solid) &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: <span class="variable">$style</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*不传参*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> border-value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*传参*/</span></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> border-value(<span class="number">2px</span>, <span class="number">#666</span>, dashed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*关键词传参*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> border-value(<span class="variable">$style</span>: dashed, <span class="variable">$width</span>: 3px, <span class="variable">$color</span>: <span class="number">#999</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*不传参*/</span></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*传参*/</span></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#666</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*关键词传参*/</span></span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: dashed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数指令"><a href="#函数指令" class="headerlink" title="函数指令"></a>函数指令</h2><p>与 mixin 相同，也可以传递若干个全局变量给函数作为参数。一个函数可以含有多条语句，需要调用 <code>@return</code> 输出结果。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$grid-width</span>: <span class="number">40px</span>;</span><br><span class="line"><span class="variable">$gutter-width</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">@function grid-width(<span class="variable">$n</span>) &#123;</span><br><span class="line">  @return <span class="variable">$n</span> * <span class="variable">$grid-width</span> + (<span class="variable">$n</span> - 1) * <span class="variable">$gutter-width</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: grid-width(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sidebar2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: grid-width(<span class="variable">$n</span>: <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.sidebar1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">240px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">490px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SassScript"><a href="#SassScript" class="headerlink" title="SassScript"></a>SassScript</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>SassScript 支持 6 种主要的数据类型：</p><ul><li>数字，<code>1, 2, 13, 10px</code></li><li>字符串，有引号字符串与无引号字符串，<code>&quot;foo&quot;, &#39;bar&#39;, baz</code></li><li>颜色，<code>blue, #04a3f9, rgba(255,0,0,0.5)</code></li><li>布尔型，<code>true, false</code></li><li>空值，<code>null</code></li><li>数组 (list)，用空格或逗号作分隔符，<code>1.5em 1em 0 2em, Helvetica, Arial, sans-serif</code></li><li>maps, 相当于 JavaScript 的 object，<code>(key1: value1, key2: value2)</code></li></ul><h3 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h3><p>SassScript 支持数字的加减乘除、取整等运算 <code>(+, -, *, /, %)</code>，关系运算 <code>&lt;, &gt;, &lt;=, &gt;=</code> 也可用于数字运算，相等运算 <code>==</code>, <code>!=</code> 可用于所有数据类型。</p><h3 id="插值语句"><a href="#插值语句" class="headerlink" title="插值语句 #{}"></a>插值语句 #{}</h3><p>通过 <code>#{}</code> 插值语句可以在选择器或属性名中使用变量，避免 Sass 运行运算表达式。</p><h2 id="Bootstrap-4"><a href="#Bootstrap-4" class="headerlink" title="Bootstrap@4"></a>Bootstrap@4</h2><ul><li><a href="https://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap v4.4.1</a></li></ul><p>入口文件 <code>bootstrap.scss</code>的引入组件很多，我们就挑一个看看，比如下面是我们最终的 float 内容：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float-left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float-right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float-none</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">576px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.float-sm-left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-sm-right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-sm-none</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.float-md-left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-md-right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-md-none</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">992px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.float-lg-left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-lg-right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-lg-none</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.float-xl-left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-xl-right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.float-xl-none</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们去看看 bootstrap 是如何实现的：</p><h3 id="第一步：找路"><a href="#第一步：找路" class="headerlink" title="第一步：找路"></a>第一步：找路</h3><p>根据 <code>bootstrap.scss</code>里的内容<code>@import &quot;mixins&quot;;</code>，进入当前目录下的<code>_mixins.scss</code>，看到<code>@import &quot;mixins/float&quot;;</code>，所以继续打开<code>mixins</code> 目录下的 <code>_float.scss</code>。</p><h3 id="第二步：内容"><a href="#第二步：内容" class="headerlink" title="第二步：内容"></a>第二步：内容</h3><p><code>_float.scss</code>所有内容如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stylelint-disable declaration-no-important</span></span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$breakpoint</span> in map-keys(<span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  @<span class="keyword">include</span> media-breakpoint-up(<span class="variable">$breakpoint</span>) &#123;</span><br><span class="line">    <span class="variable">$infix</span>: breakpoint-infix(<span class="variable">$breakpoint</span>, <span class="variable">$grid-breakpoints</span>);</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.float</span>#&#123;<span class="variable">$infix</span>&#125;-<span class="attribute">left</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.float</span>#&#123;<span class="variable">$infix</span>&#125;-<span class="attribute">right</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.float</span>#&#123;<span class="variable">$infix</span>&#125;-<span class="attribute">none</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，有三个地方，我不知道是什么，如<code>map-keys()</code>，<code>media-breakpoint-up()</code>，<code>breakpoint-infix()</code>。</p><h3 id="第三步：解惑"><a href="#第三步：解惑" class="headerlink" title="第三步：解惑"></a>第三步：解惑</h3><ul><li><code>map-keys()</code> 返回 map 里面所有的 key：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$grid-breakpoints</span>: (</span><br><span class="line">  xs: <span class="number">0</span>,</span><br><span class="line">  sm: <span class="number">576px</span>,</span><br><span class="line">  md: <span class="number">768px</span>,</span><br><span class="line">  lg: <span class="number">992px</span>,</span><br><span class="line">  xl: <span class="number">1200px</span></span><br><span class="line">) !default;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$breakpoint</span> in map-keys(<span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  .#&#123;<span class="variable">$breakpoint</span>&#125; &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.xs</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sm</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.md</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.lg</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xl</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资料：<a href="https://www.cnblogs.com/whqet/p/Sassmap.html" target="_blank" rel="noopener">Sass map 详解</a></p><ul><li><code>media-breakpoint-up()</code>，自定义函数，主要是根据媒体查询给出不同的结果</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.</span></span><br><span class="line"><span class="comment">// Makes the @content apply to the given breakpoint and wider.</span></span><br><span class="line">@<span class="keyword">mixin</span> media-breakpoint-up(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>: <span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  <span class="variable">$min</span>: breakpoint-min(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>);</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$min</span> &#123;</span><br><span class="line">    @<span class="keyword">media</span> (min-width: <span class="variable">$min</span>) &#123;</span><br><span class="line">      @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>breakpoint-min()</code>也是个函数：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Minimum breakpoint width. Null for the smallest (first) breakpoint.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &gt;&gt; breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))</span></span><br><span class="line"><span class="comment">//    576px</span></span><br><span class="line">@function breakpoint-min(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>: <span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  <span class="variable">$min</span>: map-get(<span class="variable">$breakpoints</span>, <span class="variable">$name</span>);</span><br><span class="line">  @return if(<span class="variable">$min</span> != 0, <span class="variable">$min</span>, null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>map-get</code>同 <code>map-keys</code>用法，返回 map 里面指定可以的 <code>value</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$min-num</span>: breakpoint-min(sm, <span class="variable">$grid-breakpoints</span>);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (min-width: <span class="variable">$min-num</span>) &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">@<span class="keyword">media</span> (min-width: 576px) &#123;</span><br><span class="line">  <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@content</code>用在<code>mixin</code>里面的，当定义一个<code>mixin</code>后，并且设置了<code>@content</code>之后，、<code>@include</code>的时候可以传入相应的内容到<code>mixin</code>里面：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line">@<span class="keyword">mixin</span> colors(<span class="variable">$color</span>: blue) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">  @<span class="keyword">content</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> colors &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.colors</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">border-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资料：<a href="https://segmentfault.com/q/1010000004119350" target="_blank" rel="noopener">sass 语法中的@content</a></p><ul><li><code>breakpoint-infix()</code>，自定义函数：</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.</span></span><br><span class="line"><span class="comment">// Useful for making responsive utilities.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    &gt;&gt; breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))</span></span><br><span class="line"><span class="comment">//    ""  (Returns a blank string)</span></span><br><span class="line"><span class="comment">//    &gt;&gt; breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))</span></span><br><span class="line"><span class="comment">//    "-sm"</span></span><br><span class="line">@function breakpoint-infix(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>: <span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  @return if(breakpoint-min(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>) == null, <span class="string">""</span>, <span class="string">"-#&#123;$name&#125;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据注释我们演示一下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$min-value-sm</span>: breakpoint-infix(sm, <span class="variable">$grid-breakpoints</span>);</span><br><span class="line"><span class="variable">$min-value-xs</span>: breakpoint-infix(xs, <span class="variable">$grid-breakpoints</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float</span>#&#123;<span class="variable">$min-value-sm</span>&#125;-<span class="attribute">left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span>#&#123;<span class="variable">$min-value-xs</span>&#125;-<span class="attribute">left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line"><span class="selector-class">.float-sm-left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.float-left</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h3><p>最后，我们把所有关于 float 的内容组合在一起：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$grid-breakpoints</span>: (</span><br><span class="line">  xs: <span class="number">0</span>,</span><br><span class="line">  sm: <span class="number">576px</span>,</span><br><span class="line">  md: <span class="number">768px</span>,</span><br><span class="line">  lg: <span class="number">992px</span>,</span><br><span class="line">  xl: <span class="number">1200px</span></span><br><span class="line">) !default;</span><br><span class="line"></span><br><span class="line">@function breakpoint-min(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>: <span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  <span class="variable">$min</span>: map-get(<span class="variable">$breakpoints</span>, <span class="variable">$name</span>);</span><br><span class="line">  @return if(<span class="variable">$min</span> != 0, <span class="variable">$min</span>, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@function breakpoint-infix(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>: <span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  @return if(breakpoint-min(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>) == null, <span class="string">""</span>, <span class="string">"-#&#123;$name&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> media-breakpoint-up(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>: <span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  <span class="variable">$min</span>: breakpoint-min(<span class="variable">$name</span>, <span class="variable">$breakpoints</span>);</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$min</span> &#123;</span><br><span class="line">    @<span class="keyword">media</span> (min-width: <span class="variable">$min</span>) &#123;</span><br><span class="line">      @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">content</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$breakpoint</span> in map-keys(<span class="variable">$grid-breakpoints</span>) &#123;</span><br><span class="line">  @<span class="keyword">include</span> media-breakpoint-up(<span class="variable">$breakpoint</span>) &#123;</span><br><span class="line">    <span class="variable">$infix</span>: breakpoint-infix(<span class="variable">$breakpoint</span>, <span class="variable">$grid-breakpoints</span>);</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.float</span>#&#123;<span class="variable">$infix</span>&#125;-<span class="attribute">left</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: left <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.float</span>#&#123;<span class="variable">$infix</span>&#125;-<span class="attribute">right</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: right <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.float</span>#&#123;<span class="variable">$infix</span>&#125;-<span class="attribute">none</span> &#123;</span><br><span class="line">      <span class="attribute">float</span>: none <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样直接就可以在环境里跑起来了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;世界上最成熟、最稳定、最强大的专业级CSS扩展语言！ - Sass 官网&lt;br&gt;简单汇总一下 sass 的日常使用，又简单地看了一下 Bootstrap@4 里应用的一个 Demo。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yangtao.site/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yangtao.site/tags/CSS/"/>
    
      <category term="SASS" scheme="http://yangtao.site/tags/SASS/"/>
    
  </entry>
  
  <entry>
    <title>关于 React 状态管理那些事</title>
    <link href="http://yangtao.site/2019/12/29/react-state/"/>
    <id>http://yangtao.site/2019/12/29/react-state/</id>
    <published>2019-12-29T07:56:21.000Z</published>
    <updated>2020-01-02T12:39:35.162Z</updated>
    
    <content type="html"><![CDATA[<p>目的：采用状态管理的多种方式：实现一个计数器，可以加一，减一， 置零。<br><a id="more"></a></p><h2 id="React-state"><a href="#React-state" class="headerlink" title="React state"></a>React state</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleClick(actions) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (actions) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"INCREASE"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">          value: ++state.value</span><br><span class="line">        &#125;));</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"DECREASE"</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state, props</span>) =&gt;</span> (&#123;</span><br><span class="line">          value: --state.value</span><br><span class="line">        &#125;));</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          value: <span class="number">0</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="keyword">this</span>.state.value&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.handleClick("INCREASE")&#125;&gt;+1&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; <span class="keyword">this</span>.handleClick(<span class="string">"DECREASE"</span>)&#125;&gt;<span class="number">-1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; this.handleClick("RESET")&#125;&gt;0&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><p>第一步：创建 reducer</p><ul><li>可以使用单独的一个 reducer,也可以将多个 reducer 合并为一个 reducer，即：combineReducers()</li><li>action 发出命令后将 state 放入 reucer 加工函数中，返回新的 state,对 state 进行加工处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = &#123; counter: <span class="number">0</span> &#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"INCREASE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: state.counter + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"DECREASE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: state.counter - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二步：创建 action</p><ul><li>用户是接触不到 state 的，只能有 view 触发，所以，这个 action 可以理解为指令，需要发出多少动作就有多少指令</li><li>action 是一个对象，必须有一个叫 type 的参数，定义 action 类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increase: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"INCREASE"</span> &#125;),</span><br><span class="line">  decrease: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"DECREASE"</span> &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三步：创建的 store，使用 createStore 方法</p><ul><li>store 可以理解为有多个加工机器的总工厂</li><li>提供 subscribe，dispatch，getState 这些方法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</span><br><span class="line"></span><br><span class="line">store.dispatch(actions.increase()); <span class="comment">// &#123;counter: 1&#125;</span></span><br><span class="line">store.dispatch(actions.increase()); <span class="comment">// &#123;counter: 2&#125;</span></span><br><span class="line">store.dispatch(actions.increase()); <span class="comment">// &#123;counter: 3&#125;</span></span><br><span class="line">store.dispatch(actions.decrease()); <span class="comment">// &#123;counter: 2&#125;</span></span><br></pre></td></tr></table></figure><p>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="function">(<span class="params">state = &#123; counter: <span class="number">0</span> &#125;, action = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type &#125; = action;</span><br><span class="line">  <span class="keyword">const</span> &#123; counter &#125; = state;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"INCREASE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: counter + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"DECREASE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: counter - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterRedux</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.unsubscribe = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        counter: store.getState().counter</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    <span class="keyword">this</span>.unsubscribe();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.state.counter&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; store.dispatch(&#123; type: "INCREASE" &#125;)&#125;&gt;+1&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; store.dispatch(&#123; <span class="attr">type</span>: <span class="string">"DECREASE"</span> &#125;)&#125;&gt;<span class="number">-1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; store.dispatch(&#123; type: "RESET" &#125;)&#125;&gt;0&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>action 可以单独出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increase: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"INCREASE"</span> &#125;),</span><br><span class="line">  decrease: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"DECREASE"</span> &#125;),</span><br><span class="line">  reset: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">type</span>: <span class="string">"RESET"</span> &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line">&lt;button onClick=&#123;() =&gt; store.dispatch(actions.increase())&#125;&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;;</span></span><br></pre></td></tr></table></figure><p>主要是为了展示 redux 的一个工作流程，并没有把状态挂载在最顶层，详细完整版可以参考阮一峰老师的代码：<a href="https://github.com/reduxjs/redux/tree/master/examples/counter" target="_blank" rel="noopener">Redux Counter Example</a>。</p><p>Redux 的工作流程图，<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">阮一峰博客文章</a>摘录:</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg" alt="Redux-Flow"></p><h2 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h2><p>Redux 是一款状态管理库，并且提供了 react-redux 库来与 React 亲密配合，这两者的关系如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2018/10/24/166a3e1533df9e8d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="react-redux流程图"></p><p>继续实现计数器，完整 Demo 可以看<a href="https://github.com/yangtao2o/myreact/tree/master/myredux/react-redux-counter" target="_blank" rel="noopener">这里</a>。</p><p>src 目录下大体结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── actions</span><br><span class="line">│   └── counter.jsx</span><br><span class="line">├── components</span><br><span class="line">│   └── app.jsx</span><br><span class="line">├── reducers</span><br><span class="line">│   └── counter.jsx</span><br><span class="line">└── store</span><br><span class="line">    └── app.jsx</span><br><span class="line">├── index.jsx</span><br></pre></td></tr></table></figure><p>首先，看入口文件 <code>index.js</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducers/counter.jsx"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./store/app.jsx"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  document.getElementById("root")</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>Provider 组件，其实就是 Context 实现的，提供一个状态供跨组件使用，只需要把 store 给他传过去，所有的子组件就可以通过 props 属性拿到状态值。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Context = React.createContext();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将React-redux中的Provide包装了react提供的API生成的Context.Provider</span></span><br><span class="line">  <span class="comment">//&lt;Provider store=&#123;xxxx&#125;&gt;&lt;/Provider&gt;，将store挂载在contex上</span></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Context.Provider value=&#123;&#123; <span class="attr">store</span>: <span class="keyword">this</span>.props.store &#125;&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125; <span class="comment">//子组件</span></span><br><span class="line">      &lt;<span class="regexp">/Context.Provider&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>Reducer 函数，它接受 Action 和当前 State 作为参数，返回一个新的 State，内容和之前的几乎差不多：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">"./reducers/counter.jsx"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./reducers/counter.jsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state = &#123; counter: <span class="number">0</span> &#125;, action = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; counter &#125; = state;</span><br><span class="line">  <span class="keyword">const</span> &#123; type &#125; = action;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"INCREASE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: counter + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"DECREASE"</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: counter - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React-Redux 的核心之一 connect 方法，用于从 UI 组件生成容器组件。connect 方法接受两个参数：<code>mapStateToProps</code> 和 <code>mapDispatchToProps</code>。它们定义了 UI 组件的业务逻辑。前者负责输入逻辑，即将 state 映射到 UI 组件的参数（props），后者负责输出逻辑，即将用户对 UI 组件的操作映射成 Action。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./store/app.jsx"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/app.jsx</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./../components/app.jsx"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  increaseAction,</span><br><span class="line">  decreaseAction,</span><br><span class="line">  resetAction</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./../actions/counter.jsx"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapStateToProps用户自己定义需要的状态</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function"><span class="params">state</span> =&gt;</span> (&#123; <span class="attr">counter</span>: state.counter &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function"><span class="params">dispatch</span> =&gt;</span> (&#123;</span><br><span class="line">  onIncreaseHandle: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(increaseAction),</span><br><span class="line">  onDecreaseHandle: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(decreaseAction),</span><br><span class="line">  onResetHandle: <span class="function"><span class="params">()</span> =&gt;</span> dispatch(resetAction)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(App);</span><br></pre></td></tr></table></figure><p>Action 的 type 属性：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./../actions/counter.jsx</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> increaseAction = &#123; <span class="attr">type</span>: <span class="string">"INCREASE"</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> decreaseAction = &#123; <span class="attr">type</span>: <span class="string">"DECREASE"</span> &#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> resetAction = &#123; <span class="attr">type</span>: <span class="string">"RESET"</span> &#125;;</span><br></pre></td></tr></table></figure><p>接着，我们看一下熟悉的 App 组件应该怎么写：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import App from "./../components/app.jsx";</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">      counter,</span><br><span class="line">      onIncreaseHandle,</span><br><span class="line">      onDecreaseHandle,</span><br><span class="line">      onResetHandle</span><br><span class="line">    &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;counter&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onIncreaseHandle&#125;&gt;+1&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;onDecreaseHandle&#125;&gt;<span class="number">-1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;onResetHandle&#125;&gt;0&lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><p>前期做了许多工作，这里如同从父组件里获取 props 属性般获取、触发等行为，所有 store 里的 state 都通过 connect 方法给处理了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(mapStateToProps, mapDispatchToProps)(App);</span><br></pre></td></tr></table></figure><p>到这里，计数器基本的功能都好了，我的 <a href="https://github.com/yangtao2o/myreact/tree/master/myredux/react-redux-counter" target="_blank" rel="noopener">Demo</a>，阮一峰老师的 <a href="https://github.com/jackielii/simplest-redux-example/blob/master/index.js" target="_blank" rel="noopener">Demo</a>，以及讲解的文章，<a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">Redux 入门教程（三）：React-Redux 的用法</a>，<a href="https://juejin.im/post/5bcfce9ff265da0aa5294a25" target="_blank" rel="noopener">让 react 用起来更得心应手——（react-redux）</a>。</p><h2 id="React-Hooks"><a href="#React-Hooks" class="headerlink" title="React Hooks"></a>React Hooks</h2><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">Redux 入门教程（一）：基本用法</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">Redux 入门教程（三）：React-Redux 的用法</a></li><li><a href="https://juejin.im/post/5bcfce9ff265da0aa5294a25" target="_blank" rel="noopener">让 react 用起来更得心应手——（react-redux）</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目的：采用状态管理的多种方式：实现一个计数器，可以加一，减一， 置零。&lt;br&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://yangtao.site/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="面试" scheme="http://yangtao.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="react" scheme="http://yangtao.site/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>JS 异步处理的几种方式·请求篇</title>
    <link href="http://yangtao.site/2019/12/29/async-method-2/"/>
    <id>http://yangtao.site/2019/12/29/async-method-2/</id>
    <published>2019-12-29T07:49:41.000Z</published>
    <updated>2020-01-02T12:37:46.797Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://github.com/mqyqingfeng/Blog/issues/98" target="_blank" rel="noopener">ES6 系列之我们来聊聊 Promise</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/101" target="_blank" rel="noopener">ES6 系列之异步处理实战</a></li><li><a href="https://github.com/mqyqingfeng/Blog#es6-%E7%B3%BB%E5%88%97%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">ES6 系列 - 冴羽的博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习资料&quot;&gt;&lt;a href=&quot;#学习资料&quot; class=&quot;headerlink&quot; title=&quot;学习资料&quot;&gt;&lt;/a&gt;学习资料&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/mqyqingfeng/Blog/issues/98&quot; 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="面试" scheme="http://yangtao.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="ES6" scheme="http://yangtao.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS 异步处理的几种方式·红灯篇</title>
    <link href="http://yangtao.site/2019/12/29/async-method-1/"/>
    <id>http://yangtao.site/2019/12/29/async-method-1/</id>
    <published>2019-12-29T07:44:22.000Z</published>
    <updated>2020-01-02T12:36:53.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目：红灯三秒亮一次，绿灯一秒亮一次，黄灯两秒亮一次，不断交替循环</p></blockquote><a id="more"></a><p>先定义下红绿灯：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">red</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"red"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">green</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"green"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yellow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"yellow"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异步编程的语法目标，就是怎样让它更像同步编程,有以下几种：</p><ul><li>回调函数实现</li><li>事件监听 event</li><li>发布订阅 Publish/Subscribe</li><li>Promise 和 Generator</li><li>Async/await</li></ul><h2 id="一、回调函数"><a href="#一、回调函数" class="headerlink" title="一、回调函数"></a>一、回调函数</h2><p>这是最常见的一种方式，把函数作为参数送入，然后回调。</p><p>第一版：简单明了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"wait for about 3 seconds..."</span>);</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    red();</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      green();</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        yellow();</span><br><span class="line">        step();</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step();</span><br></pre></td></tr></table></figure><p>第二版：封装定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> light = <span class="function">(<span class="params">timmer, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, timmer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  light(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    red();</span><br><span class="line">    light(<span class="number">1000</span>, () =&gt; &#123;</span><br><span class="line">      green();</span><br><span class="line">      light(<span class="number">2000</span>, () =&gt; &#123;</span><br><span class="line">        yellow();</span><br><span class="line">        step();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">typeof</span> cb === <span class="string">"function"</span> &amp;&amp; cb();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"wait for about 3 seconds..."</span>));</span><br></pre></td></tr></table></figure><h2 id="二、事件监听"><a href="#二、事件监听" class="headerlink" title="二、事件监听"></a>二、事件监听</h2><p>采用事件驱动模式。任务的执行不取决于代码的顺序，而取决于某个事件是否发生。</p><p>第一版：监听一个事件，然后触发这个事件，并且执行事件里的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Node events 模块</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">emitter.on(<span class="string">"lightEvent"</span>, str =&gt; <span class="built_in">console</span>.log(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line">emitter.emit(<span class="string">"lightEvent"</span>, <span class="string">"red"</span>);</span><br><span class="line">emitter.emit(<span class="string">"lightEvent"</span>, <span class="string">"green"</span>);</span><br><span class="line">emitter.emit(<span class="string">"lightEvent"</span>, <span class="string">"yellow"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// red</span></span><br><span class="line"><span class="comment">// green</span></span><br><span class="line"><span class="comment">// yellow</span></span><br></pre></td></tr></table></figure><p>第二版：加个顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 Node events 模块</span></span><br><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">"events"</span>);</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lightHandler = <span class="function">(<span class="params">timmer, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, timmer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line">emitter.on(<span class="string">"lightEvent"</span>, str =&gt; <span class="built_in">console</span>.log(str));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  lightHandler(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    emitter.emit(<span class="string">"lightEvent"</span>, <span class="string">"red"</span>);</span><br><span class="line">    lightHandler(<span class="number">1000</span>, () =&gt; &#123;</span><br><span class="line">      emitter.emit(<span class="string">"lightEvent"</span>, <span class="string">"green"</span>);</span><br><span class="line">      lightHandler(<span class="number">2000</span>, () =&gt; &#123;</span><br><span class="line">        emitter.emit(<span class="string">"lightEvent"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">        step();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step();</span><br></pre></td></tr></table></figure><p>依旧是回调执行，我们继续远征吧。</p><h2 id="三、发布-订阅"><a href="#三、发布-订阅" class="headerlink" title="三、发布/订阅"></a>三、发布/订阅</h2><blockquote><p>“事件”，完全可以理解成”信号”。</p><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布/订阅模式”（publish-subscribe pattern），又称”观察者模式”（observer pattern）。 - 阮一峰</p></blockquote><p>订阅者（Subscriber）把自己想订阅的事件注册（Subscribe）到调度中心（Event Channel），当发布者（Publisher）发布该事件（Publish Event）到调度中心，也就是该事件触发时，由调度中心统一调度（Fire Event）订阅者注册到调度中心的处理代码。</p><p>第一版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publisher = &#123;</span><br><span class="line">  <span class="comment">// 缓存列表</span></span><br><span class="line">  lists: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  subscribe: <span class="function"><span class="keyword">function</span>(<span class="params">event, handler</span>) </span>&#123;</span><br><span class="line">    (<span class="keyword">this</span>.lists[event] || (<span class="keyword">this</span>.lists[event] = [])).push(handler);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 发布</span></span><br><span class="line">  publish: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> event = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">const</span> events = <span class="keyword">this</span>.lists[event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!events || events.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    events.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      item.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">publisher.subscribe(<span class="string">"lightEvent"</span>, red);</span><br><span class="line">publisher.subscribe(<span class="string">"lightEvent"</span>, green);</span><br><span class="line">publisher.subscribe(<span class="string">"lightEvent"</span>, yellow);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布</span></span><br><span class="line">publisher.publish(<span class="string">"lightEvent"</span>);</span><br></pre></td></tr></table></figure><p>第二版：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> publisher = &#123;</span><br><span class="line">  <span class="comment">// 缓存列表</span></span><br><span class="line">  lists: &#123;&#125;,</span><br><span class="line">  <span class="comment">// 订阅</span></span><br><span class="line">  subscribe: <span class="function"><span class="keyword">function</span>(<span class="params">event, handler</span>) </span>&#123;</span><br><span class="line">    (<span class="keyword">this</span>.lists[event] || (<span class="keyword">this</span>.lists[event] = [])).push(handler);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 取消订阅</span></span><br><span class="line">  unsubscribe: <span class="function"><span class="keyword">function</span>(<span class="params">event, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> events = <span class="keyword">this</span>.lists[event];</span><br><span class="line">    <span class="keyword">if</span> (!events) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!handler) &#123;</span><br><span class="line">      events &amp;&amp; (events.length = <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      events.forEach(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item === handler) &#123;</span><br><span class="line">          events.splice(i, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 发布</span></span><br><span class="line">  publish: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> event = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">const</span> events = <span class="keyword">this</span>.lists[event];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!events || events.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    events.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      item.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lightHandler = <span class="function">(<span class="params">timmer, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cb();</span><br><span class="line">  &#125;, timmer);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> colorHandler = <span class="function"><span class="params">color</span> =&gt;</span> <span class="built_in">console</span>.log(color);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅</span></span><br><span class="line">publisher.subscribe(<span class="string">"redEvent"</span>, colorHandler);</span><br><span class="line">publisher.subscribe(<span class="string">"greenEvent"</span>, colorHandler);</span><br><span class="line">publisher.subscribe(<span class="string">"yellowEvent"</span>, colorHandler);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  lightHandler(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">    publisher.publish(<span class="string">"redEvent"</span>, <span class="string">"red"</span>);</span><br><span class="line">    lightHandler(<span class="number">1000</span>, () =&gt; &#123;</span><br><span class="line">      publisher.publish(<span class="string">"greenEvent"</span>, <span class="string">"green"</span>);</span><br><span class="line">      lightHandler(<span class="number">2000</span>, () =&gt; &#123;</span><br><span class="line">        publisher.publish(<span class="string">"yellowEvent"</span>, <span class="string">"yellow"</span>);</span><br><span class="line">        step();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step();</span><br></pre></td></tr></table></figure><h2 id="三、Promise"><a href="#三、Promise" class="headerlink" title="三、Promise"></a>三、Promise</h2><p>直接上代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> light = <span class="function">(<span class="params">timmer, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cb();</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, timmer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> step = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Promise</span>.resolve()</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> light(<span class="number">3000</span>, red);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> light(<span class="number">1000</span>, green);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> light(<span class="number">2000</span>, yellow);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      step();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">step();</span><br></pre></td></tr></table></figure><h2 id="四、Generator"><a href="#四、Generator" class="headerlink" title="四、Generator"></a>四、Generator</h2><p>Promise 的写法减少了好多回调，但是仍有回调的存在，这次尝试使用 Generator，看是否能够避免回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> light = <span class="function">(<span class="params">timmer, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cb();</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, timmer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> light(<span class="number">3000</span>, red);</span><br><span class="line">  <span class="keyword">yield</span> light(<span class="number">1000</span>, green);</span><br><span class="line">  <span class="keyword">yield</span> light(<span class="number">3000</span>, yellow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = gen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> step = <span class="function">(<span class="params">gen, iterator</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> s = iterator.next();</span><br><span class="line">  <span class="comment">// 返回 &#123; value: Promise &#123; &lt;pending&gt; &#125;, done: false &#125;</span></span><br><span class="line">  <span class="keyword">if</span> (s.done) &#123;</span><br><span class="line">    step(gen, gen());</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// value 返回 Promise 对象</span></span><br><span class="line">    s.value.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      step(gen, iterator);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">step(gen, iterator);</span><br></pre></td></tr></table></figure><h2 id="五、Async-await"><a href="#五、Async-await" class="headerlink" title="五、Async/await"></a>五、Async/await</h2><p>有了 Generator 做铺垫，<code>async/await</code> 就比较容易理解了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> light = <span class="function">(<span class="params">timmer, cb</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      cb();</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;, timmer);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> light(<span class="number">3000</span>, red);</span><br><span class="line">  <span class="keyword">await</span> light(<span class="number">1000</span>, green);</span><br><span class="line">  <span class="keyword">await</span> light(<span class="number">2000</span>, yellow);</span><br><span class="line">  step();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">step();</span><br></pre></td></tr></table></figure><p>同步写法，容易理解，和我们的线性思考方式一致，<code>async/await</code>是 <code>ES2017</code> 的方案。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li><a href="https://www.cnblogs.com/dojo-lzz/p/5495671.html" target="_blank" rel="noopener">一道关于 Promise 应用的面试题</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/98" target="_blank" rel="noopener">ES6 系列之我们来聊聊 Promise</a></li><li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="noopener">Javascript 异步编程的 4 种方法</a></li><li><a href="https://juejin.im/post/5cd97d75e51d453a69177ecc" target="_blank" rel="noopener">JavaScript | 异步处理</a></li><li><a href="https://www.cnblogs.com/pingfan1990/p/4661841.html" target="_blank" rel="noopener">nodejs 事件的监听与事件的触发</a></li><li><a href="https://www.codercto.com/a/81223.html" target="_blank" rel="noopener">JavaScript 发布-订阅模式</a></li><li><a href="https://www.jb51.net/article/154921.htm" target="_blank" rel="noopener">JavaScript 实现与使用发布/订阅模式详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;题目：红灯三秒亮一次，绿灯一秒亮一次，黄灯两秒亮一次，不断交替循环&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="面试" scheme="http://yangtao.site/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="ES6" scheme="http://yangtao.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>探一下 NodeList 和 HTMLCollection</title>
    <link href="http://yangtao.site/2019/12/03/html-nodelist/"/>
    <id>http://yangtao.site/2019/12/03/html-nodelist/</id>
    <published>2019-12-03T10:09:36.000Z</published>
    <updated>2019-12-03T10:13:32.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要区别是，NodeList 可以包含各种类型的节点，HTMLCollection 只能包含 HTML 元素节点。</p></blockquote><a id="more"></a><h2 id="NodeList-接口"><a href="#NodeList-接口" class="headerlink" title="NodeList 接口"></a>NodeList 接口</h2><p>NodeList 实例是一个类似数组的对象，它的成员是节点对象。通过以下方法可以得到 NodeList 实例。</p><ul><li>Node.childNodes</li><li>document.querySelectorAll() 等节点搜索方法</li></ul><p>NodeList 实例很像数组，可以使用 length 属性和 forEach 方法。但是，它不是数组，不能使用 pop 或 push 之类数组特有的方法。</p><p>如果 NodeList 实例要使用数组方法，可以将其转为真正的数组。</p><p>除了使用 forEach 方法遍历 NodeList 实例，还可以使用 for 循环。</p><ul><li>NodeList.prototype.length，length 属性返回 NodeList 实例包含的节点数量</li><li>NodeList.prototype.forEach()，遍历 NodeList 的所有成员</li><li>NodeList.prototype.item()，item 方法接受一个整数值作为参数，表示成员的位置，返回该位置上的成员。</li></ul><p>下面三个方法，都返回一个 ES6 的遍历器对象，<code>for...of</code> 可获取每一个成员信息：</p><ul><li>NodeList.prototype.keys()，返回键名的遍历器</li><li>NodeList.prototype.values()，返回键值的遍历器</li><li>NodeList.prototype.entries()，返回的遍历器</li></ul><h2 id="HTMLCollection-接口"><a href="#HTMLCollection-接口" class="headerlink" title="HTMLCollection 接口"></a>HTMLCollection 接口</h2><p>HTMLCollection 是一个节点对象的集合，只能包含元素节点（element），不能包含其他类型的节点。</p><p>它的返回值是一个类似数组的对象，但是与 NodeList 接口不同，HTMLCollection 没有 forEach 方法，只能使用 for 循环遍历。</p><p>返回 HTMLCollection 实例的，主要是一些 Document 对象的集合属性，比如 document.links、document.forms、document.images 等。</p><ul><li>HTMLCollection.prototype.length</li><li>HTMLCollection.prototype.item()</li><li>HTMLCollection.prototype.namedItem()，参数是一个字符串，表示 id 属性或 name 属性的值，返回对应的元素节点。如果没有对应的节点，则返回 null。</li></ul><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>共同点：</p><ul><li>类数组对象，有 length 属性</li><li>共同的方法：item，可以通过 item(index) 或者 item(id) 来访问返回结果中的元素</li><li>实时变动的（live），document 上的更改会反映到相关对象上（例外：document.querySelectorAll 返回的 NodeList 不是实时的）</li></ul><p>区别：</p><ul><li>NodeList 可以包含任何节点类型，HTMLCollection 只包含元素节点（elementNode），elementNode 就是 HTML 中的标签</li><li>HTMLCollection 比 NodeList 多一项方法：namedItem，可以通过传递 id 或 name 属性来获取节点信息</li></ul><p>参考资料：</p><ul><li><a href="http://wangdoc.com/javascript/dom/nodelist.html" target="_blank" rel="noopener">NodeList 接口，HTMLCollection 接口</a></li><li><a href="https://www.jianshu.com/p/f6ff5ebe45fd" target="_blank" rel="noopener">HTMLCollection vs. NodeList</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要区别是，NodeList 可以包含各种类型的节点，HTMLCollection 只能包含 HTML 元素节点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Html" scheme="http://yangtao.site/categories/Html/"/>
    
    
      <category term="Html" scheme="http://yangtao.site/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>将 Hexo 和 Vuepress 静态资源推送至 Ubuntu</title>
    <link href="http://yangtao.site/2019/11/27/ubuntu-aliyun/"/>
    <id>http://yangtao.site/2019/11/27/ubuntu-aliyun/</id>
    <published>2019-11-27T15:50:05.000Z</published>
    <updated>2019-11-27T15:51:26.920Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于已经开通的 Hexo 和 Vuepress 博客，都挂在 github 的免费服务器上，加载速度不堪忍睹，所以打算挂在阿里云的服务器上，过程可以用举步维艰来形容。</p></blockquote><a id="more"></a><h2 id="使用-ssh-远程登录"><a href="#使用-ssh-远程登录" class="headerlink" title="使用 ssh 远程登录"></a>使用 ssh 远程登录</h2><ul><li>Ubuntu 常用命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新源列表</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 SSH</span></span><br><span class="line">apt-get install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 SSH 服务是否启动</span></span><br><span class="line">ps -e | grep ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止、重启</span></span><br><span class="line">service ssh stop</span><br><span class="line">service ssh start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 ip</span></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>使用 ssh 登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@47.101.33.81</span><br></pre></td></tr></table></figure><p>由于之前我远程登录过 CentOS，所以换成 Ubuntu 之后，再次远程登录，就会出现如下无法连接信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~ ❯❯❯ ssh root@47.101.33.81</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!</span><br><span class="line">Someone could be eavesdropping on you right now (man-in-the-middle attack)!</span><br><span class="line">It is also possible that a host key has just been changed.</span><br><span class="line">The fingerprint <span class="keyword">for</span> the ECDSA key sent by the remote host is</span><br><span class="line">SHA256:neXCznmpgVyF/0YSiDxOjD/8A1+4ND2D9+fZjUozbzc.</span><br><span class="line">Please contact your system administrator.</span><br><span class="line">Add correct host key <span class="keyword">in</span> /Users/yangtao/.ssh/known_hosts to get rid of this message.</span><br><span class="line">Offending ECDSA key <span class="keyword">in</span> /Users/yangtao/.ssh/known_hosts:5</span><br><span class="line">ECDSA host key <span class="keyword">for</span> 47.101.33.81 has changed and you have requested strict checking.</span><br><span class="line">Host key verification failed.</span><br></pre></td></tr></table></figure><p>所以，根据提示，我就进入目录下，删除了之前保留的信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~ ❯❯❯ vim /Users/yangtao/.ssh/known_hosts</span><br></pre></td></tr></table></figure><p>然后，保存，再次登录，就会重新设置，也就远程登录成功。</p><h2 id="在-Ubuntu-18-04-上安装和配置-Nginx"><a href="#在-Ubuntu-18-04-上安装和配置-Nginx" class="headerlink" title="在 Ubuntu 18.04 上安装和配置 Nginx"></a>在 Ubuntu 18.04 上安装和配置 Nginx</h2><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>我习惯 fish，可以预装一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apt install fish</span><br><span class="line"></span><br><span class="line">root@istaotao:~<span class="comment"># fish</span></span><br><span class="line">Welcome to fish, the friendly interactive shell</span><br></pre></td></tr></table></figure><p>注：如果遇到权限问题，需要 <code>sudo</code>，如：<code>sudo apt install fish</code>。</p><p>Nginx 的软件包在 Ubuntu 默认软件仓库中可用。 安装非常简单，只需键入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install nginx</span><br></pre></td></tr></table></figure><p>检查 Nginx 服务的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>查看版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@istaotao ~<span class="comment"># nginx -v</span></span><br><span class="line">nginx version: nginx/1.14.0 (Ubuntu)</span><br></pre></td></tr></table></figure><p>然后访问公网 ip，或者域名，就可以看到欢迎界面，如果长时间没有响应，说明你的服务器应该没有开启 80 端口。</p><p>参考：<a href="https://segmentfault.com/q/1010000009437407" target="_blank" rel="noopener">阿里云 ubuntu nginx 无法访问，求解答</a></p><h3 id="使用-systemctl-管理-Nginx-服务"><a href="#使用-systemctl-管理-Nginx-服务" class="headerlink" title="使用 systemctl 管理 Nginx 服务"></a>使用 systemctl 管理 Nginx 服务</h3><p>您可以像任何其他 systemd 单位一样管理 Nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要停止Nginx服务，请运行：</span></span><br><span class="line">systemctl stop nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要再次启动，请键入：</span></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动Nginx服务：</span></span><br><span class="line">systemctl restart nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在进行一些配置更改后重新加载Nginx服务：</span></span><br><span class="line">systemctl reload nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你想禁用Nginx服务在启动时启动：</span></span><br><span class="line">systemctl <span class="built_in">disable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 并重新启用它：</span></span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Web服务器是否在运行</span></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><p>也可以使用 service 管理 Nginx 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止Nginx服务，请运行：</span></span><br><span class="line">service nginx stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要再次启动，请键入：</span></span><br><span class="line">service nginx start</span><br><span class="line"></span><br><span class="line"><span class="comment">#重新启动Nginx服务：</span></span><br><span class="line">service nginx restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#在进行一些配置更改后重新加载Nginx服务：</span></span><br><span class="line">service nginx reload</span><br></pre></td></tr></table></figure><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><p>获得应用程序配置文件的列表：<code>ufw app list</code>，查看状态：<code>ufw status</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@istaotao ~<span class="comment"># ufw app list</span></span><br><span class="line">Available applications:</span><br><span class="line">  Nginx Full</span><br><span class="line">  Nginx HTTP</span><br><span class="line">  Nginx HTTPS</span><br><span class="line">  OpenSSH</span><br></pre></td></tr></table></figure><h3 id="Nginx-文件和目录说明"><a href="#Nginx-文件和目录说明" class="headerlink" title="Nginx 文件和目录说明"></a>Nginx 文件和目录说明</h3><p>nginx 服务器配置文件：</p><ul><li><strong>/etc/nginx</strong></li></ul><p>Nginx 配置目录。所有的 Nginx 配置文件都驻留在这里。</p><ul><li><strong>/etc/nginx/nginx.conf</strong></li></ul><p>主要的 Nginx 配置文件。  这可以修改，以更改 Nginx 全局配置。</p><ul><li><strong>/etc/nginx/sites-available/</strong></li></ul><p>可存储每个站点服务器块的目录。  除非将 Nginx 链接到<code>sites-enabled了sites-enabled</code>目录，否则 Nginx 不会使用此目录中的配置文件。  通常，所有服务器块配置都在此目录中完成，然后通过链接到其他目录启用。</p><ul><li><strong>/etc/nginx/sites-enabled/</strong></li></ul><p>存储启用的每个站点服务器块的目录。  通常，这些是通过链接到 sites-available 目录中的配置文件创建的。</p><ul><li><strong>/etc/nginx/snippets</strong></li></ul><p>这个目录包含可以包含在 Nginx 配置其他地方的配置片段。  可重复配置的片段可以重构为片段。</p><p>nginx 服务器日志文件：</p><ul><li><strong>/var/log/nginx/access.log</strong></li></ul><p>除非 Nginx 配置为其他方式，否则每个对您的 Web 服务器的请求都会记录在此日志文件中。</p><ul><li><strong>/var/log/nginx/error.log</strong></li></ul><p>任何 Nginx 错误都会记录在这个日志中。</p><h3 id="虚拟站点的设置"><a href="#虚拟站点的设置" class="headerlink" title="虚拟站点的设置"></a>虚拟站点的设置</h3><p>Ubuntu 18.04 上的 Nginx 默认启用了一个服务器模块，该模块被配置为在<code>/var/www/html</code>目录下提供文档内容。</p><p>接下来，我们模拟一个虚拟网点。</p><p>创建<code>example.com</code>目录，使用<code>-p</code>标志创建任何必需的父目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /var/www/example.com/html</span><br></pre></td></tr></table></figure><p>使用\$USER 环境变量分配目录的所有权：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R <span class="variable">$USER</span>:<span class="variable">$USER</span> /var/www/example.com/html/</span><br></pre></td></tr></table></figure><p>修改目录的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod -R 755 /var/www/example.com/html/</span><br></pre></td></tr></table></figure><p>创建一个 index.html 页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/var/www/example.com/html/index.html</span><br></pre></td></tr></table></figure><p>如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Welcome to Example.com!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Success! The example.com server block is working!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在不直接修改默认配置文件的情况下，可以在<code>/etc/nginx/sites-available/</code>上创建一个新文件<code>example.com</code>，并将如下内容复制到<code>example.com</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        listen [::]:80;</span><br><span class="line"></span><br><span class="line">        root /var/www/example.com/html;</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name example.com www.example.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>操作方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available/</span><br><span class="line">touch example.com</span><br><span class="line">vim example.com</span><br></pre></td></tr></table></figure><p>常规复制完毕之后，按<code>:</code>之后，接着按<code>wq</code>，vim 就可以保存退出了。</p><p>创建一个软链接，连到默认启动<code>sites-enabled</code>目录来启用该文件，该目录是 Nginx 在启动过程中读取的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure><p>现在启用两个服务器模块并将其配置为基于<code>listen</code>和<code>server_name</code>指令响应请求：</p><p><strong>example.com</strong> ：将响应<code>example.com</code>和<code>www.example.com</code>请求。</p><p><strong>default</strong> ：将响应端口<code>80</code>上与其他两个块不匹配的任何请求。</p><p>为了避免添加额外的服务器名称可能导致的哈希桶内存问题，有必要调整<code>/etc/nginx/nginx.conf</code>文件中的单个值。</p><p>修改配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p>找到<code>server_names_hash_bucket_size 64</code>指令并删除 # 符号以取消注释该行：</p><p>接下来，测试以确保您的 Nginx 文件中没有语法错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -t</span><br><span class="line"></span><br><span class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</span><br></pre></td></tr></table></figure><p>重启 nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nginx</span><br></pre></td></tr></table></figure><p>然后，需要在本地 hosts 文件添加对应 host：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ip 换成自己的阿里云 ip</span><br><span class="line">47.101.33.81 www.example.com</span><br></pre></td></tr></table></figure><p>这样，不出意外的话，就可以通过 <code>http://example.com</code>来访问刚刚设置的内容，而访问<code>http://47.101.33.81</code>，依旧是默认的内容。</p><h2 id="hexo-部署到服务器上"><a href="#hexo-部署到服务器上" class="headerlink" title="hexo 部署到服务器上"></a>hexo 部署到服务器上</h2><p>整个流程就是本地将 *.md 渲染成静态文件，然后 Git 推送到服务器的 repository,服务器再通过 git-hooks 同步网站根目录。</p><p><img src="https://ae01.alicdn.com/kf/H1aadf5b0baac42aaa45b753358768293V.jpg" alt="hexo的架构"></p><h3 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h3><p>主要使用 <code>git hooks</code> 来实现自动化部署。以下步骤为其他博客完整内容，但是我是直接在 root 下操作的，所以关于权限等问题，是直接略过的，等后期熟悉了再加上。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>安装 git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>创建一个 git 用户，用来运行 git 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure><p>虽说现在的仓库只有我们自己在使用，新建一个 git 用户显得不是很有必要，但是为了安全起见，还是建议使用单独的 git 用户来专门运行 git 服务。</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>创建证书登录，把自己电脑的公钥，也就是 <code>~/.ssh/id_rsa.pub</code> 文件里的内容添加到服务器的 <code>/home/git/.ssh/authorized_keys</code> 文件中，添加公钥之后可以防止每次 push 都输入密码。</p><p>如果你之前没有生成过公钥，则可能就没有 id_rsa.pub 文件，具体的生成方法，可以<a href="https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener">Generating a new SSH key and adding it to the ssh-agent</a>。</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>初始化 Git 仓库，我是将其放在 <code>/var/repo/hexo.git</code> 目录下的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/repo</span><br><span class="line"><span class="built_in">cd</span> /var/repo</span><br><span class="line">sudo git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>使用 <code>--bare</code> 参数，Git 就会创建一个裸仓库，裸仓库没有工作区，我们不会在裸仓库上进行操作，它只为共享而存在。</p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>配置 git hooks，关于 hooks 的详情内容可以<a href="https://git-scm.com/book/zh/v2/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">自定义 Git - Git 钩子</a>。</p><p>我们这里要使用的是 <code>post-receive</code> 的 hook，这个 hook 会在整个 git 操作过程完结以后被运行。</p><p>在 <code>hexo.git/hooks</code> 目录下新建一个 <code>post-receive</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/repo/blog.git/hooks</span><br><span class="line">vim post-receive</span><br></pre></td></tr></table></figure><p>在 <code>post-receive</code> 文件中写入如下内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>注意，<code>/var/www/hexo</code> 要换成你自己的部署目录，一般可能都是 <code>/var/www/html</code>。上面那句 git 命令可以在我们每次 push 完之后，把部署目录更新到博客的最新生成状态。这样便可以完成达到自动部署的目的了。</p><p>不要忘记设置这个文件的可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><h4 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h4><p>改变 hexo.git 目录的拥有者为 git 用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R git:git blog.git</span><br></pre></td></tr></table></figure><h4 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h4><p>禁用 git 用户的 shell 登录权限。</p><p>出于安全考虑，我们要让 git 用户不能通过 shell 登录。可以编辑 <code>/etc/passwd</code> 来实现，在 <code>/etc/passwd</code> 中找到类似下面的一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure><p>将其改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure><p>这样 git 用户可以通过 ssh 正常使用 git，但是无法登录 sehll。</p><h4 id="第八步"><a href="#第八步" class="headerlink" title="第八步"></a>第八步</h4><p>修改 nginx 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/default</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改默认目录为自己的目录</span></span><br><span class="line">root /var/www/hexo/;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line">Esc</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure><p>至此，服务器端的配置就完成了。</p><h3 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h3><p>修改 Hexo 博客站点配置文件 _config.yml, 如下修改:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">root@47.101.33.81:/var/repo/hexo.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>repo 格式：用户名@域名或 IP 地址:/var/repo/hexo.git，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># root 域名</span><br><span class="line">root@istaotao.com:/var/repo/hexo.git</span><br><span class="line"></span><br><span class="line"># root ip</span><br><span class="line">root@47.101.33.81:/var/repo/hexo.git</span><br><span class="line"></span><br><span class="line"># git 域名</span><br><span class="line">git@istaotao.com:/var/repo/hexo.git</span><br></pre></td></tr></table></figure><p>然后就是 hexo 的常规操作了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清楚缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建并部署</span></span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>可以多部署几次，然后去 <code>/var/www/hexo</code> 看是否已经有对应内容，如果推送完之后，提示已无更新内容可提交，可以改写东西，重新构建部署等步骤，多试几次。</p><p>到这里，基本完成 Hexo 推送到 ubuntu 的任务, 通过服务器 IP 或者域名应该就可以看到博客的内容了。</p><h2 id="vuepress-部署到服务器上"><a href="#vuepress-部署到服务器上" class="headerlink" title="vuepress 部署到服务器上"></a>vuepress 部署到服务器上</h2><p>有了部署 Hexo 的经验，再部署 vuepress，就简单多了。</p><p>我的想法是：hexo 做首页，vuepress 做子页内容，比如：<code>http:yangtao.site/vuepress</code>。所以，建立 git hooks 就应该可以了。</p><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>第一步：修改 nginx 配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/sites-enabled/default</span><br></pre></td></tr></table></figure><p>找到 <code>location / {</code>，然后在其后面，输入一段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 找到如下</span><br><span class="line">location / &#123;</span><br><span class="line">    # First attempt to serve request as file, then</span><br><span class="line">    # as directory, then fall back to displaying a 404.</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 输入如下</span><br><span class="line">location /vuepress &#123;</span><br><span class="line">    root /var/www/;</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>var/www</code>下新建 vuepress 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/www/</span><br><span class="line">mkdir vuepress</span><br></pre></td></tr></table></figure><p>这样，对用要访问的目录已经创建好了。</p><p>注：以上操作都是在 root 权限下操作的，如果是其他用户，记得该加 sudo 的加 sudo，该修改文件权限就修改。</p><p>第二步：建立 git hooks</p><p>如同建立 <code>hexo.git</code> 一样：</p><p>初始化：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/repo</span><br><span class="line">git init --bare vuepress.git</span><br></pre></td></tr></table></figure><p>建立 <code>post-receive</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vuepress.git/hooks/</span><br><span class="line">touch post-receive</span><br></pre></td></tr></table></figure><p>并写入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">git --work-tree=/var/www/vuepress --git-dir=/var/repo/vuepress.git checkout -f</span><br></pre></td></tr></table></figure><p>设置这个文件的可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br></pre></td></tr></table></figure><p>好了，服务端的配置差不多就这些。</p><h3 id="本地配置-1"><a href="#本地配置-1" class="headerlink" title="本地配置"></a>本地配置</h3><p>具体的可以参考<a href="https://vuepress.vuejs.org/zh/guide/deploy.html#github-pages" target="_blank" rel="noopener">官方部署方法</a>。</p><p>第一步：根目录下创建执行脚本<code>deploy.sh</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保脚本抛出遇到的错误</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入生成的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> docs/.vuepress/dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是发布到自定义域名</span></span><br><span class="line"><span class="comment"># echo 'www.example.com' &gt; CNAME</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">'deploy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span><br><span class="line"><span class="comment"># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span><br><span class="line"></span><br><span class="line">git push -f root@47.101.33.81:/var/repo/vuepress.git master</span><br><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>第二步：修改<code>config.js</code>的基准 url</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  base: <span class="string">"/vuepress/"</span> <span class="comment">// 基准 URL</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样，访问 <code>http://47.101.33.81/vuepress</code>，就可以正常访问,这里非常关键，如果是根目录，直接去掉 vuepress，重新构建部署。</p><p>第三步：部署线上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始自动构建、部署...</span></span><br><span class="line"><span class="comment"># 输入服务端密码...</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># success</span></span><br></pre></td></tr></table></figure><p>注意：可以多部署几次，访问资源如有问题，估计是第二步出问题了，可以排查哪里出错了。</p><p>好了，截止到现在，访问<code>http://47.101.33.81</code>，访问的是 hexo 的博客资源，而访问<code>http://47.101.33.81/vuepress</code>，访问的是 vuepress 的博客资源。</p><p>主要是 nginx 的配置文件，以及 git hooks 的建立，还有本地部署文件的建设，一个简单的个人网站算是颤颤巍巍地站起来了。</p><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><ul><li><a href="https://www.imooc.com/learn/170" target="_blank" rel="noopener">在 Ubuntu Server 下搭建 LAMP 环境</a> - 让你理解 LAMP 环境各个组件之间的关系与作用，并能掌握从无到有的在 Ubuntu Server 操作系统下搭建 LAMP 环境、配置虚拟主机、数据库远程维护等常见的服务器搭建维护技能</li><li><a href="https://www.imooc.com/learn/1049" target="_blank" rel="noopener">优雅玩转 Vim</a> - 本课程系统提炼 vim 的精华、通过抛砖引玉把它展现到你的面前，更能让你的工作如虎添翼、事半功倍。</li><li><a href="https://www.imooc.com/learn/1129" target="_blank" rel="noopener">玩转 Vim 从放弃到爱不释手</a> - 本课程从 vim 最基础的操作和概念开始讲起，带领大家学会使用和配置 vim，安装强大的 vim 插件，真正掌握编辑器之神 vim 的使用。</li><li><a href="https://www.imooc.com/learn/1004" target="_blank" rel="noopener">项目上线流程</a> - 主要讲解了一个项目想要发布到公网的流程，包括服务器的购买、以及域名的购买，以及需要注意的事项。</li><li><a href="https://www.imooc.com/learn/175" target="_blank" rel="noopener">Linux 达人养成计划 I</a> - 课程以 CentOS 操作系统为例，为你带来 Linux 的简介、系统安装和常用命令等内容。让您在轻松的氛围中感受到 Linux 之美。</li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://www.jianshu.com/p/849343f679aa" target="_blank" rel="noopener">Nginx 使用及配置</a></li><li><a href="https://www.jianshu.com/p/ac27fdb0b86a" target="_blank" rel="noopener">在 Ubuntu 18.04 上安装和配置 Nginx</a></li><li><a href="https://blog.csdn.net/fengfeng0328/article/details/82828224" target="_blank" rel="noopener">Ubuntu18.04 搭建 nginx 服务器</a></li><li><a href="https://www.pingfangushi.com/posts/35448/" target="_blank" rel="noopener">阿里云 Ubuntu 16.04 系统下安装 Nginx</a></li><li><a href="https://www.cnblogs.com/CgenJ/archive/2011/07/28/2119454.html" target="_blank" rel="noopener">Linux 系统下如何查看及修改文件读写权限</a></li><li><a href="https://www.cnblogs.com/chenlogin/p/6245958.html" target="_blank" rel="noopener">vim 基本操作</a></li><li><a href="https://segmentfault.com/q/1010000009437407" target="_blank" rel="noopener">阿里云 ubuntu nginx 无法访问，求解答</a></li><li><a href="https://segmentfault.com/a/1190000010680022" target="_blank" rel="noopener">Hexo 个人博客部署到 CentOS 个人服务器</a></li><li><a href="https://www.jianshu.com/p/e1ccd49b4e5d" target="_blank" rel="noopener">Hexo 部署在阿里云服务器上</a></li><li><a href="https://www.jianshu.com/p/e03e363713f9" target="_blank" rel="noopener">通过 Git 将 Hexo 博客部署到服务器</a></li><li><a href="http://www.swiftyper.com/2016/04/17/deploy-hexo-with-git-hook/" target="_blank" rel="noopener">使用 Git Hook 自动部署 Hexo 到个人 VPS</a></li><li><a href="https://yq.aliyun.com/articles/603815" target="_blank" rel="noopener">超详细动手搭建一个 Vuepress 站点及开启 PWA 与自动部署</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于已经开通的 Hexo 和 Vuepress 博客，都挂在 github 的免费服务器上，加载速度不堪忍睹，所以打算挂在阿里云的服务器上，过程可以用举步维艰来形容。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="服务端" scheme="http://yangtao.site/categories/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
    
      <category term="Ubuntu" scheme="http://yangtao.site/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>学习冴羽的 JS 深入系列·下篇</title>
    <link href="http://yangtao.site/2019/11/27/js-series-3/"/>
    <id>http://yangtao.site/2019/11/27/js-series-3/</id>
    <published>2019-11-27T13:05:40.000Z</published>
    <updated>2019-11-27T13:08:12.537Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要是讲述了创建对象、继承的多种方式及其各自的优缺点</p></blockquote><a id="more"></a><h2 id="创建对象的多种方式以及优缺点"><a href="#创建对象的多种方式以及优缺点" class="headerlink" title="创建对象的多种方式以及优缺点"></a>创建对象的多种方式以及优缺点</h2><p>这篇文章更像是笔记，因为《JavaScript 高级程序设计》写得真是太好了！</p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">"kevin"</span>);</span><br></pre></td></tr></table></figure><p>缺点：对象无法识别，因为所有的实例都指向一个原型</p><h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br></pre></td></tr></table></figure><p>优点：实例可以识别为一个特定的类型</p><p>缺点：每次创建实例时，每个方法都要被创建一次</p><ul><li>构造函数模式优化</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.getName = getName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br></pre></td></tr></table></figure><p>优点：解决了每个方法都要被重新创建的问题</p><p>缺点：全局命名变量太多</p><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"keivn"</span>;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：方法不会重新创建</p><p>缺点：1. 所有的属性和方法都共享； 2. 不能初始化参数；</p><ul><li>原型模式优化 1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  name: <span class="string">"kevin"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：封装性好了一点</p><p>缺点：重写了原型，丢失了 constructor 属性</p><ul><li>原型模式优化 2</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  name: "kevin",</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：实例可以通过 constructor 属性找到所属构造函数</p><p>缺点：原型模式该有的缺点还是有</p><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><p>构造函数模式与原型模式双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span>: Person,</span><br><span class="line">  getName: function() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>优点：该共享的共享，该私有的私有，使用最广泛的方式</p><p>缺点：有的人就是希望全部都写在一起，即更好的封装性</p><ul><li>动态原型模式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>注意：使用动态原型模式时，不能用对象字面量重写原型</p><p>解释下为什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: Person,</span><br><span class="line">      getName: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"daisy"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错 并没有该方法</span></span><br><span class="line">person1.getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释掉上面的代码，这句是可以执行的。</span></span><br><span class="line">person2.getName();</span><br></pre></td></tr></table></figure><p>为了解释这个问题，假设开始执行<code>var person1 = new Person(&#39;kevin&#39;)</code>。</p><p>如果对 new 和 apply 的底层执行过程不是很熟悉，可以阅读底部相关链接中的文章。</p><p>我们回顾下 new 的实现步骤：</p><p>首先新建一个对象，然后将对象的原型指向 <code>Person.prototype</code>，然后 <code>Person.apply(obj)</code>返回这个对象。</p><p>注意这个时候，回顾下 apply 的实现步骤，会执行 <code>obj.Person</code> 方法，这个时候就会执行 if 语句里的内容，注意构造函数的 prototype 属性指向了实例的原型，使用字面量方式直接覆盖 <code>Person.prototype</code>，并不会更改实例的原型的值，person1 依然是指向了以前的原型，而不是 <code>Person.prototype</code>。而之前的原型是没有 getName 方法的，所以就报错了！</p><p>如果你就是想用字面量方式写代码，可以尝试下这种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.getName != <span class="string">"function"</span>) &#123;</span><br><span class="line">    Person.prototype = &#123;</span><br><span class="line">      <span class="keyword">constructor</span>: Person,</span><br><span class="line">      getName: function() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">"daisy"</span>);</span><br><span class="line"></span><br><span class="line">person1.getName(); <span class="comment">// kevin</span></span><br><span class="line">person2.getName(); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"kevin"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> Person); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>寄生构造函数模式，我个人认为应该这样读：寄生-构造函数-模式，也就是说寄生在构造函数的一种方法。</p><p>也就是说打着构造函数的幌子挂羊头卖狗肉，你看创建的实例使用 instanceof 都无法指向构造函数！</p><p>这样方法可以在特殊情况下使用。比如我们想创建一个具有额外方法的特殊数组，但是又不想直接修改 Array 构造函数，我们可以这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpecialArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> values = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">    values.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  values.toPipedString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join(<span class="string">"|"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> values;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> SpecialArray(<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>);</span><br><span class="line"><span class="keyword">var</span> colors2 = SpecialArray(<span class="string">"red2"</span>, <span class="string">"blue2"</span>, <span class="string">"green2"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors);</span><br><span class="line"><span class="built_in">console</span>.log(colors.toPipedString()); <span class="comment">// red|blue|green</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(colors2);</span><br><span class="line"><span class="built_in">console</span>.log(colors2.toPipedString()); <span class="comment">// red2|blue2|green2</span></span><br></pre></td></tr></table></figure><p>你会发现，其实所谓的寄生构造函数模式就是比工厂模式在创建对象的时候，多使用了一个 new，实际上两者的结果是一样的。</p><p>但是作者可能是希望能像使用普通 Array 一样使用 SpecialArray，虽然把 SpecialArray 当成函数也一样能用，但是这并不是作者的本意，也变得不优雅。</p><p>在可以使用其他模式的情况下，不要使用这种模式。</p><p>但是值得一提的是，上面例子中的循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">  values.push(<span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以替换成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">values.push.apply(values, <span class="built_in">arguments</span>);</span><br></pre></td></tr></table></figure><h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = person(<span class="string">"kevin"</span>);</span><br><span class="line"></span><br><span class="line">person1.sayName(); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line">person1.name = <span class="string">"daisy"</span>;</span><br><span class="line"></span><br><span class="line">person1.sayName(); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// daisy</span></span><br></pre></td></tr></table></figure><p>所谓稳妥对象，指的是没有公共属性，而且其方法也不引用 this 的对象。</p><p>与寄生构造函数模式有两点不同：</p><ul><li>新创建的实例方法不引用 this</li><li>不使用 new 操作符调用构造函数</li><li>稳妥对象最适合在一些安全的环境中。</li></ul><p>稳妥构造函数模式也跟工厂模式一样，无法识别对象所属类型。</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/15" target="_blank" rel="noopener">JavaScript 深入之创建对象的多种方式以及优缺点</a></p><h2 id="继承的多种方式和优缺点"><a href="#继承的多种方式和优缺点" class="headerlink" title="继承的多种方式和优缺点"></a>继承的多种方式和优缺点</h2><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">'Yang'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myself = <span class="keyword">new</span> Child();</span><br><span class="line">myself.getName();  <span class="comment">// 'Yang'</span></span><br></pre></td></tr></table></figure><p>问题：</p><ul><li>引用类型的属性被所有实例共享</li><li>在创建 Child 的实例时，不能向Parent传参</li></ul><h3 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myself1 = <span class="keyword">new</span> Child(<span class="string">'Yang'</span>);</span><br><span class="line"><span class="keyword">var</span> myself2 = <span class="keyword">new</span> Child(<span class="string">'Wang'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(myself1.name)  <span class="comment">// 'Yang'</span></span><br><span class="line"><span class="built_in">console</span>.log(myself2.name)  <span class="comment">// 'Wang'</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>避免了引用类型的属性被所有实例共享</li><li>可以在 Child 中向 Parent 传参</li></ul><p>缺点：</p><ul><li>方法都在构造函数中定义，每次创建实例都会创建一遍方法</li></ul><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>原型链继承和经典继承双剑合璧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'yang'</span>, <span class="number">27</span>);</span><br><span class="line">child1.colors.push(<span class="string">'white'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name);  <span class="comment">// "yang"</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age);  <span class="comment">// 27</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors);  <span class="comment">// ["red", "blue", "green", "white"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'ming'</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name);  <span class="comment">// "ming"</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age);  <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors);  <span class="comment">// ["red", "blue", "green"]</span></span><br><span class="line">child2.getName();  <span class="comment">// "ming"</span></span><br></pre></td></tr></table></figure><p>优点：融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式。</p><h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><p>就是 ES5 <code>[Object.create](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create)</code> 的模拟实现，将传入的对象作为创建的对象的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：包含引用类型的属性值始终都会共享相应的值，这点跟原型链继承一样。</p><h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = <span class="built_in">Object</span>.create(o);</span><br><span class="line">  clone.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><p>组合继承最大的缺点是会调用两次父构造函数。</p><ul><li>设置子类型实例的原型的时候：<code>Child.prototype = new Parent();</code></li><li>创建子类型实例的时候：<code>Parent.call(this, name);</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">proto</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototype</span>(<span class="params">child, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = object(parent.prototype);</span><br><span class="line">  child.prototype.constructor = child;</span><br><span class="line">  child.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">prototype(Child, Parent);</span><br></pre></td></tr></table></figure><p>引用《JavaScript高级程序设计》中对寄生组合式继承的夸赞就是：</p><blockquote><p>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p></blockquote><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/16" target="_blank" rel="noopener">JavaScript深入之继承的多种方式和优缺点</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要是讲述了创建对象、继承的多种方式及其各自的优缺点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>学习冴羽的 JS 深入系列·中篇</title>
    <link href="http://yangtao.site/2019/11/27/js-series-2/"/>
    <id>http://yangtao.site/2019/11/27/js-series-2/</id>
    <published>2019-11-27T13:03:24.000Z</published>
    <updated>2019-12-02T14:11:48.889Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要实现 call、apply、new、bind 等实现思路</p></blockquote><a id="more"></a><h2 id="call-和-apply-的模拟实现"><a href="#call-和-apply-的模拟实现" class="headerlink" title="call 和 apply 的模拟实现"></a>call 和 apply 的模拟实现</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p><code>call()</code>在使用一个指定的 this 值和若干个指定的参数值的前提下，调用某个函数或方法。该方法的语法和作用与 apply() 方法类似，只有一个区别，就是 call() 方法接受的是一个参数列表，而 apply() 方法接受的是一个包含多个参数的数组。</p><p>使用 call 方法调用函数并且指定上下文的 ‘this’</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">foo.call(obj); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>使用 call 方法调用父构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tao</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> tao = <span class="keyword">new</span> Tao(<span class="string">"yangtao"</span>, <span class="number">27</span>, <span class="string">"Teacher"</span>);</span><br></pre></td></tr></table></figure><p>所以我们模拟的步骤可以分为：</p><ul><li>将函数设为对象的属性</li><li>执行该函数</li><li>删除该函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类似于：</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo.bar(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步</span></span><br><span class="line">foo.fn = bar;</span><br><span class="line"><span class="comment">// 第二步</span></span><br><span class="line">foo.fn();</span><br><span class="line"><span class="comment">// 第三步</span></span><br><span class="line"><span class="keyword">delete</span> foo.fn;</span><br></pre></td></tr></table></figure><p>第一版：绑定 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  context.fn();</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.mycall(foo); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下所示</span></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">foo.bar();</span><br></pre></td></tr></table></figure><p>第二版：给定参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context, name, age</span>) </span>&#123;</span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  context.fn();</span><br><span class="line">  <span class="keyword">var</span> args = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第三版：传参为 null 和返回结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="comment">//获取调用call的函数，用this可以获取</span></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = []; <span class="comment">// ["arguments[1]", "arguments[2]"]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把传给call的参数传递给了context.fn函数</span></span><br><span class="line">  <span class="comment">// context.fn(args.join(','));</span></span><br><span class="line">  <span class="comment">// context.fn(...args)</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第四版：考虑 context，以及 context.fn 的可能性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mycall = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这一步如果不强制是 object 类型，可以省略</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> context != <span class="string">"object"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Arguments error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [],</span><br><span class="line">    reslut;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">"fn"</span> <span class="keyword">in</span> context &amp;&amp; context.hasOwnProperty(<span class="string">"fn"</span>)) &#123;</span><br><span class="line">    <span class="keyword">var</span> fn = context.fn;</span><br><span class="line">    <span class="keyword">var</span> fnFlag = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>, l = <span class="built_in">arguments</span>.length; i &lt; l; i++) &#123;</span><br><span class="line">    args.push(<span class="string">"arguments["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fnFlag) &#123;</span><br><span class="line">    context.fn = fn;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p><code>apply()</code>同<code>call()</code>，只不过将多个参数值，以数组的形式传入而已。</p><p>用 apply 将数组添加到另一个数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.push.apply(arr, arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ["a", "b", 1, 2]</span></span><br></pre></td></tr></table></figure><p>使用 apply 和内置函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, nums); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, nums); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 写法：</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="built_in">Math</span>.max(...nums); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">var</span> min = <span class="built_in">Math</span>.min(...nums); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myapply = <span class="function"><span class="keyword">function</span>(<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">var</span> reslut;</span><br><span class="line"></span><br><span class="line">  context.fn = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    reslut = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">      args.push(<span class="string">"arr["</span> + i + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"context.fn("</span> + args + <span class="string">")"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> reslut;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/11" target="_blank" rel="noopener">JavaScript 深入之 call 和 apply 的模拟实现</a></p><h2 id="bind-的模拟实现"><a href="#bind-的模拟实现" class="headerlink" title="bind 的模拟实现"></a>bind 的模拟实现</h2><blockquote><p><code>bind()</code>方法会创建一个新函数。当这个新函数被调用，bind()第一个参数将作为它运行时的 this，之后的一系列参数将会在传递的实参前传入，作为它的参数。 — 来自于 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">MDN</a></p></blockquote><p>创建绑定函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">2</span>,</span><br><span class="line">  getValue: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getV = obj.getValue;</span><br><span class="line">getV(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> getV2 = obj.getValue.bind(obj);</span><br><span class="line">getV2(); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>配合 setTimeout</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// setTimeout(this.msg, 1000);  // 1</span></span><br><span class="line">  setTimeout(<span class="keyword">this</span>.msg.bind(<span class="keyword">this</span>), <span class="number">1000</span>); <span class="comment">//2</span></span><br><span class="line">&#125;;</span><br><span class="line">Fn.prototype.msg = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"value: "</span>, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> myFn = <span class="keyword">new</span> Fn();</span><br><span class="line">myFn.getValue();</span><br></pre></td></tr></table></figure><p>由此我们可以首先得出 bind 函数的两个特点：</p><ul><li>返回一个函数</li><li>可以传入参数</li></ul><p>第一版：返回函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = foo.mybind(obj);</span><br><span class="line">bindFoo(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>第二版：传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 获取除了第一个参数的剩余参数</span></span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里获取的是返回函数调用时传入的参数</span></span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, args.concat(bindArgs));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFoo = foo.mybind(obj, <span class="string">"yang"</span>);</span><br><span class="line">bindFoo(<span class="number">27</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// yang</span></span><br><span class="line"><span class="comment">// 27</span></span><br></pre></td></tr></table></figure><p>第三版：构造函数效果</p><p>bind 还有一个特点，就是:一个绑定函数也能使用 new 操作符创建对象：这种行为就像把原函数当成构造器。提供的 this 值被忽略，同时调用时的参数被提供给模拟函数。</p><p>也就是说，当 bind 返回的函数作为构造函数的时候，bind 时指定的 this 值会失效，但传入的参数依然生效。</p><p>所以我们可以通过修改返回的函数的原型来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="comment">// 当作为构造函数时，this 指向实例，此时结果为 true，将绑定函数的 this 指向该实例，可以让实例获得来自绑定函数的值</span></span><br><span class="line">    <span class="comment">// 以上面的是 demo 为例，如果改成 `this instanceof fBound ? null : context`，实例只是一个空对象，将 null 改成 this ，实例会具有 habit 属性</span></span><br><span class="line">    <span class="comment">// 当作为普通函数时，this 指向 window，此时结果为 false，将绑定函数的 this 指向 context</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(</span><br><span class="line">      <span class="keyword">this</span> <span class="keyword">instanceof</span> fBound ? <span class="keyword">this</span> : context,</span><br><span class="line">      args.concat(bindArgs)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 修改返回函数的 prototype 为绑定函数的 prototype，实例就可以继承绑定函数的原型中的值</span></span><br><span class="line">  fBound.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">  <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.mybind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bindArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> self.apply(</span><br><span class="line">      <span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP ? <span class="keyword">this</span> : context,</span><br><span class="line">      args.concat(bindArgs)</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">  fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">  <span class="keyword">return</span> fBound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那别忘了做个兼容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/12" target="_blank" rel="noopener">JavaScript 深入之 bind 的模拟实现</a></p><h2 id="new-的模拟实现"><a href="#new-的模拟实现" class="headerlink" title="new 的模拟实现"></a>new 的模拟实现</h2><p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.habit = <span class="string">"Games"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I am "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">"Yang"</span>, <span class="string">"27"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.name); <span class="comment">// Yang</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.habit); <span class="comment">// Games</span></span><br><span class="line"></span><br><span class="line">person1.getName(); <span class="comment">// I am Yang</span></span><br></pre></td></tr></table></figure><p>由上可知，实例 person1 可以：</p><ul><li>访问到 Person 构造函数里的属性</li><li>访问到 Person.prototype 中的属性</li></ul><h3 id="初步实现"><a href="#初步实现" class="headerlink" title="初步实现"></a>初步实现</h3><p>分析：</p><p>因为 new 的结果是一个新对象，所以在模拟实现的时候，我们也要建立一个新对象，这个新对象会具有构造函数里的属性。</p><p>实例的 <code>__proto__</code> 属性会指向构造函数的 <code>prototype</code>，也正是因为建立起这样的关系，实例可以访问原型上的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用new Object() 的方式新建了一个对象 obj</span></span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取出第一个参数，就是我们要传入的构造函数</span></span><br><span class="line">  <span class="comment">// 此外因为 shift 会修改原数组，所以 arguments 会被去除第一个参数</span></span><br><span class="line">  <span class="keyword">var</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 obj 的原型指向构造函数，这样 obj 就可以访问到构造函数原型中的属性</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用 apply，改变构造函数 this 的指向到新建的对象，这样 obj 就可以访问到构造函数中的属性</span></span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回 obj</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值效果实现"><a href="#返回值效果实现" class="headerlink" title="返回值效果实现"></a>返回值效果实现</h3><p>需要判断返回的值是不是一个对象，如果是一个对象，我们就返回这个对象，如果没有，我们该返回什么就返回什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  <span class="keyword">var</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ret = Constructor.apply(obj, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">"object"</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/13" target="_blank" rel="noopener">JavaScript 深入之 new 的模拟实现</a></p><h2 id="类数组对象与-arguments"><a href="#类数组对象与-arguments" class="headerlink" title="类数组对象与 arguments"></a>类数组对象与 arguments</h2><p>类数组对象从读写、获取长度、遍历三个方面看，和数组貌似是一样的，但是无法直接使用数组的方法，需要借助 call 或 apply：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> likeArr = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">"a"</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">"b"</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">"c"</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(likeArr, <span class="number">0</span>); <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.join.call(likeArr, <span class="string">"&amp;"</span>); <span class="comment">// "a&amp;b&amp;c"</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.map.call(likeArr, item =&gt; item.toUpperCase()); <span class="comment">// ["A", "B", "C"]</span></span><br></pre></td></tr></table></figure><h3 id="类数组转数组"><a href="#类数组转数组" class="headerlink" title="类数组转数组"></a>类数组转数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(likeArr);</span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="built_in">Array</span>.from(likeArr);</span><br><span class="line"><span class="comment">// apply</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.concat.apply([], likeArr);</span><br><span class="line"><span class="comment">// splice，会改变 linkeArr</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.splice.call(likeArr, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h3><p><code>Arguments</code> 对象只定义在函数体中，包括了函数的参数和其他属性。在函数体中，arguments 指代该函数的 Arguments 对象。</p><p>Arguments 对象的 length 属性，表示实参的长度。</p><p>Arguments 对象的 callee 属性，通过它可以调用函数自身。</p><p>将参数从一个函数传递到另一个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 apply 将 foo 的参数传递给 bar</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  bar.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>使用 ES6 的<code>...</code>运算符，我们可以轻松转成数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">...arguments</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>arguments 的应用其实很多，如果要总结这些场景的话，暂时能想到的包括：</p><ul><li>参数不定长</li><li>函数柯里化</li><li>递归调用</li><li>函数重载</li></ul><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/14" target="_blank" rel="noopener">JavaScript 深入之类数组对象与 arguments</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要实现 call、apply、new、bind 等实现思路&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>学习冴羽的 JS 深入系列·上篇</title>
    <link href="http://yangtao.site/2019/11/27/js-series-1/"/>
    <id>http://yangtao.site/2019/11/27/js-series-1/</id>
    <published>2019-11-27T12:59:31.000Z</published>
    <updated>2019-11-27T13:16:02.765Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>主要讲述什么是原型，什么是原型链，以及分别总结执行上下文的三个重要属性：变量对象、作用域链、this，还有闭包等难以理解的知识点。</p></blockquote><a id="more"></a><h2 id="从原型到原型链"><a href="#从原型到原型链" class="headerlink" title="从原型到原型链"></a>从原型到原型链</h2><h3 id="图示总结"><a href="#图示总结" class="headerlink" title="图示总结"></a>图示总结</h3><p><code>prototype</code>：每一个函数都有一个<code>prototype</code>属性，该属性指向了一个对象，此对象为调用该函数而创建的实例的原型</p><p><img src="https://ae01.alicdn.com/kf/Hacfcf286c7a7419db3e4c0932fb535923.png" alt="构造函数和实例原型的关系图"></p><p><code>__proto__</code>：每一个对象（除 null）都具有一个属性：<code>__proto__</code>，这个属性指向该对象的原型</p><p><img src="https://ae01.alicdn.com/kf/H0167f64ea5a14d00977d7347f3771ce7T.png" alt="实例与实例原型的关系图"></p><p><code>constructor</code>：每个原型都有一个<code>constructor</code>属性指向关联的构造函数</p><p><img src="https://ae01.alicdn.com/kf/Hb2d428716f6341b58ac36eefd3ab7398b.png" alt="constructor"></p><p><code>Object</code>：原型对象是通过 <code>Object</code> 构造函数生成的，最后<code>Object.prototype.__proto__ = null</code></p><p><img src="https://ae01.alicdn.com/kf/H162bf41c88784952a445c19c5ce3159e5.png" alt="原型链示意图"></p><p>原型链：由相互关联的原型(<strong>proto</strong>)组成的链状结构就是原型链，即图中蓝色的这条线</p><p><img src="https://ae01.alicdn.com/kf/H46dd0d5cd87243f4beb2d4c3e974a1e5K.png" alt="原型链"></p><h3 id="代码总结"><a href="#代码总结" class="headerlink" title="代码总结"></a>代码总结</h3><p>每个函数都有一个 prototype 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"Jake"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.name; <span class="comment">// 'Jake'</span></span><br><span class="line">person2.name; <span class="comment">// 'Jake'</span></span><br></pre></td></tr></table></figure><p>每一个 JavaScript 对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p><p>构造函数的 prototype 属性，指向了调用该构造函数而创建的实例的原型 person.<strong>proto</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">person.__proto__ === Person.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>每个原型都有一个 constructor 属性指向关联的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.constructor === Person; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>原型对象就是通过 Object 构造函数生成的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Object.prototype.<strong>proto</strong> 的值为 null，即 Object.prototype 没有原型，终止查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__; <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>原文地址：<a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript 深入之从原型到原型链</a></p><h2 id="词法作用域和动态作用域"><a href="#词法作用域和动态作用域" class="headerlink" title="词法作用域和动态作用域"></a>词法作用域和动态作用域</h2><p>javascript 采用的是<code>词法作用域(lexical scoping)</code>，函数的作用域是在函数定义的时候就决定了，而不是调用的时候才决定</p><ul><li>词法作用域，即静态作用域，函数的作用域在函数定义的时候就决定了</li><li>动态作用域，函数的作用域是在函数调用的时候才决定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f();</span><br><span class="line">&#125;</span><br><span class="line">checkscope(); <span class="comment">// "local scope"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br><span class="line">checkscope()(); <span class="comment">// "local scope"</span></span><br></pre></td></tr></table></figure><p>因为 JavaScript 采用的是词法作用域，函数的作用域基于函数创建的位置。</p><p>而引用《JavaScript 权威指南》的回答就是：</p><p>JavaScript 函数的执行用到了作用域链，这个作用域链是在函数定义的时候创建的。嵌套的函数 f() 定义在这个作用域链里，其中的变量 scope 一定是局部变量，不管何时何地执行函数 f()，这种绑定在执行 f() 时依然有效。</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/3" target="_blank" rel="noopener">JavaScript 深入之词法作用域和动态作用域</a></p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>JavaScript 的可执行代码(executable code)的类型有哪些：</p><ul><li>全局代码</li><li>函数代码</li><li>eval 代码</li></ul><p>函数那么多，如何管理创建的那么多执行上下文呢？</p><p>所以 JavaScript 引擎创建了执行上下文栈（<code>Execution context stack，ECS</code>）来管理执行上下文。</p><p>当执行一个函数的时候，就会创建一个<code>执行上下文(execution context)</code>，并且压入<code>执行上下文栈(Execution context stack, ESC)</code></p><p>当函数执行完毕的时候，会将函数的<code>执行上下文栈</code>中弹出。</p><p>其实，这里就会联想到 <code>push pop 栈堆</code>(后进先出-LIFO)。</p><p>模拟执行上下文栈：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行上下文栈是一个数组 ECStack，整个应用程序结束的时候，才会被清空</span></span><br><span class="line">ECStack = [</span><br><span class="line">  <span class="comment">// 程序结束之前， ECStack 最底部永远有个 globalContext</span></span><br><span class="line">  globalContext <span class="comment">// 全局执行上下文</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>运行如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"fun3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fun3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fun2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1();</span><br></pre></td></tr></table></figure><p>伪代码模拟执行：(根据 push pop 原理，后进先出)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ECStack.push(<span class="xml"><span class="tag">&lt;<span class="name">fun1</span>&gt;</span> functionContext);  // 压入fun1上下文，发现了 fun2 被调用</span></span><br><span class="line">ECStack.push(&lt;fun2&gt; functionContext);  // 继续压入fun2上下文，发现了 fun3 被调用</span><br><span class="line">ECStack.push(&lt;fun3&gt; functionContext);  // 继续压入fun3上下文，并执行 fun3</span><br><span class="line">ECStack.pop();  // fun3 执行结束，并弹出</span><br><span class="line">ECStack.pop();  // fun2 执行结束，并弹出</span><br><span class="line">ECStack.pop();  // fun1 执行结束，并弹出</span><br><span class="line">// javascript接着执行下面的代码，但是ECStack底层永远有个globalContext</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/4" target="_blank" rel="noopener">JavaScript 深入之执行上下文栈</a></p><h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>1、全局上下文的变量对象初始化：全局对象</p><p>2、函数上下文的变量对象初始化：只包括<code>Arguments</code>对象</p><p>3、进入执行上下文时：给变量对象添加形参、函数声明、变量声明等初始的属性值</p><p>4、代码执行阶段：再次修改变量对象的属性值</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>执行上下文过程可分为：进入执行上下文和代码执行（分析-执行）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  b = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>进入执行上下文过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="built_in">arguments</span>: &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="literal">undefined</span>,</span><br><span class="line">  c: reference <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  d: <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码执行阶段：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="built_in">arguments</span>: &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    length: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">3</span>,</span><br><span class="line">  c: reference <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  d: reference to FunctionExpression <span class="string">"d"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：未进入执行阶段之前，<code>变量对象(VO)</code>中的属性都不能访问！但是进入执行阶段之后，<code>变量对象(VO)</code>转变为了<code>活动对象(AO)</code>，里面的属性都能被访问了，然后开始进行执行阶段的操作。它们其实都是同一个对象，只是处于执行上下文的不同生命周期。</p><p>最后，函数是“第一等公民”，记住这个，变量名称和函数名称相同的声明，优先执行函数声明。</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/5" target="_blank" rel="noopener">JavaScript 深入之变量对象</a></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>下面让我们以一个函数的创建和激活两个时期来讲解作用域链是如何创建和变化的。</p><h3 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h3><p>由上节内容可知：函数的作用域在函数定义的时候就决定了。</p><p>这是因为函数有一个内部属性 [[scope]]，当函数创建的时候，就会保存所有父变量对象到其中，你可以理解 [[scope]] 就是所有父变量对象的层级链，但是注意：[[scope]] 并不代表完整的作用域链！</p><p>如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各自的 [[scope]]:</span></span><br><span class="line">foo.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br><span class="line">bar.[[scope]] = [</span><br><span class="line">  fooContext.AO   <span class="comment">// 保存父变量</span></span><br><span class="line">  globalContext.VO</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h3><p>当函数激活时，进入函数上下文，创建 VO/AO 后，就会将活动对象添加到作用链的前端。</p><p>这时候执行上下文的作用域链，我们命名为 Scope：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scope = [AO].concat([[Scope]]);</span><br></pre></td></tr></table></figure><p>至此，作用域链创建完毕。</p><h3 id="综合分析"><a href="#综合分析" class="headerlink" title="综合分析"></a>综合分析</h3><p>以下面的例子为例，结合着之前讲的变量对象和执行上下文栈，我们来总结一下函数执行上下文中作用域链和变量对象的创建过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scope = <span class="string">"global scope"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkscope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scope2 = <span class="string">"local scope"</span>;</span><br><span class="line">  <span class="keyword">return</span> scope2;</span><br><span class="line">&#125;</span><br><span class="line">checkscope();</span><br></pre></td></tr></table></figure><p>执行过程如下：</p><p>1.checkscope 函数被创建，保存作用域链到 内部属性[[scope]]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscope.[[scope]] = [</span><br><span class="line">    globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>2.执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope 函数执行上下文被压入执行上下文栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [checkscopeContext, globalContext];</span><br></pre></td></tr></table></figure><p>3.checkscope 函数并不立刻执行，开始做准备工作，第一步：复制函数[[scope]]属性创建作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">    AO: &#123;</span><br><span class="line">        <span class="built_in">arguments</span>: &#123;</span><br><span class="line">            length: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        scope2: <span class="literal">undefined</span></span><br><span class="line">    &#125;，</span><br><span class="line">    Scope: checkscope.[[scope]],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.第三步：将活动对象压入 checkscope 作用域链顶端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">  AO: &#123;</span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">      length: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    scope2: <span class="literal">undefined</span></span><br><span class="line">  &#125;,</span><br><span class="line">  Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>6.准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checkscopeContext = &#123;</span><br><span class="line">  AO: &#123;</span><br><span class="line">    <span class="built_in">arguments</span>: &#123;</span><br><span class="line">      length: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    scope2: <span class="string">"local scope"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  Scope: [AO, [[Scope]]]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7.查找到 scope2 的值，返回后函数执行完毕，函数上下文从执行上下文栈中弹出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [globalContext];</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/6" target="_blank" rel="noopener">JavaScript 深入之作用域链</a></p><h2 id="从-ECMAScript-规范解读-this"><a href="#从-ECMAScript-规范解读-this" class="headerlink" title="从 ECMAScript 规范解读 this"></a>从 ECMAScript 规范解读 this</h2><blockquote><p>作者曰：在写文章之初，我就面临着这些问题，最后还是放弃从多个情形下给大家讲解 this 指向的思路，而是追根溯源的从 ECMASciript 规范讲解 this 的指向，尽管从这个角度写起来和读起来都比较吃力，但是一旦多读几遍，明白原理，绝对会给你一个全新的视角看待 this 。</p></blockquote><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/7" target="_blank" rel="noopener">JavaScript 深入之从 ECMAScript 规范解读 this</a></p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>对于每个执行上下文，都有三个重要属性：</p><ul><li>变量对象(Variable object，VO)</li><li>作用域链(Scope chain)</li><li>this</li></ul><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/8" target="_blank" rel="noopener">JavaScript 深入之执行上下文</a></p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包是指那些能够访问自由变量的函数。</p><p>自由变量是指在函数中使用的，但既不是参数也不是函数的局部变量的变量。</p><p>那么，闭包 = 函数 + 函数能够访问的自由变量。</p><p>看这道刷题必刷，面试必考的闭包题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure><p>循环结束后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">data[<span class="number">1</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br><span class="line">data[<span class="number">2</span>] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行<code>data[0]()，data[1]()，data[2]()</code>时，i=3,所以都打印 3</p><p>让我们改成闭包看看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();</span><br><span class="line">data[<span class="number">1</span>]();</span><br><span class="line">data[<span class="number">2</span>]();</span><br></pre></td></tr></table></figure><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/9" target="_blank" rel="noopener">JavaScript 深入之闭包</a></p><h2 id="参数按值传递"><a href="#参数按值传递" class="headerlink" title="参数按值传递"></a>参数按值传递</h2><p>ECMAScript 中所有函数的参数都是按值传递的。 — 《JavaScript 高级程序设计-第三版》</p><p>即，把函数外部的值复制给函数内部的参数，就和把值从一个变量复制给另一个变量一样。</p><p>但是通俗地理解，参数如果是基本类型是按值传递，参数如果是引用类型就按共享传递。</p><p>共享传递是指，在传递对象的时候，传递对象的引用的副本。</p><p>例子一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">  v = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(v); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(value);</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>内存分布如下：</p><p>改变前：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td colspan="2" align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>value</td><br>    <td>1</td><br>    <td></td><br>    <td></td><br>  </tr><br>  <tr><br>    <td>v</td><br>    <td>1</td><br>    <td></td><br>    <td></td><br>  </tr><br></table><p>改变后：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td colspan="2" align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>value</td><br>    <td>1</td><br>    <td></td><br>    <td></td><br>  </tr><br>  <tr><br>    <td>v</td><br>    <td>2</td><br>    <td></td><br>    <td></td><br>  </tr><br></table><p>例子二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.value = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(o.value); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>内存分布如下：</p><p>改变前：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj，o</td><br>    <td>指针地址</td><br>    <td>{value: 1}</td><br>  </tr><br></table><p>改变后：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj，o</td><br>    <td>指针地址</td><br>    <td>{value: 2}</td><br>  </tr><br></table><p>例子三：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  value: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(o); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">foo(obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj.value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>内存分布如下：</p><p>改变前：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj，o</td><br>    <td>指针地址</td><br>    <td>{value: 1}</td><br>  </tr><br></table><p>改变后：</p><table><br>  <tr><br>    <td colspan="2" align="center">栈内存</td><br>    <td align="center">堆内存</td><br>  </tr><br>  <tr><br>    <td>obj</td><br>    <td>指针地址</td><br>    <td>{value: 1}</td><br>  </tr><br>  <tr><br>    <td>o</td><br>    <td>2</td><br>    <td></td><br>  </tr><br></table><p>以上解释来自：<a href="https://github.com/mqyqingfeng/Blog/issues/10#issuecomment-305645497" target="_blank" rel="noopener">sunsl516 commented</a> on 2 Jun 2017.</p><p>原文链接：<a href="https://github.com/mqyqingfeng/Blog/issues/10" target="_blank" rel="noopener">JavaScript 深入之参数按值传递</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;主要讲述什么是原型，什么是原型链，以及分别总结执行上下文的三个重要属性：变量对象、作用域链、this，还有闭包等难以理解的知识点。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>常见的 web 攻击方式</title>
    <link href="http://yangtao.site/2019/11/12/web-safety/"/>
    <id>http://yangtao.site/2019/11/12/web-safety/</id>
    <published>2019-11-12T14:57:11.000Z</published>
    <updated>2019-12-03T10:22:15.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h3><blockquote><p>SQL 注入（SQLi）是一种注入攻击，，可以执行恶意 SQL 语句。它通过将任意 SQL 代码插入数据库查询，使攻击者能够完全控制 Web 应用程序后面的数据库服务器。</p></blockquote><a id="more"></a><p>犯罪分子可能会利用它来未经授权访问用户的敏感数据：客户信息，个人数据，商业机密，知识产权等。SQL 注入攻击是最古老，最流行，最危险的 Web 应用程序漏洞之一。</p><p><em>如何防止 SQL 注入攻击？</em></p><ul><li><p>不要使用动态 SQL<br>避免将用户提供的输入直接放入 SQL 语句中；最好使用准备好的语句和参数化查询，这样更安全。</p></li><li><p>不要将敏感数据保留在纯文本中<br>加密存储在数据库中的私有/机密数据；这样可以提供了另一级保护，以防攻击者成功地排出敏感数据。</p></li><li><p>限制数据库权限和特权<br>将数据库用户的功能设置为最低要求；这将限制攻击者在设法获取访问权限时可以执行的操作。</p></li><li><p>避免直接向用户显示数据库错误<br>攻击者可以使用这些错误消息来获取有关数据库的信息。</p></li><li><p>对访问数据库的 Web 应用程序使用 Web 应用程序防火墙（WAF）<br>这为面向 Web 的应用程序提供了保护，它可以帮助识别 SQL 注入尝试；根据设置，它还可以帮助防止 SQL 注入尝试到达应用程序（以及数据库）。</p></li><li><p>定期测试与数据库交互的 Web 应用程序<br>这样做可以帮助捕获可能允许 SQL 注入的新错误或回归。</p></li><li><p>将数据库更新为最新的可用修补程序</p></li></ul><p>原文：<a href="https://www.php.cn/mysql-tutorials-416424.html" target="_blank" rel="noopener">什么是 SQL 注入？如何防止 SQL 注入攻击？</a></p><p>比如 node 博客里使用 mysql.escape()来防止注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">  select username, realname from users where username=<span class="subst">$&#123;mysql.<span class="built_in">escape</span>(</span></span></span><br><span class="line"><span class="string"><span class="subst">    username</span></span></span><br><span class="line"><span class="string"><span class="subst">  )&#125;</span> and password=<span class="subst">$&#123;mysql.<span class="built_in">escape</span>(password)&#125;</span>;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><blockquote><p>XSS（Cross Site Script，跨站脚本攻击）是向网页中注入恶意脚本（CSS 代码、JavaScript 代码等），用户浏览网页时在用户浏览器中执行恶意脚本的一种攻击方式。如盗取用户 cookie，破坏页面结构、重定向到其他网站等。</p></blockquote><p>防范 XSS（永远不要相信用户的输入，必须对输入的数据作过滤处理）主要有两方面：</p><ul><li>消毒：对危险字符进行转义</li><li>HttpOnly：防范 XSS 攻击者窃取 Cookie 数据</li></ul><p>比如 node 博客里：新建文章的时候，标题里输入<code>&lt;script&gt;alert(&#39;我是一段js代码&#39;)&lt;/script&gt;</code>，然后点击提交，就会直接弹出来。</p><p>node 使用 xss：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> title = xss(blogData.title);</span><br><span class="line"></span><br><span class="line"><span class="comment">// title</span></span><br><span class="line"><span class="comment">// &amp;lt;script&amp;gt;alert('我是一段js代码')&amp;lt;/script&amp;gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSRF-攻击"><a href="#CSRF-攻击" class="headerlink" title="CSRF 攻击"></a>CSRF 攻击</h3><blockquote><p>CSRF 攻击（Cross Site Request Forgery，跨站请求伪造）是攻击者通过跨站请求，以合法的用户身份进行非法操作（如转账或发帖等）。</p></blockquote><p>这里先说一下，http 是无状态的。服务器端和浏览器端的身份判断一般是通过 cookie。 后端会根据请求者传递的 cookie 信息判断请求者的身份。 攻击者的请求只要是带上了目标用户的 cookie，就可以合法请求。</p><ul><li><p>跨站：<br>请求来源很可能来自其他网站，也有可能来自本站</p></li><li><p>伪造：<br>请求并非用户的意愿</p></li><li><p>实现：<br>利用跨域标签 img iframe 等在 b 网站发送往 a 网站 get 请求，会带上 a 网站的 cookie，由此可见对于数据修改的请求最好不要用 get。</p><p>如果你在 a 站登录了，又访问了恶意网站 b，而 b 上面有一个恶意 img 标签的 get 请求，那你的数据可能就被删除了。 而跨域的 ajax 请求因为同源策略，不会带上 cookie，但是也能请求到结果，后端会处理这个请求，不过因为没有携带 cookie 信息，后端拿 不到登录状态，很多操作不会成功。跨域请求的结果也会发到客户端，不过由于同源策略的限制，浏览器读取不到这个响应结果。</p><p>伪造 form 表单提交。那么，post 请求就安全了吗？form 表单是跨域的。并且可以提交 post 请求。我们在 b 网站伪造一个 form 表单自动提交到 a 网站。</p></li><li><p>预防：<br>最好的办法是带 token，任何请求都带上 token，这样伪站可以发请求，但是无法拿到 token，后端收到的就不带 token 就可以判定非法了。</p></li></ul><p>原文：<a href="https://blog.csdn.net/liusaint1992/article/details/80865350" target="_blank" rel="noopener">常见的 web 攻击方式及预防</a></p><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><ul><li>文档：<a href="nodejs.cn/api/crypto.html">crypto（加密）</a></li></ul><p>crypto 模块提供了加密功能，包括对 OpenSSL 的哈希、HMAC、加密、解密、签名、以及验证功能的一整套封装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">"crypto"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="keyword">const</span> hash = crypto</span><br><span class="line">  .createHmac(<span class="string">"sha256"</span>, secret)</span><br><span class="line">  .update(<span class="string">"I love cupcakes"</span>)</span><br><span class="line">  .digest(<span class="string">"hex"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(hash);</span><br><span class="line"><span class="comment">// 打印:</span></span><br><span class="line"><span class="comment">//   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e</span></span><br></pre></td></tr></table></figure><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><p>md5：不是一种加密算法，是用来做文件校验的</p><p>作用：让大容量信息在数字签名软件签署私人秘钥前被”压缩”成一种保密格式，也就是把一个任意长度的字节串变换成一定长度的十六进制数字串（32个字符）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">'WJiol_8776#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// md5 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHash(<span class="string">'md5'</span>).update(content).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genPassword</span>(<span class="params">password</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> md5(<span class="string">`password=<span class="subst">$&#123;password&#125;</span>&amp;key=<span class="subst">$&#123;SECRET_KEY&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(genPassword(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment">// 4d4994bde299f6168c65f24c852897b7</span></span><br></pre></td></tr></table></figure><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>进一步提升MD5加密安全性：是一个”秘钥”，对明文进行加密，并做”两次散列”，但使用它得到的还是32个字符</p><p>利用哈希算法，以一个秘钥和一个信息为输入，生成一个消息摘要作为输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">'crypto'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SECRET_KEY = <span class="string">'WJiol_8776#'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Hmac 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hmac</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.createHmac(<span class="string">'md5'</span>, SECRET_KEY).update(content).digest(<span class="string">'hex'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hamc: '</span>, hmac(<span class="string">'123456'</span>))</span><br><span class="line"><span class="comment">// 7d37b577bcd2a492820846e475b933f9</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li><a href="https://cloud.tencent.com/developer/information/sql%E6%94%BB%E5%87%BB" target="_blank" rel="noopener">sql 攻击</a></li><li><a href="https://cloud.tencent.com/developer/article/1455178" target="_blank" rel="noopener">SQL 注入和 XSS 攻击</a></li><li><a href="https://www.php.cn/mysql-tutorials-416424.html" target="_blank" rel="noopener">什么是 SQL 注入？如何防止 SQL 注入攻击？</a></li><li><a href="https://cloud.tencent.com/developer/article/1198977" target="_blank" rel="noopener">什么是 XSS 攻击？什么是 SQL 注入攻击？什么是 CSRF 攻击？</a></li><li><a href="https://blog.csdn.net/qq_41033290/article/details/91381962" target="_blank" rel="noopener">如何预防 SQL 注入和 XSS 攻击</a> - 代码讲解更直观</li><li><a href="http://www.sosout.com/2018/09/05/cryptojs-tutorial.html" target="_blank" rel="noopener">前端加密 JS 库–CryptoJS 使用指南 </a></li><li><a href="https://www.jianshu.com/p/92195252c2e0" target="_blank" rel="noopener">nodeJS：MD5加密</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SQL-注入&quot;&gt;&lt;a href=&quot;#SQL-注入&quot; class=&quot;headerlink&quot; title=&quot;SQL 注入&quot;&gt;&lt;/a&gt;SQL 注入&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;SQL 注入（SQLi）是一种注入攻击，，可以执行恶意 SQL 语句。它通过将任意 SQL 代码插入数据库查询，使攻击者能够完全控制 Web 应用程序后面的数据库服务器。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yangtao.site/categories/Web/"/>
    
    
      <category term="web" scheme="http://yangtao.site/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>当复制一个对象的副本所导致的“Object大案”</title>
    <link href="http://yangtao.site/2019/10/05/js-object/"/>
    <id>http://yangtao.site/2019/10/05/js-object/</id>
    <published>2019-10-05T01:30:42.000Z</published>
    <updated>2019-11-11T07:46:05.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用 forEach 来复制一个对象的副本<br><a id="more"></a></p></blockquote><h2 id="用-forEach-来复制一个对象的副本"><a href="#用-forEach-来复制一个对象的副本" class="headerlink" title="用 forEach 来复制一个对象的副本"></a>用 forEach 来复制一个对象的副本</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象复制函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyObj1 = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> copyObj2 = copy(copyObj1);</span><br><span class="line"><span class="built_in">console</span>.log(copyObj2); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(copyObj2 === copyObj1); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create"></a>Object.create</h2><blockquote><p><code>Object.create(proto[, propertiesObject])</code>方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></p></blockquote><h2 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h2><h2 id="Object-getOwnPropertyNames"><a href="#Object-getOwnPropertyNames" class="headerlink" title="Object.getOwnPropertyNames"></a>Object.getOwnPropertyNames</h2><h2 id="Object-getOwnPropertyDescriptor"><a href="#Object-getOwnPropertyDescriptor" class="headerlink" title="Object.getOwnPropertyDescriptor"></a>Object.getOwnPropertyDescriptor</h2><h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__</span></span><br><span class="line">  <span class="comment">// Object.getPrototypeOf(object)方法返回指定对象的原型（内部[[Prototype]]属性的值</span></span><br><span class="line">  <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">  <span class="comment">// Object.getOwnPropertyNames(obj)方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组</span></span><br><span class="line">  <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">  propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Object.getOwnPropertyDescriptor(obj, prop)方法返回指定对象上一个自有属性对应的属性描述符。</span></span><br><span class="line">    <span class="comment">// （自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</span></span><br><span class="line">    <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name);</span><br><span class="line">    <span class="comment">// Object.defineProperty(obj, prop, descriptor)方法会直接在一个对象上定义一个新属性，</span></span><br><span class="line">    <span class="comment">// 或者修改一个对象的现有属性， 并返回这个对象</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#%E5%AF%B9%E8%B1%A1%E5%A4%8D%E5%88%B6%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">Array.prototype.forEach() 是如何使用 ECMAScript 5 Object.* 元属性（meta property ）函数工作</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noopener">Array.prototype.some()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every" target="_blank" rel="noopener">Array.prototype.every()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create" target="_blank" rel="noopener">Object.create()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys" target="_blank" rel="noopener">Object.keys()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noopener">Object.defineProperty()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor" target="_blank" rel="noopener">Object.getOwnPropertyDescriptor()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames" target="_blank" rel="noopener">Object.getOwnPropertyNames()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf" target="_blank" rel="noopener">Object.getPrototypeOf()</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用 forEach 来复制一个对象的副本&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yangtao.site/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yangtao.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Git 提交的正确姿势：Commit message 编写指南</title>
    <link href="http://yangtao.site/2019/09/26/git-commit/"/>
    <id>http://yangtao.site/2019/09/26/git-commit/</id>
    <published>2019-09-26T10:12:30.000Z</published>
    <updated>2019-11-13T03:57:43.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）</p><ul><li>feat：新功能（feature）</li><li>fix：修补 bug</li><li>docs：文档（documentation）</li><li>style： 格式（不影响代码运行的变动）</li><li>refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）</li><li>test：增加测试</li><li>chore：构建过程或辅助工具的变动<a id="more"></a></li></ul><h3 id="提交信息规范"><a href="#提交信息规范" class="headerlink" title="提交信息规范"></a>提交信息规范</h3><p>我们对项目的 git 提交信息格式进行统一格式约定，每条提交信息由 <code>type</code>+<code>subject</code> 组成，这将提升项目日志的可读性。</p><ul><li><code>type</code> 用于表述此次提交信息的意义，首写字母大写，包括但不局限于如下类型：<ul><li><code>Build</code>：基础构建系统或依赖库的变化</li><li><code>Ci</code>：CI 构建系统及其脚本变化</li><li><code>Docs</code>：文档内容变化</li><li><code>Feat</code>：新功能</li><li><code>Fix</code>：Bug 修复</li><li><code>Perf</code>：性能优化</li><li><code>Refactor</code>：重构（即不是新增功能，也不是修改 Bug 的代码变动）</li><li><code>Style</code>：格式（不影响代码运行的变动）</li><li><code>Revert</code>：代码回滚</li><li><code>Release</code>：版本发布</li></ul></li><li><code>subject</code> 用于简要描述修改变更的内容，如 <code>Update code highlighting in readme.md</code>。<ul><li>句尾不要使用符号。</li><li>使用现在时、祈使句语气。</li></ul></li></ul><h3 id="标签规范"><a href="#标签规范" class="headerlink" title="标签规范"></a>标签规范</h3><p>为了方便维护人员和用户能够快速找到他们想要查看的问题，我们使用“标签”功能对 Pull requests 和 Issues 进行分类。</p><p>如果您不确定某个标签的含义，或者不知道将哪些标签应用于 PR 或 issue，千万别错过这个。</p><p>Issue 的标签：</p><ul><li>类型<ul><li><code>Bug</code>: 检测到需要进行确认的 Bug</li><li><code>Feature Request</code>: 提出了新功能请求的 Issue</li><li><code>Question</code>: 提出疑问的 Issue</li><li><code>Meta</code>: 表明使用条款变更的 Issue</li><li><code>Support</code>: 被标记为支持请求的 Issue</li><li><code>Polls</code>: 发起投票的 Issue</li></ul></li><li>结果<ul><li><code>Duplicate</code>: 重复提及的 Issue</li><li><code>Irrelevant</code>: 与 NexT 主题无关的 Issue</li><li><code>Expected Behavior</code>: 与预期行为相符的 Issue</li><li><code>Need More Info</code>: 需要更多信息的 Issue</li><li><code>Need Verify</code>: 需要开发人员或用户确认 Bug 或解决方法的 Issue</li><li><code>Verified</code>: 已经被确认的 Issue</li><li><code>Can&#39;t Reproduce</code>: 无法复现的 Issue</li><li><code>Solved</code>: 已经解决的 Issue</li><li><code>Stale</code>: 由于长期无人回应被封存的 Issue</li></ul></li></ul><p>Pull Request 的标签：</p><ul><li><code>Breaking Change</code>: 产生重大变动的 Pull Request</li><li><code>Bug Fix</code>: 修复相关 Bug 的 Pull Request</li><li><code>New Feature</code>: 添加了新功能的 Pull Request</li><li><code>Feature</code>: 为现有功能提供选项或加成的 Pull Request</li><li><code>i18n</code>: 更新了翻译的 Pull Request</li><li><code>Work in Progress</code>: 仍在进行改动和完善的 Pull Request</li><li><code>Skip Release</code>: 无需在 Release Note 中展现的 Pull Request</li></ul><p>两者兼有：</p><ul><li><code>Roadmap</code>: 与 NexT 主题发展相关的 Issue 或者 Pull Request</li><li><code>Help Wanted</code>: 需要帮助的 Issue 或者 Pull Request</li><li><code>Discussion</code>: 需要进行讨论的 Issue 或者 Pull Request</li><li><code>Improvement</code>: 需要改进的 Issue 或者改进了 NexT 主题的 Pull Request</li><li><code>Performance</code>: 提出性能问题的 Issue 或者提高了 NexT 主题性能的 Pull Request</li><li><code>Hexo</code>: 与 Hexo 和 Hexo 插件相关的 Issue 或者 Pull Request</li><li><code>Template Engine</code>: 与模版引擎相关的 Issue 或者 Pull Request</li><li><code>CSS</code>: 与 NexT 主题 CSS 文件相关的 Issue 或者 Pull Request</li><li><code>Fonts</code>: 与 NexT 主题字体相关的 Issue 或者 Pull Request</li><li><code>PJAX</code>: 与 PJAX 相关的 Issue 或者 Pull Request</li><li><code>3rd Party Plugin</code>: 与第三方插件和服务相关的 Issue 或者 Pull Request</li><li><code>Docs</code>: 与文档说明相关的 Issue 或者 Pull Request</li><li><code>Configurations</code>: 与 NexT 主题设置相关的 Issue 或者 Pull Request</li></ul><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://www.cnblogs.com/daysme/p/7722474.html" target="_blank" rel="noopener">Git 提交的正确姿势：Commit message 编写指南</a></li><li><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/CONTRIBUTING.md" target="_blank" rel="noopener">Next 主题贡献规范</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Header&quot;&gt;&lt;a href=&quot;#Header&quot; class=&quot;headerlink&quot; title=&quot;Header&quot;&gt;&lt;/a&gt;Header&lt;/h2&gt;&lt;p&gt;Header 部分只有一行，包括三个字段：type（必需）、scope（可选）和 subject（必需）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;feat：新功能（feature）&lt;/li&gt;
&lt;li&gt;fix：修补 bug&lt;/li&gt;
&lt;li&gt;docs：文档（documentation）&lt;/li&gt;
&lt;li&gt;style： 格式（不影响代码运行的变动）&lt;/li&gt;
&lt;li&gt;refactor：重构（即不是新增功能，也不是修改 bug 的代码变动）&lt;/li&gt;
&lt;li&gt;test：增加测试&lt;/li&gt;
&lt;li&gt;chore：构建过程或辅助工具的变动
    
    </summary>
    
      <category term="开发工具" scheme="http://yangtao.site/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yangtao.site/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="http://yangtao.site/2019/09/06/web-speed/"/>
    <id>http://yangtao.site/2019/09/06/web-speed/</id>
    <published>2019-09-06T11:21:19.000Z</published>
    <updated>2019-12-03T10:21:19.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>重定向 → 拉取缓存 →DNS 查询 → 建立 TCP 链接 → 发起请求 → 接收响应 → 处理 HTML 元素 → 元素加载完成</p></blockquote><a id="more"></a><h2 id="网络传输性能优化"><a href="#网络传输性能优化" class="headerlink" title="网络传输性能优化"></a>网络传输性能优化</h2><h3 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h3><blockquote><p>缓存一般分为强缓存和协商缓存，主要区别是：使用本地缓存的时候，是否需要向服务器验证本地缓存是否依旧有效。</p></blockquote><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><p>主要通过 http 请求头中的 Cache-Control 和 Expire 两个字段控制</p><p>一般，我们会设置 Cache-Control 的值为“public, max-age=xxx”，表示在 xxx 秒内再次访问该资源，均使用本地的缓存，不再向服务器发起请求。</p><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>每次都向服务器验证一下缓存的有效性</p><h4 id="前端缓存方案"><a href="#前端缓存方案" class="headerlink" title="前端缓存方案"></a>前端缓存方案</h4><ul><li>HTML：使用协商缓存</li><li>CSS JS Image：使用强缓存，文件名带上 hash 值</li></ul><p>浏览器默认的缓存是放在内存内的，但我们知道，内存里的缓存会因为进程的结束或者说浏览器的关闭而被清除，而存在硬盘里的缓存才能够被长期保留下去。很多时候，我们在 network 面板中各请求的 size 项里，会看到两种不同的状态：from memory cache 和 from disk cache，前者指缓存来自内存，后者指缓存来自硬盘。而控制缓存存放位置的，不是别人，就是我们在服务器上设置的 Etag 字段。在浏览器接收到服务器响应后，会检测响应头部（Header），如果有 Etag 字段，那么浏览器就会将本次缓存写入硬盘中。</p><h3 id="资源打包压缩"><a href="#资源打包压缩" class="headerlink" title="资源打包压缩"></a>资源打包压缩</h3><blockquote><p>网络性能优化措施归结为三大方面：减少请求数、减小请求资源体积、提升网络传输速率</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp grunt webpack parcel</span><br></pre></td></tr></table></figure><h3 id="图片资源优化"><a href="#图片资源优化" class="headerlink" title="图片资源优化"></a>图片资源优化</h3><ul><li>不要在 HTML 里缩放图像</li><li>使用雪碧图（CSS Sprite）- <code>webpack-spritesmith</code></li><li>使用字体图标（iconfont）- icomoon</li><li>使用 WebP - 图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间</li></ul><h3 id="网络传输性能检测工具"><a href="#网络传输性能检测工具" class="headerlink" title="网络传输性能检测工具"></a>网络传输性能检测工具</h3><ul><li><code>Page Speed | PageSpeed Insights</code></li></ul><h3 id="使用-CDN"><a href="#使用-CDN" class="headerlink" title="使用 CDN"></a>使用 CDN</h3><h2 id="页面渲染性能优化"><a href="#页面渲染性能优化" class="headerlink" title="页面渲染性能优化"></a>页面渲染性能优化</h2><h3 id="浏览器渲染过程（webkit）"><a href="#浏览器渲染过程（webkit）" class="headerlink" title="浏览器渲染过程（webkit）"></a>浏览器渲染过程（webkit）</h3><ul><li>《Webkit 技术内幕》</li></ul><blockquote><p>浏览器的解释器，是包括在渲染引擎内的，我们常说的 Chrome（现在使用的是 Blink 引擎）和 Safari 使用的 Webkit 引擎，Firefox 使用的 Gecko 引擎，指的就是渲染引擎。而在渲染引擎内，还包括着我们的 HTML 解释器（渲染时用于构造 DOM 树）、CSS 解释器（渲染时用于合成 CSS 规则）还有我们的 JS 解释器。不过后来，由于 JS 的使用越来越重要，工作越来越繁杂，所以 JS 解释器也渐渐独立出来，成为了单独的 JS 引擎，就像众所周知的 V8 引擎，我们经常接触的 Node.js 也是用的它。</p></blockquote><h3 id="DOM-渲染层与-GPU-硬件加速"><a href="#DOM-渲染层与-GPU-硬件加速" class="headerlink" title="DOM 渲染层与 GPU 硬件加速"></a>DOM 渲染层与 GPU 硬件加速</h3><ul><li>① 浏览器会先获取 DOM 树并依据样式将其分割成多个独立的渲染层</li><li>②CPU 将每个层绘制进绘图中</li><li>③ 将位图作为纹理上传至 GPU（显卡）绘制</li><li>④GPU 将所有的渲染层缓存（如果下次上传的渲染层没有发生变化，GPU 就不需要对其进行重绘）并复合多个渲染层最终形成我们的图像</li></ul><h3 id="重排和重绘"><a href="#重排和重绘" class="headerlink" title="重排和重绘"></a>重排和重绘</h3><p>不论是重排还是重绘，都会阻塞浏览器。要提高网页性能，就要降低重排和重绘的频率和成本，近可能少地触发重新渲染。</p><p>重排是由 CPU 处理的，而重绘是由 GPU 处理的，CPU 的处理效率远不及 GPU，并且重排一定会引发重绘，而重绘不一定会引发重排。所以在性能优化工作中，我们更应当着重减少重排的发生。</p><h4 id="重排-reflow"><a href="#重排-reflow" class="headerlink" title="重排 reflow"></a>重排 reflow</h4><p>渲染层内的元素布局发生修改，都会导致页面重写排列。</p><p>比如：窗口的尺寸发生变化、删除或添加 DOM 元素；修改了影响元素盒子大小的 css 属性（width height padding…）</p><h4 id="重绘-repaint"><a href="#重绘-repaint" class="headerlink" title="重绘 repaint"></a>重绘 repaint</h4><p>绘制，所有对元素的视觉表现属性的修改，都会引起重绘。</p><h3 id="优化策略"><a href="#优化策略" class="headerlink" title="优化策略"></a>优化策略</h3><ul><li>CSS 属性读写分离</li><li>通过切换 class 或者 style.csstext 属性去批量操作元素样式</li><li>DOM 元素离线更新</li><li>将没用的元素设为不可见：visibility: hidden，减少重绘的压力</li><li>压缩 DOM 的深度：少用 DOM 完成页面样式，多使用伪元素或者 box-shadow 取代。</li><li>图片在渲染前指定大小：因为 img 元素是内联元素，所以在加载图片后会改变宽高，严重的情况会导致整个页面重排，所以最好在渲染前就指定其大小，或者让其脱离文档流。</li><li>对页面中可能发生大量重排重绘的元素单独触发渲染层，使用 GPU 分担 CPU 压力。（慎重）</li></ul><h2 id="JS-阻塞性能"><a href="#JS-阻塞性能" class="headerlink" title="JS 阻塞性能"></a>JS 阻塞性能</h2><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><h3 id="Node-js-处理-IO-密集型请求"><a href="#Node-js-处理-IO-密集型请求" class="headerlink" title="Node.js 处理 IO 密集型请求"></a>Node.js 处理 IO 密集型请求</h3><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513044&amp;idx=1&amp;sn=9b8526e9d641b970ee5ddac02dae3c57&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Node.js : 我只需要一个店小二</a></li></ul><p>node 的核心是事件驱动，通过 loop 去异步处理用户请求，相对于传统的后端服务，他们都是将用户的每个请求分配到异步队列中进行处理。</p><p>事件驱动的优势：在高并发 IO 时，不会造成堵塞。</p><p>Frond-End(Browser) <- nodejs="" -=""> Back-End(Java Server)</-></p><h3 id="pm2-实现-Node-js“多线程”"><a href="#pm2-实现-Node-js“多线程”" class="headerlink" title="pm2 实现 Node.js“多线程”"></a>pm2 实现 Node.js“多线程”</h3><ul><li><a href="https://www.zhihu.com/question/19653241/answer/15993549" target="_blank" rel="noopener">使用 Node.js 的优势和劣势都有哪些？</a></li></ul><p>pm2。这是它的官网：pm2.keymetrics.io/</p><p>它是一款 node.js 进程管理器，具体的功能，就是能在你的计算机里的每一个内核都启动一个 node.js 服务。</p><p>也就是说如果你的电脑或者服务器是多核处理器（现在也少见单核了吧），它就能启动多个 node.js 服务，并且它能够自动控制负载均衡，会自动将用户的请求分发至压力小的服务进程上处理。</p><h3 id="nginx-搭建反向代理"><a href="#nginx-搭建反向代理" class="headerlink" title="nginx 搭建反向代理"></a>nginx 搭建反向代理</h3><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul><li><a href="https://juejin.im/post/5c136bd16fb9a049d37efc47" target="_blank" rel="noopener">前端缓存最佳实践</a></li><li><a href="https://juejin.im/post/5b6fa8c86fb9a0099910ac91" target="_blank" rel="noopener">网站性能优化实战——从 12.67s 到 1.06s 的故事</a></li><li><a href="https://juejin.im/post/5ae081aaf265da0b767d263a" target="_blank" rel="noopener">你应该知道的前端——缓存</a></li><li>《大型网站性能监测、分析与优化》</li><li><a href="https://www.cnblogs.com/xianyulaodi/p/5755079.html" target="_blank" rel="noopener">【原】雅虎前端优化的 35 条军规</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;重定向 → 拉取缓存 →DNS 查询 → 建立 TCP 链接 → 发起请求 → 接收响应 → 处理 HTML 元素 → 元素加载完成&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yangtao.site/categories/Web/"/>
    
    
      <category term="web" scheme="http://yangtao.site/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>MacOS如何使用 tree 生成目录结构</title>
    <link href="http://yangtao.site/2019/09/02/tool-tree/"/>
    <id>http://yangtao.site/2019/09/02/tool-tree/</id>
    <published>2019-09-02T07:01:37.000Z</published>
    <updated>2019-11-11T07:09:18.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Homebrew安装"><a href="#Homebrew安装" class="headerlink" title="Homebrew安装"></a>Homebrew安装</h2><p><a href="https://brew.sh/" target="_blank" rel="noopener">homebrew官网</a></p><p><a href="[https://www.jianshu.com/p/de6f1d2d37bf](https://www.jianshu.com/p/de6f1d2d37bf">Homebrew介绍和使用</a></p><a id="more"></a><p>根据官网的方法安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></p><p>比如我的：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==&gt; This script will install:</span><br><span class="line">/usr/<span class="built_in">local</span>/bin/brew</span><br><span class="line">/usr/<span class="built_in">local</span>/share/doc/homebrew</span><br><span class="line">/usr/<span class="built_in">local</span>/share/man/man1/brew.1</span><br><span class="line">/usr/<span class="built_in">local</span>/share/zsh/site-functions/_brew</span><br><span class="line">/usr/<span class="built_in">local</span>/etc/bash_completion.d/brew</span><br><span class="line">/usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line"></span><br><span class="line">Press RETURN to <span class="built_in">continue</span> or any other key to abort</span><br></pre></td></tr></table></figure></p><p>一路按照提示操作即可，不出意外的话，就安装成功了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ brew -v</span><br><span class="line">Homebrew 2.1.9</span><br><span class="line">Homebrew/homebrew-core (git revision c8ff; last commit 2019-08-01)</span><br><span class="line">Homebrew/homebrew-cask (git revision 04bff; last commit 2019-08-02)</span><br></pre></td></tr></table></figure></p><h2 id="Tree-安装"><a href="#Tree-安装" class="headerlink" title="Tree 安装"></a>Tree 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br></pre></td></tr></table></figure><p>常用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">brew install tree</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件夹下的所有文件</span></span><br><span class="line">tree -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只显示文件夹</span></span><br><span class="line">tree -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示项目的层级，如三级</span></span><br><span class="line">tree -L 3  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤，如除node_modules文件</span></span><br><span class="line">tree -I <span class="string">"node_modules"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">tree &gt; tree.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># Help</span></span><br><span class="line">tree --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p>最后，我的输出：<code>tree -I &quot;node_modules&quot; &gt; tree.md</code><br>查看 <code>tree.md</code> 的内容如下：<br><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── dist</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── app.scss</span><br><span class="line">│   ├── font-awesome</span><br><span class="line">│   │   ├── fonts</span><br><span class="line">│   │   │   ├── FontAwesome.otf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.eot</span><br><span class="line">│   │   │   ├── fontawesome-webfont.svg</span><br><span class="line">│   │   │   ├── fontawesome-webfont.ttf</span><br><span class="line">│   │   │   ├── fontawesome-webfont.woff</span><br><span class="line">│   │   │   └── fontawesome-webfont.woff2</span><br><span class="line">│   │   └── scss</span><br><span class="line">│   │       ├── _animated.scss</span><br><span class="line">│   │       ├── _bordered-pulled.scss</span><br><span class="line">│   │       ├── _core.scss</span><br><span class="line">│   │       ├── _fixed-width.scss</span><br><span class="line">│   │       ├── _icons.scss</span><br><span class="line">│   │       ├── _larger.scss</span><br><span class="line">│   │       ├── _list.scss</span><br><span class="line">│   │       ├── _mixins.scss</span><br><span class="line">│   │       ├── _path.scss</span><br><span class="line">│   │       ├── _rotated-flipped.scss</span><br><span class="line">│   │       ├── _screen-reader.scss</span><br><span class="line">│   │       ├── _stacked.scss</span><br><span class="line">│   │       ├── _variables.scss</span><br><span class="line">│   │       └── font-awesome.scss</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── index.jsx</span><br><span class="line">│   ├── react.png</span><br><span class="line">│   └── style.css</span><br><span class="line">├── tree.md</span><br><span class="line">├── webpack.config.js</span><br><span class="line">└── yarn.lock</span><br><span class="line"></span><br><span class="line">5 directories, 31 files</span><br></pre></td></tr></table></figure></p><h2 id="tree命令行参数"><a href="#tree命令行参数" class="headerlink" title="tree命令行参数"></a>tree命令行参数</h2><table><thead><tr><th>命令行参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示所有文件和目录。</td></tr><tr><td>-A</td><td>使用ASNI绘图字符显示树状图而非以ASCII字符组合。</td></tr><tr><td>-C</td><td>在文件和目录清单加上色彩，便于区分各种类型。</td></tr><tr><td>-d</td><td>显示目录名称而非内容。</td></tr><tr><td>-D</td><td>列出文件或目录的更改时间。</td></tr><tr><td>-f</td><td>在每个文件或目录之前，显示完整的相对路径名称。</td></tr><tr><td>-F</td><td>在末尾追加描述性字符，如 ls -F</td></tr><tr><td>-g</td><td>列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</td></tr><tr><td>-i</td><td>不以阶梯状列出文件或目录名称。</td></tr><tr><td>-I</td><td>不显示符合范本样式的文件或目录名称。</td></tr><tr><td>-l</td><td>如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</td></tr><tr><td>-n</td><td>不在文件和目录清单加上色彩。</td></tr><tr><td>-N</td><td>直接列出文件和目录名称，包括控制字符。</td></tr><tr><td>-p</td><td>列出权限标示。</td></tr><tr><td>-P</td><td>只显示符合范本样式的文件或目录名称。</td></tr><tr><td>-q</td><td>用”?”号取代控制字符，列出文件和目录名称。</td></tr><tr><td>-s</td><td>列出文件或目录大小。</td></tr><tr><td>-t</td><td>用文件和目录的更改时间排序。</td></tr><tr><td>-u</td><td>列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</td></tr><tr><td>-x</td><td>将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.cnblogs.com/ayseeing/p/4097066.html" target="_blank" rel="noopener">mac tree命令</a></li><li><a href="https://blog.csdn.net/qq673318522/article/details/53713903" target="_blank" rel="noopener">Mac使用tree生成目录结构</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Homebrew安装&quot;&gt;&lt;a href=&quot;#Homebrew安装&quot; class=&quot;headerlink&quot; title=&quot;Homebrew安装&quot;&gt;&lt;/a&gt;Homebrew安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://brew.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;homebrew官网&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;[https://www.jianshu.com/p/de6f1d2d37bf](https://www.jianshu.com/p/de6f1d2d37bf&quot;&gt;Homebrew介绍和使用&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="http://yangtao.site/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="MacOS" scheme="http://yangtao.site/tags/MacOS/"/>
    
      <category term="终端" scheme="http://yangtao.site/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>学习 React 的一些记录日志</title>
    <link href="http://yangtao.site/2019/08/24/react-doc/"/>
    <id>http://yangtao.site/2019/08/24/react-doc/</id>
    <published>2019-08-24T10:15:52.000Z</published>
    <updated>2019-11-11T07:34:04.745Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习 React 的一些记录日志<br><a id="more"></a></p></blockquote><h2 id="Video-Course"><a href="#Video-Course" class="headerlink" title="Video Course"></a>Video Course</h2><h3 id="初级"><a href="#初级" class="headerlink" title="初级"></a>初级</h3><ul><li><a href="https://www.imooc.com/learn/1045" target="_blank" rel="noopener">基于实例的 react16 傻瓜课程</a> — 用一系列有趣的、简洁明快的实例由浅入深的阐述了 React 的特色，概念和基本使用</li><li><a href="https://www.imooc.com/learn/1023" target="_blank" rel="noopener">react16.4 快速上手</a> — 通过 Todolist 功能的实现，给大家讲解了 React 组件间的通信方式</li></ul><h3 id="中级"><a href="#中级" class="headerlink" title="中级"></a>中级</h3><ul><li><a href="https://www.imooc.com/learn/1061" target="_blank" rel="noopener">react 16 实现订单列表及评价功能</a> — 介绍了从项目创建、到组件划分、再到组件及页面逻辑实现的开发流程</li><li><a href="https://www.imooc.com/learn/944" target="_blank" rel="noopener">react 组件</a> — 比较详细地讲解组件和生命周期</li></ul><h3 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h3><ul><li><a href="https://www.imooc.com/learn/953" target="_blank" rel="noopener">react响应用户输入</a> — 学习如何让数据逻辑与 UI 的结合使用、react 的事件处理机制以及 react 对 DOM 模型的操作</li><li><a href="https://www.imooc.com/learn/971" target="_blank" rel="noopener">react知识点综合运用实例</a> — 综合实例操作</li><li><a href="https://www.imooc.com/learn/1075" target="_blank" rel="noopener">react高级教程之高阶组件</a> — 高阶组件的应用：代理和继承</li></ul><h2 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h2><ul><li><a href="https://zh-hans.reactjs.org/docs/getting-started.html" target="_blank" rel="noopener">React 官方文档</a></li><li><a href="https://ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design of React</a> — antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。</li><li><a href="https://pro.ant.design/docs/getting-started-cn" target="_blank" rel="noopener">Ant Design Pro</a> — 是一个企业级中后台前端/设计解决方案</li><li><a href="https://mobile.ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">Ant Design Mobile of React</a> — 是 Ant Design 的移动规范的 React 实现，服务于蚂蚁及口碑无线业务</li><li><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">webpack 官方文档</a></li><li><a href="https://typescript.bootcss.com/tutorials/react-&amp;-webpack.html" target="_blank" rel="noopener">React 与 webpack</a></li></ul><h2 id="Learning-Materials"><a href="#Learning-Materials" class="headerlink" title="Learning Materials"></a>Learning Materials</h2><ul><li><a href="https://hulufei.gitbooks.io/react-tutorial/content/index.html" target="_blank" rel="noopener">《react 入门教程》</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">《react 入门实例教程》</a> — 阮一峰</li><li><a href="https://ts.xcatliu.com/" target="_blank" rel="noopener">《typescript 热门教程》</a></li><li><a href="https://zhuanlan.zhihu.com/p/23412169" target="_blank" rel="noopener">《6 周学习计划，攻克 javascript 难关(react/redux/es6 etc.)》</a></li></ul><h2 id="My-Learning"><a href="#My-Learning" class="headerlink" title="My Learning"></a>My Learning</h2><h3 id="入门学习-React-的几个例子"><a href="#入门学习-React-的几个例子" class="headerlink" title="入门学习 React 的几个例子"></a>入门学习 React 的几个例子</h3><blockquote><p><a href="https://github.com/yangtao2o/myreact/tree/master/demo" target="_blank" rel="noopener">Demo 地址，戳我</a></p></blockquote><ol><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/01/index.html" target="_blank" rel="noopener">ReactDOM.render()</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/02/index.html" target="_blank" rel="noopener">Use Array in JSX</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/03/index.html" target="_blank" rel="noopener">组件</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/04/index.html" target="_blank" rel="noopener">this.props.children</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/05/index.html" target="_blank" rel="noopener">PropTypes</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/06/index.html" target="_blank" rel="noopener">获取真实的 DOM 节点</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/07/index.html" target="_blank" rel="noopener">this.state</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/08/index.html" target="_blank" rel="noopener">表单</a></li><li><a href="https://github.com/yangtao2o/myreact/blob/master/demo/09/index.html" target="_blank" rel="noopener">组件的生命周期</a></li><li><a href="https://istaotao.com/myreact/demo/10/" target="_blank" rel="noopener">使用 Promise 获取 Github 的数据</a></li><li><a href="https://istaotao.com/myreact/demo/11/" target="_blank" rel="noopener">Todo List</a></li><li><a href="https://istaotao.com/myreact/demo/12/" target="_blank" rel="noopener">井字棋（Tic Tac Toe）</a></li></ol><h3 id="Nextjs-—-配合-React-打造静态化和服务端渲染应用"><a href="#Nextjs-—-配合-React-打造静态化和服务端渲染应用" class="headerlink" title="Nextjs — 配合 React 打造静态化和服务端渲染应用"></a>Nextjs — 配合 React 打造静态化和服务端渲染应用</h3><p><strong><a href="https://github.com/yangtao2o/myreact/tree/master/nextjs/01-hello-next" target="_blank" rel="noopener">Nextjs</a></strong></p><ul><li>Demo1: 学习官方文档</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nextjs/01-hello-next</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="My-Project"><a href="#My-Project" class="headerlink" title="My Project"></a>My Project</h2><ul><li><a href="https://github.com/yangtao2o/myreact/tree/master/product/01-ttt" target="_blank" rel="noopener">学习「井字游戏」</a></li><li><a href="https://github.com/yangtao2o/myreact/tree/master/product/02-news-app" target="_blank" rel="noopener">学习体验 Ant Design of React</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;学习 React 的一些记录日志&lt;br&gt;
    
    </summary>
    
      <category term="前端框架" scheme="http://yangtao.site/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="react" scheme="http://yangtao.site/tags/react/"/>
    
  </entry>
  
</feed>
