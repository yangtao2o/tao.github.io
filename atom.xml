<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大涛子</title>
  
  <subtitle>简单、极致、不失风趣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://istaotao.com/"/>
  <updated>2019-05-03T13:27:02.350Z</updated>
  <id>https://istaotao.com/</id>
  
  <author>
    <name>杨涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>js设计模式学习之单例模式</title>
    <link href="https://istaotao.com/2019/05/03/mode-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://istaotao.com/2019/05/03/mode-单例模式/</id>
    <published>2019-05-03T13:24:26.000Z</published>
    <updated>2019-05-03T13:27:02.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote><a id="more"></a><h4 id="实现一个单例模式"><a href="#实现一个单例模式" class="headerlink" title="实现一个单例模式"></a>实现一个单例模式</h4><p>用一个变量标志当前是否已经为某个类型创建过对象，如果是，则下次直接返回之前创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.instance = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Singleton.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.instance) &#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = Singleton.getInstance(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> b = Singleton.getInstance(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过 <code>Singleton.getInstance</code>来获取 Singleton 类的唯一对象，里边使用了 new 来获取，导致了这个类的“不透明性”。</p><h4 id="透明的单例模式"><a href="#透明的单例模式" class="headerlink" title="透明的单例模式"></a>透明的单例模式</h4><p>创建一个“透明”的单例类，就是让我们从这个类中创建对象的时候可以和使用其他普通类一样：<code>var aa = new CreateDiv(&#39;Sisi1&#39;);</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">    <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> CreateDiv;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> CreateDiv(<span class="string">'Sisi2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>下面这段代码中，CreateDiv 的构造函数负责了两件事：创建对象和执行初始化 init 方法，及保证只有一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">  <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是，如果我们要创建很多的div，这里的 <code>return instance = this;</code> 就需要删掉。</p><h4 id="用代理实现单例模式"><a href="#用代理实现单例模式" class="headerlink" title="用代理实现单例模式"></a>用代理实现单例模式</h4><p>这时候，为了避免上面不能复用的尴尬，通过引入代理类的方式，把负责管理单例的逻辑移交至代理类<code>ProxySingletonCreateDiv</code>，这样<code>CreateDiv</code>只是一个普通的类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.html = html;</span><br><span class="line">  <span class="keyword">this</span>.init();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ProxySingletonCreateDiv = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> CreateDiv(html);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony1'</span>);</span><br><span class="line"><span class="keyword">var</span> bb = <span class="keyword">new</span> ProxySingletonCreateDiv(<span class="string">'Tony2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(aa === bb); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript-中的单例模式"><a href="#JavaScript-中的单例模式" class="headerlink" title="JavaScript 中的单例模式"></a>JavaScript 中的单例模式</h4><p>单例模式的核心是：确保只有一个实例，并提供全局访问。</p><ol><li>使用命名空间</li></ol><p>对象字面量的方式: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> namespace1 = &#123;</span><br><span class="line">  a: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">namespace1.a(); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>把a和b都定义为 namespace1 的属性，减少了变量和全局作用域打交道的机会，还可以动态地创建命名空间：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">MyApp.namespace = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parts = name.split(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">var</span> current = MyApp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> parts) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!current[parts[i]]) &#123;</span><br><span class="line">      current[parts[i]] = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    current = current[parts[i]];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyApp.namespace(<span class="string">'event'</span>);</span><br><span class="line">MyApp.namespace(<span class="string">'dom.style'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyApp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：</span></span><br><span class="line"><span class="keyword">var</span> MyApp = &#123;</span><br><span class="line">  event: &#123;&#125;,</span><br><span class="line">  dom: &#123;</span><br><span class="line">    style: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 使用闭包封装私有变量</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用下划线约定私有变量 _name 和 _age。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="keyword">var</span> user = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _name = <span class="string">'Seven'</span>;</span><br><span class="line">  <span class="keyword">var</span> _age = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getUserInfo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> _name + <span class="string">'-'</span> + _age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(user.getUserInfo()) <span class="comment">// Seven-27</span></span><br></pre></td></tr></table></figure><h4 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h4><p>宗旨：在需要的时候才创建对象！！！</p><p>栗子：QQ的登录浮窗</p><p>第一种方案：页面加载完成的时候便创建好浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是，不管我们登录与否，都会创建悬浮窗，所以我们可以修改为：在点击登录的时候再创建悬浮窗。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时候，虽然达到了惰性的目的，却失去了单例的效果，每次点击登录，都会创建一个新的悬浮窗。</p><p>所以我们需要一个变量来判断是否已经创建过悬浮窗：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!div) &#123; <span class="comment">// 判断是否已创建</span></span><br><span class="line">      div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">      div.style.display = <span class="string">'none'</span>;</span><br><span class="line">      <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="通用的惰性单例"><a href="#通用的惰性单例" class="headerlink" title="通用的惰性单例"></a>通用的惰性单例</h4><p>虽然上面的悬浮框是一个可用的惰性单例，但是仍然违反了单一职责原则，如果我们要创建其他的标签，就需要把创建悬浮窗的函数复制一份，再修修改改，无法做到复用。</p><p>所以，我们需要把不变的部分隔离出来，进行抽象，无论创建什么标签，都是一样的逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj;</span><br><span class="line"><span class="keyword">if</span>(!obj) &#123;</span><br><span class="line">  obj = xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着，继续：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  div.innerHTML = <span class="string">'我是一个小小的悬浮框'</span>;</span><br><span class="line">  div.style.display = <span class="string">'none'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">  <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loginLayer = createSingleLoginLayer();</span><br><span class="line">  loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时，我们创建其他标签就只需要关系如何创建该标签就可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createIframe = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">  iframe.src = <span class="string">'https://baidu.com'</span>;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">  <span class="keyword">return</span> iframe;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingleIframe = getSingle(createIframe);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'loginBtn2'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  createSingleIframe();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>单例模式是一种简单却非常常用的模式，特别是惰性单例技术，在合适的时候才创建对象，并且只创建唯一的一个。</p><p><em>创建对象</em> 和 <em>管理单例</em> 的职责被分布在两个不同的方法中，两个方法组合起来才具有单例模式的威力。</p><p>学习资料：</p><ul><li>《JavaScript 设计模式与开发实践》第 4 章</li></ul><p>发布：</p><ul><li>掘金<a href="https://juejin.im/post/5ccb927a6fb9a0324936c2c6" target="_blank" rel="noopener">《js设计模式学习之单例模式》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;保证一个类仅有一个实例，并提供一个访问它的全局访问点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="设计模式" scheme="https://istaotao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>jQuery插件写法小结之重写轮播图功能</title>
    <link href="https://istaotao.com/2019/05/03/jquery-%E8%BD%AE%E6%92%AD%E5%9B%BE/"/>
    <id>https://istaotao.com/2019/05/03/jquery-轮播图/</id>
    <published>2019-05-03T13:19:29.000Z</published>
    <updated>2019-05-03T13:23:04.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在维护老网站的时候，发现一些jQuery库的使用有些臃肿，并且大部分自定义的js文件很容易污染全局变量，所以想着重写下，虽然jQuery的辉煌时代已经过去了，但是他的思想，依旧灿烂（滚去维护去）</p></blockquote><a id="more"></a><h2 id="先举个栗子"><a href="#先举个栗子" class="headerlink" title="先举个栗子"></a>先举个栗子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> methods = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 可自定义扩展项</span></span><br><span class="line">      options = $.extend(</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;&#125;, </span><br><span class="line">        $.fn.myPlugin.defaults,</span><br><span class="line">        options</span><br><span class="line">      );</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'options'</span>, options, <span class="keyword">this</span>)</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Name is '</span>, $.fn.myPlugin.defaults.name, <span class="string">'.'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Age is '</span>, $.fn.myPlugin.defaults.age, <span class="string">'.'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.display == <span class="string">"none"</span> &amp;&amp; (<span class="keyword">this</span>.style.display = <span class="string">''</span>)</span><br><span class="line">        <span class="keyword">if</span> (getComputedStyle(<span class="keyword">this</span>, <span class="string">''</span>).getPropertyValue(<span class="string">"display"</span>) == <span class="string">"none"</span>)</span><br><span class="line">          <span class="keyword">this</span>.style.display = defaultDisplay(<span class="keyword">this</span>.nodeName)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    hide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.css(<span class="string">"display"</span>, <span class="string">"none"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 命名空间最好只有一个</span></span><br><span class="line">  $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法调用，可满足三种情况：1. method, 2. init, 3. error</span></span><br><span class="line">    <span class="keyword">if</span>(methods[method]) &#123;</span><br><span class="line">      <span class="keyword">return</span> methods[method].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));  <span class="comment">//将具有length属性的对象转成数组</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> method === <span class="string">'object'</span> || !method) &#123;</span><br><span class="line">      <span class="comment">// 如果没有参数或者参数</span></span><br><span class="line">      <span class="keyword">return</span> methods.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $.error(<span class="string">'Method'</span> + method + <span class="string">'does not exist on jQuery.myPlugin.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $.fn.myPlugin.defaults =  &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(jQuery)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --- 测试 --- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化init</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改参数</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(&#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'wuwang'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'27'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调取方法</span></span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(<span class="string">'hide'</span>)</span><br><span class="line">$(<span class="string">'#testPara'</span>).myPlugin(<span class="string">'show'</span>)</span><br></pre></td></tr></table></figure><p>简单易懂，但是五脏俱全，接下来简单说明：</p><h4 id="搞定复杂参数列表"><a href="#搞定复杂参数列表" class="headerlink" title="搞定复杂参数列表"></a>搞定复杂参数列表</h4><p>首先，我们一般传参如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a1, a2, a3, a4</span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>那如果不传参呐？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="literal">null</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>就需要如上使用 null 来站位，参数多了，保证你晕。</p><p>所以，我们使用 <strong>可选哈希参数（options hash）</strong>，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 改成</span></span><br><span class="line">foo(<span class="number">1</span>, &#123;</span><br><span class="line">    a4: <span class="number">4</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>接着，我们使用 jQuery 的 $.extend() 工具函数合并可选参数，并设置默认值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">a1, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> settings = $.extend(&#123;</span><br><span class="line">        a2: value2,</span><br><span class="line">        a3: value3,</span><br><span class="line">        a4: value4</span><br><span class="line">    &#125;, options || &#123;&#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，就有了栗子中形态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> settings = $.extend(</span><br><span class="line">    <span class="literal">true</span>,  <span class="comment">// 是否为深拷贝</span></span><br><span class="line">    &#123;&#125;,    <span class="comment">// 使用源元素属性来扩展目标对象</span></span><br><span class="line">    $.fn.myPlugin.defaults,  <span class="comment">// 默认的一个对象，将属性添加到 target（即&#123;&#125;） 目标对象中</span></span><br><span class="line">    options  <span class="comment">// 多个源后会覆盖前面同名的属性</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样，就再也不会纠结参数的不传或者多个占位传参，挺好。</p><p>实际操作下：先看一个多个参数的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).myPlugin(&#123;</span><br><span class="line">  <span class="string">'mynewname'</span>: <span class="string">'lisi'</span>,</span><br><span class="line">  <span class="string">'mynewage'</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 打印settings： &#123;name: "zhangsan", age: "20", mynewname: "lisi", mynewage: 22&#125;</span></span><br></pre></td></tr></table></figure><p>再看一个：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).myPlugin(&#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'lisi'</span>,</span><br><span class="line">  <span class="string">'mynewage'</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;name: "lisi", age: "20", mynewage: 22&#125;</span></span><br></pre></td></tr></table></figure></p><p>一看就懂，有则覆盖，无则添加，完美。</p><h4 id="统一命名空间"><a href="#统一命名空间" class="headerlink" title="统一命名空间"></a>统一命名空间</h4><p>由于是jQuery插件，都挂载在 jQuery 对象下，所以恰当命名空间的插件尽可能不与其他插件冲突，甚至是 jQuery 的核心库方法。</p><p>比如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> defaults = &#123;&#125;  <span class="comment">// 定义默认项</span></span><br><span class="line">    <span class="keyword">var</span> methods = &#123;&#125;  <span class="comment">// 定义方法</span></span><br><span class="line">    $.fn.myPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">method</span>) </span>&#123;&#125;  <span class="comment">// 定义 myPlugin 命名空间并赋值一个匿名函数</span></span><br><span class="line">&#125;(jQuery)</span><br></pre></td></tr></table></figure></p><h4 id="允许公开访问默认设置"><a href="#允许公开访问默认设置" class="headerlink" title="允许公开访问默认设置"></a>允许公开访问默认设置</h4><p>为了更加的定制化，我们需要暴露默认的设置，这样我们就可以修改设置了。</p><p>首先修改 defaults 变量，为了暴露给外部世界，需要把它赋值给 $.fn 属性。并且为了统一命名空间原则，需要把它作为 myPlugin 的属性，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.fn.myPlugin.defaults =  &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'zhangsan'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接着，当使用默认值来合并参数选项时，在项目中只出现一次，即在 init() 方法里，如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> methods = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 可自定义扩展项</span></span><br><span class="line">      options = $.extend(</span><br><span class="line">        <span class="literal">true</span>,</span><br><span class="line">        &#123;&#125;, </span><br><span class="line">        $.fn.myPlugin.defaults,</span><br><span class="line">        options</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当我们在浏览器里直接测试：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取</span></span><br><span class="line">$.fn.myPlugin.defaults.name   <span class="comment">// zhangsan</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line">$.fn.myPlugin.defaults.name = <span class="string">'wangwu'</span></span><br><span class="line"><span class="comment">// "wangwu"</span></span><br></pre></td></tr></table></figure></p><h4 id="维护链式调用性"><a href="#维护链式调用性" class="headerlink" title="维护链式调用性"></a>维护链式调用性</h4><p>使用 <code>return this</code> ，可以维护链式调用性。</p><h4 id="Array-prototype-slice-call"><a href="#Array-prototype-slice-call" class="headerlink" title="Array.prototype.slice.call()"></a>Array.prototype.slice.call()</h4><p><code>Array.prototype.slice.call(arguments)</code>能将具有length属性的对象转成数组 （<code>arguments.toArray().slice()</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=&#123;<span class="attr">length</span>:<span class="number">2</span>,<span class="number">0</span>:<span class="string">'first'</span>,<span class="number">1</span>:<span class="string">'second'</span>&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.slice.call(a);   <span class="comment">//Array [ "first", "second" ]</span></span><br></pre></td></tr></table></figure><h2 id="再举个栗子"><a href="#再举个栗子" class="headerlink" title="再举个栗子"></a>再举个栗子</h2><p>项目中经常使用轮播图，我们就在前人的基础上，模仿一下吧（你就说是抄的不就行了麽）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showPhoto</span>(<span class="params">options, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $photoElement = $(options.photoElement);</span><br><span class="line">        <span class="keyword">if</span> (!$photoElement.is(<span class="string">':animated'</span>)) &#123;</span><br><span class="line">          $photoElement.animate(&#123;</span><br><span class="line">            opacity: <span class="number">0.5</span></span><br><span class="line">          &#125;, <span class="number">0</span>).attr(</span><br><span class="line">            <span class="string">'src'</span>,</span><br><span class="line">            options.transformer(options.$thumbnails[index].src)</span><br><span class="line">          ).animate(&#123;</span><br><span class="line">            opacity: <span class="number">1</span></span><br><span class="line">          &#125;, <span class="number">800</span>);</span><br><span class="line">          options.current = index;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">var</span> methods = &#123;</span><br><span class="line">      init: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">         options = $.extend(</span><br><span class="line">            <span class="literal">true</span>, &#123;&#125;,</span><br><span class="line">            $.fn.slidePhoto.defaults,</span><br><span class="line">            options, &#123;</span><br><span class="line">               current: <span class="number">0</span>, <span class="comment">// 初始值为0</span></span><br><span class="line">               $thumbnails: <span class="keyword">this</span>.filter(<span class="string">'img'</span>), <span class="comment">//选出所有的图片</span></span><br><span class="line">               delay: options.delay &gt;= <span class="number">1000</span> ? options.delay : <span class="number">1000</span>,</span><br><span class="line">            &#125;</span><br><span class="line">         );</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 点击图片，切换对应大图</span></span><br><span class="line">         options.$thumbnails.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, options.$thumbnails.index(<span class="keyword">this</span>));</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示下一张</span></span><br><span class="line">         $(options.nextControl + <span class="string">', '</span> + options.photoElement).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = (options.current + <span class="number">1</span>) % options.$thumbnails.length; <span class="comment">// 取模</span></span><br><span class="line"></span><br><span class="line">            showPhoto(options, index);</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示上一张</span></span><br><span class="line">         $(options.previousControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> index = options.current === <span class="number">0</span> ? options.$thumbnails.length - <span class="number">1</span> : options.current - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            showPhoto(options, index);</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示第一张</span></span><br><span class="line">         $(options.firstControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, <span class="number">0</span>);</span><br><span class="line">         &#125;).triggerHandler(<span class="string">'click'</span>); <span class="comment">// 主要是初始时触发，触发被选元素上指定的事件，返回事件处理函数的返回值</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 显示最后一张</span></span><br><span class="line">         $(options.lastControl).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            showPhoto(options, options.$thumbnails.length - <span class="number">1</span>);</span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 自动播放</span></span><br><span class="line">         <span class="keyword">var</span> tick;</span><br><span class="line"></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            tick = <span class="built_in">window</span>.setInterval(</span><br><span class="line">               <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  $(options.nextControl).triggerHandler(<span class="string">'click'</span>)</span><br><span class="line">               &#125;, options.delay);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 鼠标移入移出状态</span></span><br><span class="line">         <span class="function"><span class="keyword">function</span> <span class="title">mouserStatus</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">            $(obj).mouseenter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="keyword">if</span> (tick) &#123;</span><br><span class="line">                  <span class="built_in">window</span>.clearInterval(tick);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;).mouseleave(autoPlay);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (options.autoPlayControl) &#123;</span><br><span class="line">            autoPlay();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 鼠标滑动暂停、播放</span></span><br><span class="line">         mouserStatus(options.photoElement);</span><br><span class="line">         mouserStatus(options.$thumbnails);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $.fn.slidePhoto = <span class="function"><span class="keyword">function</span> (<span class="params">method</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (methods[method]) &#123;</span><br><span class="line">         <span class="keyword">return</span> methods[method].apply(<span class="keyword">this</span>, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($.type(method) === <span class="string">'object'</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> methods.init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         $.error(<span class="string">'Method '</span> + method + <span class="string">' does not exist on jQuery.slidePhoto'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   $.fn.slidePhoto.defaults = &#123;</span><br><span class="line">      photoElement: <span class="string">'img.photomatic-photo'</span>, <span class="comment">// 大图显示</span></span><br><span class="line">      transformer: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name.replace(<span class="string">'thumbnail'</span>, <span class="string">'photo'</span>); <span class="comment">// 将'thumbnail' 替换为 'photo'，即最终返回大图的src属性值</span></span><br><span class="line">      &#125;,</span><br><span class="line">      nextControl: <span class="literal">null</span>, <span class="comment">// 下一张</span></span><br><span class="line">      previousControl: <span class="literal">null</span>, <span class="comment">// 前一张</span></span><br><span class="line">      firstControl: <span class="literal">null</span>, <span class="comment">// 第一张</span></span><br><span class="line">      lastControl: <span class="literal">null</span>, <span class="comment">// 最后一张</span></span><br><span class="line">      autoPlayControl: <span class="literal">false</span>,</span><br><span class="line">      delay: <span class="number">3000</span> <span class="comment">// 延时</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(jQuery)</span><br></pre></td></tr></table></figure><p>用法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#thumbnails-pane img'</span>).slidePhoto(&#123;</span><br><span class="line">    photoElement: <span class="string">'#photo-display'</span>,</span><br><span class="line">    previousControl: <span class="string">'#previous-button'</span>,</span><br><span class="line">    nextControl: <span class="string">'#next-button'</span>,</span><br><span class="line">    firstControl: <span class="string">'#first-button'</span>,</span><br><span class="line">    lastControl: <span class="string">'#last-button'</span>,</span><br><span class="line">    autoPlayControl: <span class="literal">true</span>,</span><br><span class="line">    delay: <span class="number">3000</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure></p><p>参考：</p><ul><li>《jQuery实战 第三版》</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在维护老网站的时候，发现一些jQuery库的使用有些臃肿，并且大部分自定义的js文件很容易污染全局变量，所以想着重写下，虽然jQuery的辉煌时代已经过去了，但是他的思想，依旧灿烂（滚去维护去）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工具库" scheme="https://istaotao.com/categories/%E5%B7%A5%E5%85%B7%E5%BA%93/"/>
    
    
      <category term="js插件" scheme="https://istaotao.com/tags/js%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>初探 this、call 和 apply</title>
    <link href="https://istaotao.com/2019/05/03/js-this-apply-call/"/>
    <id>https://istaotao.com/2019/05/03/js-this-apply-call/</id>
    <published>2019-05-03T13:16:03.000Z</published>
    <updated>2019-05-03T13:22:55.761Z</updated>
    
    <content type="html"><![CDATA[<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><blockquote><p>JavaScript 中 this 总是指向一个对象</p></blockquote><a id="more"></a><h4 id="this-的指向"><a href="#this-的指向" class="headerlink" title="this 的指向"></a>this 的指向</h4><ol><li>作为对象的方法调用</li></ol><p>this 指向该对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  getA: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === obj); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">// 1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.getA();</span><br></pre></td></tr></table></figure><ol start="2"><li>作为普通函数调用</li></ol><p>当函数不作为对象的属性被调用时，普通函数的 this 总是指向全局对象，浏览器里就是 window 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"globalName"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="string">"tyang"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = obj.getName;</span><br><span class="line"><span class="built_in">console</span>.log(obj.getName()); <span class="comment">// tyang</span></span><br><span class="line"><span class="built_in">console</span>.log(getName()); <span class="comment">// globalName</span></span><br></pre></td></tr></table></figure><p><code>obj.getName()</code> 作为 obj 对象的属性被调用，this 指向 obj 对象;</p><p><code>getName()</code> 使用变量 getName 引用 obj.getName，此时是函数调用方式，this 指向全局 window;</p><p>在严格模式，情况有所不同：this 不会指向全局对象，而是 undefined：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func();</span><br></pre></td></tr></table></figure><p>当函数作为某个对象的方法调用时，this 等于那个对象。不过，匿名函数的执行环境具有全局性，因此其 this 对象通常指向 window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gName = <span class="string">"The window"</span>;</span><br><span class="line"><span class="keyword">var</span> gObject = &#123;</span><br><span class="line">  gName: <span class="string">"My object"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 返回一个匿名函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.gName;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gObject.getName()()); <span class="comment">// 'The window'</span></span><br><span class="line"><span class="keyword">var</span> getNameFunc = gObject.getName();</span><br><span class="line"><span class="built_in">console</span>.log(getNameFunc()); <span class="comment">// 'The window'</span></span><br></pre></td></tr></table></figure><p>创建了一个全局对象 <code>gName</code>，这个对象包含一个方法 <code>getName()</code>， 这个方法返回一个匿名函数，这个匿名函数返回 <code>this.name</code>。因此调用 <code>gObject.getName()()</code> 会立即执行匿名函数，并返回一个字符串 <code>&#39;The window&#39;</code>。</p><p>为什么匿名函数没有取得包含作用域的 this 对象呢？</p><p>每个函数再被调用的时候，会自动取得两个特殊变量：this 和 arguments，内部函数在搜索这两个变量时，只会搜索到其活动对象为止，因此永远不可能直接访问外部函数中的这两个变量。</p><p>所以，可以在外部作用域中设置一个变量来保存 this 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gName = <span class="string">"The window"</span>;</span><br><span class="line"><span class="keyword">var</span> gObject = &#123;</span><br><span class="line">  gName: <span class="string">"My object"</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>; <span class="comment">// 将 this 对象赋值给 that 变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> that.gName; <span class="comment">// that 引用着 gObject</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(gObject.getName()()); <span class="comment">// 'My object'</span></span><br></pre></td></tr></table></figure><p>当然，arguments 对象也可以如此使用：对该对象的引用保存到另一个闭包能够访问的变量中。</p><ol><li>构造器调用</li></ol><p>当使用 new 运算符调用函数时，该函数会返回一个对象，一般情况下，构造器里的 this 指向返回的这个对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"Lisi"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameObj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(nameObj.name); <span class="comment">// Lisi</span></span><br></pre></td></tr></table></figure><p>但是，当显式返回一个 object 类型的对象时，那最终会返回这个对象，并不是之前的 this：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"Lisi"</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 如果这里不会烦 object 类型的数据，如：return 'wangwu'，就不会返回显式对象</span></span><br><span class="line">    name: <span class="string">"wangwu"</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> nameObj = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(nameObj.name); <span class="comment">// wangwu</span></span><br></pre></td></tr></table></figure><ol start="4"><li>Function.prototype.call 或 Function.prototype.apply 调用</li></ol><p>call 和 apply 可以动态地改变传入函数的 this：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> personObj = &#123;</span><br><span class="line">  name: <span class="string">"ytao"</span>,</span><br><span class="line">  age: <span class="string">"22"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.call(personObj)); <span class="comment">// ytao22</span></span><br></pre></td></tr></table></figure><h4 id="丢失的-this"><a href="#丢失的-this" class="headerlink" title="丢失的 this"></a>丢失的 this</h4><p>我们一般会重写这个获取 id 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getId = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getId(<span class="string">"divBox"</span>);</span><br></pre></td></tr></table></figure><p>那可不可以这样呢：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getId2 = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId2(<span class="string">"divBox"</span>); <span class="comment">// Uncaught TypeError: Illegal invocation</span></span><br></pre></td></tr></table></figure><p>结果直接报错，当 <code>getElementById</code> 方法作为 document 对象的属性被调用时， 方法内部的 this 是指向 document 的。如果 <code>getId2(&#39;divBox&#39;)</code>，相当于是普通函数调用，函数内部的 this 指向的是 window。</p><p>所以，按照这个思路，我们可以这样模拟一下它的实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById = (<span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> func.apply(<span class="built_in">document</span>, <span class="built_in">arguments</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)(<span class="built_in">document</span>.getElementById);</span><br><span class="line"></span><br><span class="line">getId3 = <span class="built_in">document</span>.getElementById;</span><br><span class="line">getId3(<span class="string">"divBox"</span>);</span><br></pre></td></tr></table></figure><h3 id="call-和-apply"><a href="#call-和-apply" class="headerlink" title="call 和 apply"></a>call 和 apply</h3><blockquote><p>fun.apply(thisArg, [argsArray])</p><p>fun.call(thisArg, arg1, arg2, …)</p></blockquote><p>在函数式编程中，call 和 apply 方法尤为有用，两者用法一致，只是传参的形式上有所区别而已。</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>apply() 接受两个参数，第一个参数指定了函数体内 this 对象，第二个是数组或者类数组，apply() 方法将这个集合中的元素作为参数传递给被调用的函数。</p><p>call() 方法的作用和 apply() 方法类似，区别就是 call()方法接受的是参数列表，而 apply()方法接受的是一个参数数组。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">Function​.prototype​.apply()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">Function​.prototype​.call()</a></li></ul><p>第一个参数为 null，函数体内的 this 会指向默认的宿主对象，但是在严格模式下，依然是 null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> applyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>);</span><br><span class="line">&#125;;</span><br><span class="line">applyFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> applyFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="literal">null</span>);</span><br><span class="line">&#125;;</span><br><span class="line">applyFunc.apply(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h4><ol><li>改变 this 指向</li></ol><p>假如在一个点击事件函数中有一个内部函数 func，当点击事件被触发时，就会出现如下情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"divBox"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// undefined，这里的 this 指向了 window</span></span><br><span class="line">  &#125;;</span><br><span class="line">  func();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时，我们用 call() 来改变一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"divBox"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id); <span class="comment">// divBox</span></span><br><span class="line">  &#125;;</span><br><span class="line">  func.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>模拟 bind 方法</li></ol><blockquote><p>function.bind(thisArg[, arg1[, arg2[, …]]])</p></blockquote><p>bind()方法创建一个新的函数，在调用时设置 this 关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// 保存原函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 返回新函数</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(context, <span class="built_in">arguments</span>); <span class="comment">// 将传入的 context 当做新函数体内的 this</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindObj = &#123;</span><br><span class="line">  name: <span class="string">"tyang"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// tyang</span></span><br><span class="line">&#125;.bind(bindObj);</span><br><span class="line"></span><br><span class="line">bindFunc();</span><br></pre></td></tr></table></figure><p>这是一个简化版的 <code>Function.prototype.bind</code>实现，<code>self.apply(context, arguments)</code>才是执行原来的 bindFunc 函数，并且指定 context 对象为 bindFunc 函数体内的 this。</p><p>我们再继续修改下，使之可以预先添加一些参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>,</span><br><span class="line">    context = [].shift.call(<span class="built_in">arguments</span>), <span class="comment">// 获取参数中第一个为绑定的this上下文</span></span><br><span class="line">    args = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// 将剩余的参数转化为数组</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回新函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context, [].concat.call(args, [].slice.call(<span class="built_in">arguments</span>))); <span class="comment">//arguments 为新函数的参数，即传入的 3，4</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindObj = &#123;</span><br><span class="line">  name: <span class="string">"lisisi"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFunc = <span class="function"><span class="keyword">function</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name); <span class="comment">// lisisi</span></span><br><span class="line">  <span class="built_in">console</span>.log([a, b, c, d]); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">&#125;.bind(bindObj, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">bindFunc(<span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p><code>self.apply(context, [].concat.call(args, [].slice.call(arguments)));</code>，执行新函数的时候，会把之前传入的 context 作为 this，<code>[].slice.call(arguments)</code>将新函数传入的参数转化为数组，并作为<code>[].concat.call(args)</code>的给定参数，组合两次，作为新函数最终的参数。</p><ol start="3"><li>借用其他对象的方法</li></ol><p>第一种，”借用构造函数“实现一些类似继承的效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  A.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">B.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> bbb = <span class="keyword">new</span> B(<span class="string">"Yangtao"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(bbb.getName()); <span class="comment">//Yangtao</span></span><br></pre></td></tr></table></figure><p>第二种，给类数组对象使用数组方法，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.push.call(<span class="built_in">arguments</span>, <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>再比如之前用到的，把 arguments 转成真正的数组的时候可以借用 <code>Array.prototype.slice.call(arguments)</code>，想截去头一个元素时，借用<code>Array.prototype.shift.call(arguments)</code></p><p>虽然我们可以把”任意“对象传入 <code>Array.prototype.push</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aObj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(aObj, <span class="string">"first"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(aObj.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(aObj[<span class="number">0</span>]); <span class="comment">// first</span></span><br></pre></td></tr></table></figure><p>但是，这个对象也得满足以下两个条件：</p><ul><li>对象本身要可以存取属性</li><li>对象的 length 属性可读写</li></ul><p>如果是其他类型，比如 number，无法存取；比如函数，length 属性不可写，使用 call 或 apply 就会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(num, <span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(num.length); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcObj = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">Array</span>.prototype.push.call(funcObj, <span class="string">"3"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(funcObj.length); <span class="comment">// Uncaught TypeError: Cannot assign to read only property 'length' of function 'function () &#123;&#125;'</span></span><br></pre></td></tr></table></figure><p>学习资料：</p><ul><li>《JavaScript 高程 3》第七章</li><li>《JavaScript 设计模式与开发实践 · 曾探》第 2 章</li></ul><p>发布：</p><ul><li>掘金<a href="https://juejin.im/post/5cb915546fb9a0688539b53b" target="_blank" rel="noopener">《初探 this、call 和 apply》</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;this&quot;&gt;&lt;a href=&quot;#this&quot; class=&quot;headerlink&quot; title=&quot;this&quot;&gt;&lt;/a&gt;this&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JavaScript 中 this 总是指向一个对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://istaotao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>初探 JavaScript 的变量</title>
    <link href="https://istaotao.com/2019/02/25/js-var/"/>
    <id>https://istaotao.com/2019/02/25/js-var/</id>
    <published>2019-02-25T08:12:34.000Z</published>
    <updated>2019-02-27T11:04:59.199Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本类型和引用类型的值"><a href="#基本类型和引用类型的值" class="headerlink" title="基本类型和引用类型的值"></a>基本类型和引用类型的值</h3><a id="more"></a><p><code>ECMAScript</code>变量一般有两种数据类型的值：<strong>基本类型和引用类型</strong>。</p><ul><li>基本类型： 简单的数据段：<code>Undefined, Null, Boolean, Number, String</code></li><li>引用类型：多个值构成的对象；</li></ul><h4 id="1-动态的属性"><a href="#1-动态的属性" class="headerlink" title="1. 动态的属性"></a>1. 动态的属性</h4><p>定义两者的值：创建一个变量并为其变量赋值；</p><p>执行两者的值：</p><ul><li>引用类型：可以添加、删除属性和方法；</li><li>基本类型：不能添加、删除属性和方法；</li></ul><p>比如：引用类型 a，可以添加属性 name age<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">a.name = <span class="string">"杨子龙"</span>;</span><br><span class="line">a.age = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);                      <span class="comment">//杨子龙</span></span><br></pre></td></tr></table></figure></p><p>基本类型 name 无法添加属性 age<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"杨子龙"</span>;</span><br><span class="line">name.age  = <span class="number">24</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.age);                 <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：只能给引用类型值动态地添加属性，以便将来使用。</p><h4 id="2-赋值变量值"><a href="#2-赋值变量值" class="headerlink" title="2. 赋值变量值"></a>2. 赋值变量值</h4><p>从一个变量向另一个变量复制基本类型值和引用类型值时：</p><ul><li>基本类型：在变量对象上创建一个新值，并将其值复制给新变量分配的位置上；（完全独立的两个变量）<br>例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">111</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(b);                 <span class="comment">//111</span></span><br></pre></td></tr></table></figure><p>代码中可知：变量b的值只是变量a的值的一个副本，两者的值111是完全独立的。</p><ul><li>引用类型：将存储在变量对象中的值复制一份放到为新变量分配的空间中；（引用同一个对象的两个变量）</li></ul><p>引用类型的值的副本实际是一个指针，指向存储在堆中的一个对象。<br>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1.name = <span class="string">"杨子龙"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2,name);                 <span class="comment">// Object &#123; name="杨子龙"&#125; 杨子龙</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：obj1和obj2都指向同一个对象Object；所以，为obj1添加的name属性，通过obj2也可以访问的到。</p><h4 id="3-传递参数"><a href="#3-传递参数" class="headerlink" title="3. 传递参数"></a>3. 传递参数</h4><p>我们都知道基本类型是<strong>按值访问</strong>的，因为可以访问保存在变量中的实际的值。<br>所有函数的参数都是<strong>按值传递</strong>的。</p><ul><li>基本类型：基本类型值的传递如同基本类型变量的复制一样；<br>在向参数传递值，被传递的值会被复制给一个局部变量（命名参数），因此这个局部变量的变化不会反映在函数的外部。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  num += <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result = fn(a);</span><br><span class="line"><span class="built_in">console</span>.log(result);        <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(a);             <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>代码中可知：参数num和变量a互不相识，只是有着相同的值而已，用完之后，你还是你，我还是我，互不干政。</p><ul><li>引用类型：引用类型的传递如同引用类型变量的复制一样；<br>在向参数传递值时，会把这个值在内存中的地址复制给一个局部变量，因此这个局部变量的变化会反映在函数的外部。</li></ul><p>例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.name = <span class="string">'杨子龙'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">fn(person);</span><br><span class="line"><span class="built_in">console</span>.log(person.name);           <span class="comment">//杨子龙</span></span><br></pre></td></tr></table></figure></p><p>代码中可知：在这个函数内部，参数obj和变量person引用的是同一个对象Object，所以，你不动我也不动，你动我也动，你中有我，我中有你，情义绵绵，经久不息……</p><p>也就是说：即使变量person是按值传递的，但是参数obj（想象成局部变量）还是会按引用来访问同一个对象。</p><blockquote><p> 访问变量有按值和按引用两种方式，参数只能按值传递。</p></blockquote><h4 id="4-检测类型"><a href="#4-检测类型" class="headerlink" title="4. 检测类型"></a>4. 检测类型</h4><ul><li>基本类型：<code>typeof</code></li><li>引用类型：<code>instanceof</code>（对象或null）</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'Yang Zilong'</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">24</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> e;</span><br><span class="line"><span class="keyword">var</span> g = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">null</span>;  <span class="comment">// 比较特殊</span></span><br><span class="line"><span class="keyword">var</span> h = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b); <span class="comment">//number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c); <span class="comment">//string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d); <span class="comment">//boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> g); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> f); <span class="comment">//object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> h); <span class="comment">//object</span></span><br></pre></td></tr></table></figure><blockquote><p>所用引用类型的值都是Object的实例。</p></blockquote><p>如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/.at/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Object</span>);        <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(num <span class="keyword">instanceof</span> <span class="built_in">Array</span>);         <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">Object</span>);    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(pattern <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);    <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><blockquote><p>使用<code>instanceof</code>检测基本类型，会返回<code>false</code>，基本类型不是对象。</p></blockquote><ul><li>参考资料：《JavaScript高级程序设计》（第三版）第四章</li><li>同步于： <a href="https://juejin.im/post/5c73a28cf265da2de52d9390" target="_blank" rel="noopener">掘金</a>、<a href="https://www.imooc.com/article/280082" target="_blank" rel="noopener">慕课网</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本类型和引用类型的值&quot;&gt;&lt;a href=&quot;#基本类型和引用类型的值&quot; class=&quot;headerlink&quot; title=&quot;基本类型和引用类型的值&quot;&gt;&lt;/a&gt;基本类型和引用类型的值&lt;/h3&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://istaotao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>初探JavaScript之Prototype</title>
    <link href="https://istaotao.com/2019/02/25/js-prototype/"/>
    <id>https://istaotao.com/2019/02/25/js-prototype/</id>
    <published>2019-02-25T07:21:42.000Z</published>
    <updated>2019-05-03T13:17:45.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Array-prototype"><a href="#Array-prototype" class="headerlink" title="Array.prototype"></a><code>Array.prototype</code></h2><p><strong>每一个函数，都有一个 prototype 属性</strong>，不管是你自定义的，还是函数内置的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn.prototype)  <span class="comment">// &#123;constructor: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(fn.prototype.constructor === fn)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c93f8c42?w=410&amp;h=206&amp;f=png&amp;s=18863" alt="image"></p><p>这里的 <code>fn.prototype</code> 打印出一个对象，对象里的 <code>constructor</code> 属性又指回了该函数本身 fn。</p><p>即<strong>每个原型都有一个 consctructor 属性指向关联的构造函数</strong>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span> === <span class="built_in">Array</span>.prototype.constructor <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9502534?w=417&amp;h=258&amp;f=png&amp;s=25521" alt="image"></p><p>我们接着看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype) <span class="comment">// [constructor: ƒ, concat: ƒ, copyWithin: ƒ, fill: ƒ, find: ƒ, …]</span></span><br></pre></td></tr></table></figure><p>这里，除了 constructor 属性，还有其他内置的属性，即我们经常使用的操作数组的方法。</p><h2 id="proto-隐式原型"><a href="#proto-隐式原型" class="headerlink" title="__proto__(隐式原型)"></a><code>__proto__</code>(隐式原型)</h2><p><strong>所有通过函数 <code>new</code> （构造函数）出来的东西，都有一个 <code>__proto__</code> 指向该函数的 <code>prototype</code></strong>，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">arr.__proto__ === <span class="built_in">Array</span>.prototype <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span> === <span class="built_in">Array</span>.prototype.constructor <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9690ff1?w=427&amp;h=333&amp;f=png&amp;s=32313" alt="image"></p><p>说白了，通过构造函数 new 出来的函数，该函数的<code>__proto__</code>属性指向构造函数的原型对象（即<code>Array.prototype</code>），所以，该函数与构造函数之间没有什么关联，是通过 原型对象 产生了联系，这也就是原型链继承的雏形吧。</p><p>举个关于继承 extends 的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> Dog()</span><br><span class="line"></span><br><span class="line">dog.eat()  <span class="comment">// Animal eat</span></span><br><span class="line">dog.bark()  <span class="comment">// Dog bark</span></span><br></pre></td></tr></table></figure><p>上面看明白了，那么ES6的继承我们也就可以明白原理了，即 <code>class Dog extends Animal</code> 相当于 <code>Dog.prototype = new Animal()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name) </span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)</span><br><span class="line">dog.eat()</span><br><span class="line">dog.bark()</span><br></pre></td></tr></table></figure><p>接下来，我们就清楚为什么能这样：</p><p><strong>当我们要使用一个对象（数组）的某个功能时，如果该对象本身具有这个功能，直接调用，没有的话，那就去自身的<code>__proto__</code>属性中去找</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  myfn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'myfn'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.myfn() <span class="comment">// 'myfn'</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">'myfn'</span>)  <span class="comment">//true</span></span><br><span class="line">obj.toString()  <span class="comment">// "[object Object]"</span></span><br><span class="line">obj.hasOwnProperty(<span class="string">'toString'</span>)  <span class="comment">// false</span></span><br><span class="line">obj.__proto__.hasOwnProperty(<span class="string">'toString'</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>hasOwnProperty()</code>就可以得出这个属性是否是属于该对象本身的属性:</p><ul><li>myfn 是我们自定义的，<code>obj.hasOwnProperty(&#39;myfn&#39;)</code>为 true</li><li>toString() 我们不是自定义的，却可以使用，查一下是否属于自定义属性，<code>obj.hasOwnProperty(&#39;toString&#39;)</code>，答案为false</li><li>既然不属于自定义属性，那就去自身的<code>__proto__</code>去找，然后去原型对象上查一下，<code>obj.__proto__.hasOwnProperty(&#39;toString&#39;)</code>，哦，原来在这儿</li></ul><p>在源码中，我们经常看到<code>Array.prototype.concat</code>，其实就是我们使用的<code>[].concat</code>，<code>[]</code>，因为<code>[].__proto__ === Array.prototype</code></p><h2 id="proto-是可修改的"><a href="#proto-是可修改的" class="headerlink" title="__proto__是可修改的"></a><code>__proto__</code>是可修改的</h2><p>比如，我们新增一个<code>addClass()</code>方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.__proto__.addClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br><span class="line">arr.push(<span class="number">4</span>);</span><br><span class="line">arr.addClass();   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9bd1a05?w=542&amp;h=407&amp;f=png&amp;s=46941" alt="image"></p><p>但是，这里要注意，如下重写之后，就没有了诸如 push、concat等方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr.__proto__ = &#123;</span><br><span class="line">    addClass: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">arr.push(<span class="number">3</span>)  <span class="comment">//Uncaught TypeError: arr.push is not a function</span></span><br></pre></td></tr></table></figure><h3 id="Object-prototype的原型"><a href="#Object-prototype的原型" class="headerlink" title="Object.prototype的原型"></a><code>Object.prototype</code>的原型</h3><p>万物皆对象，到最后依旧是对象，最后这个东东是个啥，我们来看一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数 Person</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例对象 myfn，它的 隐式原型 指向了其构造函数的 原型对象</span></span><br><span class="line"><span class="keyword">var</span> myfn = <span class="keyword">new</span> Person()</span><br><span class="line">myfn.__proto__ === Person.prototype  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那构造函数 Person 的 隐式原型又指向了谁呢</span></span><br><span class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function呐</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个呢</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">fn.prototype.__proto__ === <span class="built_in">Object</span>.prototype  <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>  <span class="comment">//"object"</span></span><br></pre></td></tr></table></figure></p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul><li><p>所有的函数都有一个 <code>prototype</code>属性，该属性指向了一个对象，该对象就是调用该构造函数而创建出来的实例（如myfn）的原型（如<code>myfn.__proto__</code>）,即：<code>myfn.__proto__ === Person.prototype</code></p></li><li><p>所有的对象（除null）都具有一个<code>__proto__</code>属性，该属性指向该对象的原型，比如：<code>myfn.__proto__ === Person.prototype</code></p></li><li><p>原型也是一个对象，根据上条，那原型的原型，就是<code>Object.prototype</code></p></li><li><p>最后的null对象，可以当做是 什么都没有</p></li></ul><p>盗一张图，我们就更加清楚了（蓝色这条表示的是原型链）<br><img src="https://user-gold-cdn.xitu.io/2019/2/25/169237e0c9a3b9c5?w=590&amp;h=525&amp;f=png&amp;s=40652" alt="image"></p><p>PS: 关于原型对象这一块本来就很绕，自己看懂了不一定就真的懂了，自己梳理的时候还是漏洞百出，而且还乱，就算现在我梳理了一遍，过些日子，我要是不再继续翻阅，应该又讲不通了，下面的资料很详细，在我学习的过程中提供了很大的帮助，在此感谢作者们！</p><p>参考资料：</p><ul><li><a href="https://www.kancloud.cn/wangfupeng/zepto-design-srouce/173684" target="_blank" rel="noopener">js原型链基础</a></li><li><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">JavaScript深入之从原型到原型链 </a></li><li><a href="https://www.cnblogs.com/wangfupeng1988/p/3978131.html" target="_blank" rel="noopener">深入理解javascript原型和闭包（3）——prototype原型</a></li></ul><p>同步于 <a href="https://juejin.im/post/5c73950651882562276c4bb2" target="_blank" rel="noopener">掘金</a> 、<a href="https://www.qdfuns.com/article.php?mod=view&amp;id=27061d05c8bcf1e650ddddc75ad9c127&amp;uid=32286" target="_blank" rel="noopener">QDfuns</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Array-prototype&quot;&gt;&lt;a href=&quot;#Array-prototype&quot; class=&quot;headerlink&quot; title=&quot;Array.prototype&quot;&gt;&lt;/a&gt;&lt;code&gt;Array.prototype&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;每一个函数，都有一个 prototype 属性&lt;/strong&gt;，不管是你自定义的，还是函数内置的。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fn.prototype)  &lt;span class=&quot;comment&quot;&gt;// &amp;#123;constructor: ƒ&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(fn.prototype.constructor === fn)  &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://istaotao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Debounce 和 Throttle</title>
    <link href="https://istaotao.com/2019/02/24/debounce-throttle/"/>
    <id>https://istaotao.com/2019/02/24/debounce-throttle/</id>
    <published>2019-02-24T15:49:33.000Z</published>
    <updated>2019-02-24T15:56:22.845Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.tuicool.com/articles/YvyQRrv" target="_blank" rel="noopener">Debounce 和 Throttle 的原理及实现</a><br><a id="more"></a></p><h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>如输入框时，只在最后提交的时候校验，即：将多次高频率操作优化为只在最后一次执行</p><p>思路：每次触发事件时，清除之前的定时器方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'in'</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(immediate &amp;&amp; !timer) &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(timer) clearTimeout(timer)</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'timer'</span>)</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">    &#125;, wait);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'被触发了'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>).onfocus = debounce(test, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>降低频率，每隔一段时间后执行一次，将高频率操作优化为低频率操作，如滚动条事件，resize事件</p><p>思路：每次触发事件时都判断当前是否有等待执行的延时函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throtte</span>(<span class="params">fn, wait, immediate</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">let</span> callNow = immediate</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">let</span> context = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(callNow) &#123;</span><br><span class="line">      fn.apply(context, args)</span><br><span class="line">      callNow = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!timer) &#123;</span><br><span class="line">      timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        fn.apply(context, args)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, throtte(test, <span class="number">1000</span>))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;a href=&quot;https://www.tuicool.com/articles/YvyQRrv&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Debounce 和 Throttle 的原理及实现&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://istaotao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>初探Class、继承、Promise 及 ES6 常用功能</title>
    <link href="https://istaotao.com/2019/02/24/es6-class/"/>
    <id>https://istaotao.com/2019/02/24/es6-class/</id>
    <published>2019-02-24T15:36:51.000Z</published>
    <updated>2019-03-13T14:01:13.870Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Class-语法糖"><a href="#Class-语法糖" class="headerlink" title="Class - 语法糖"></a>Class - 语法糖</h3><ul><li>Class 在语法上更贴合面向对象的写法</li><li>Class 实现继承更加易读、易理解</li><li>更易于写 java 等后端语言的使用</li><li>本质还是语法糖，使用 prototype</li></ul><a id="more"></a><h4 id="ES5中的写法"><a href="#ES5中的写法" class="headerlink" title="ES5中的写法"></a>ES5中的写法</h4><p>获取实例对象的原型对象<code>Object.getPrototypeOf(m2)</code></p><p>判断实例与构造函数的原型对象是否有关系<code>MathHandle2.prototype.isPrototypeOf(m2)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MathHandle2</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x</span><br><span class="line">  <span class="keyword">this</span>.y = y</span><br><span class="line">&#125;</span><br><span class="line">MathHandle2.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m2 = <span class="keyword">new</span> MathHandle2(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m2.add())</span><br><span class="line"><span class="built_in">console</span>.log(m2.__proto__ === MathHandle2.prototype)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例对象的原型对象Object.getPrototypeOf()</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(m2) === MathHandle2.prototype)  <span class="comment">//true</span></span><br><span class="line"><span class="comment">// 判断实例与构造函数的原型对象是否有关系isPrototypeOf()</span></span><br><span class="line"><span class="built_in">console</span>.log(MathHandle2.prototype.isPrototypeOf(m2))  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h4 id="ES6中的写法"><a href="#ES6中的写法" class="headerlink" title="ES6中的写法"></a>ES6中的写法</h4><p>对象实例的隐式原型（属性）指向构造函数的原型对象<code>m.__proto__ === MathHandle.prototype</code></p><p>构造函数的原型对象的constructor属性指回了构造函数本身<code>MathHandle.prototype.constructor === MathHandle</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MathHandle</span> </span>&#123;   <span class="comment">// 构造函数</span></span><br><span class="line">  <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">    <span class="keyword">this</span>.x = x</span><br><span class="line">    <span class="keyword">this</span>.y = y</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.x + <span class="keyword">this</span>.y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> MathHandle(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">console</span>.log(m.add())  <span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象实例的隐式原型（属性）指向构造函数的原型对象</span></span><br><span class="line"><span class="built_in">console</span>.log(m.__proto__ === MathHandle.prototype)  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的原型对象的constructor属性指回了构造函数本身</span></span><br><span class="line"><span class="built_in">console</span>.log(MathHandle.prototype.constructor === MathHandle)  <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.bark = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定原型，实现继承</span></span><br><span class="line">Dog.prototype = <span class="keyword">new</span> Animal()</span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> Dog()</span><br><span class="line">hashiqi.eat()  <span class="comment">// Animal eat</span></span><br><span class="line">hashiqi.bark()  <span class="comment">// Dog bark</span></span><br></pre></td></tr></table></figure><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  eat() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Animal eat!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name) </span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">  bark() &#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Dog bark!'</span> + <span class="keyword">this</span>.name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hashiqi = <span class="keyword">new</span> Dog(<span class="string">'哈士奇'</span>)</span><br><span class="line">hashiqi.eat()</span><br><span class="line">hashiqi.bark()</span><br></pre></td></tr></table></figure><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>new Promise 实例，而且要 return</li><li>new Promise 时要传入函数，函数有 resolve、reject 两个函数</li><li>成功时执行 resolve()，失败时执行 reject()</li><li>then 监听结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImg</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      resolve(img)</span><br><span class="line">    &#125;</span><br><span class="line">    img.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject()</span><br><span class="line">    &#125;</span><br><span class="line">    img.src = src</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> src1 = <span class="string">'https://img3.mukewang.com/5c611772085966af06000338-240-135.jpg'</span></span><br><span class="line">  <span class="keyword">var</span> src2 = <span class="string">'https://img2.mukewang.com/5c6b7cff08d6895906000338-240-135.jpg'</span></span><br><span class="line">  <span class="keyword">var</span> result1 = loadImg(src1)</span><br><span class="line">  <span class="keyword">var</span> result2 = loadImg(src2)</span><br><span class="line"></span><br><span class="line">  result1.then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一张图片'</span>, img.src)</span><br><span class="line">    <span class="keyword">return</span> result2  <span class="comment">//串联操作</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第二张图片'</span>, img.src)</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">ex</span>) </span>&#123;  <span class="comment">// 统一捕获错误信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(ex)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Promise.all 接受一个 promise 对象的数组，待全部完成之后，统一执行 success</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> result3 = loadImg(src1)</span><br><span class="line">  <span class="keyword">var</span> result4 = loadImg(src2)</span><br><span class="line">  <span class="built_in">Promise</span>.all([result3, result4]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Promise.race 接受一个包含多个 promise 对象的数组，只要有一个完成，就执行 success</span></span><br><span class="line">  <span class="built_in">Promise</span>.race([result3,result4]).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'race:'</span>, data)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="ES6常用功能"><a href="#ES6常用功能" class="headerlink" title="ES6常用功能"></a>ES6常用功能</h3><ul><li>let const</li><li>多行字符串、模板变量</li><li>解构赋值</li><li>块级作用域</li><li>函数默认参数</li><li>箭头函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let const</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">10</span>;</span><br><span class="line">i = <span class="number">20</span>;  <span class="comment">// Uncaught SyntaxError: Identifier 'i' has already been declared</span></span><br><span class="line"><span class="keyword">const</span> j = <span class="number">100</span></span><br><span class="line">j = <span class="number">20</span>  <span class="comment">// Uncaught TypeError: Assignment to constant variable.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多行字符串、模板变量</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'yangtao'</span>, age = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;name&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;<span class="subst">$&#123;age&#125;</span>&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结构赋值</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;a, b&#125; = obj</span><br><span class="line"><span class="comment">// 等同于（对象按照属性）</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">100</span>, <span class="attr">b</span>: <span class="number">200</span>&#125;</span><br><span class="line"><span class="keyword">var</span> a = obj.a,</span><br><span class="line">    b = obj.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="string">'xxx'</span>, <span class="string">'yyy'</span>, <span class="string">'zzz'</span>]</span><br><span class="line"><span class="keyword">const</span> [x, z] = arr</span><br><span class="line"><span class="comment">// 等同于(数组按照索引)</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'xxx'</span>, <span class="string">'yyy'</span>, <span class="string">'zzz'</span>]</span><br><span class="line"><span class="keyword">var</span> x = arr[<span class="number">0</span>],</span><br><span class="line">    z = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域</span></span><br><span class="line"><span class="keyword">const</span> myObj = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(_item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(item);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num</span>(<span class="params">a,b=<span class="number">0</span></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">num2</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> myarr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">myarr.map(<span class="function"><span class="params">item</span> =&gt;</span> item + <span class="number">1</span>)</span><br><span class="line">myarr.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> <span class="built_in">console</span>.log(item, index))</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> myarr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">myarr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line">myarr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">console</span>.log(item, index);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// this指向很诡异</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>)  <span class="comment">// real &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>)  <span class="comment">// window</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">10</span>&#125;)</span><br><span class="line"><span class="comment">// 使用箭头函数修改</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>)  <span class="comment">// real &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  arr.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>))  <span class="comment">// &#123;a: 10&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123;<span class="attr">a</span>: <span class="number">10</span>&#125;)</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'real'</span>, <span class="keyword">this</span>); <span class="comment">// real &#123;a: 10&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">  arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(_this);</span><br><span class="line">  &#125;); <span class="comment">// &#123;a: 10&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">fn.call(&#123; <span class="attr">a</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="关于-JS-众多模块化标准"><a href="#关于-JS-众多模块化标准" class="headerlink" title="关于 JS 众多模块化标准"></a>关于 JS 众多模块化标准</h3><ul><li>没有模块化</li><li>AMD成为标准，require.js(也有CMD)</li><li>前端打包工具，是node.js模块化可以被使用</li><li>ES6出现，想统一现在所有模块化标准</li><li>nodejs积极支持，浏览器尚未统一</li></ul><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><ul><li>语法：import export(注意有无default)</li><li>环境：babel编译 ES6 语法，模块化可用 webpack 和 rollup</li><li>扩展：对模块化标准统一的期待</li></ul><h3 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h3><ul><li>rollup 功能单一，webpack 功能强大</li><li>参考设计原则和《Linux/Unix设计思想》</li><li>工具要尽量功能单一，可集成，可扩展</li><li>gulp + rollup</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Class-语法糖&quot;&gt;&lt;a href=&quot;#Class-语法糖&quot; class=&quot;headerlink&quot; title=&quot;Class - 语法糖&quot;&gt;&lt;/a&gt;Class - 语法糖&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Class 在语法上更贴合面向对象的写法&lt;/li&gt;
&lt;li&gt;Class 实现继承更加易读、易理解&lt;/li&gt;
&lt;li&gt;更易于写 java 等后端语言的使用&lt;/li&gt;
&lt;li&gt;本质还是语法糖，使用 prototype&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="es6" scheme="https://istaotao.com/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>说一说常见的请求头和相应头都有什么呢</title>
    <link href="https://istaotao.com/2019/02/20/header-response/"/>
    <id>https://istaotao.com/2019/02/20/header-response/</id>
    <published>2019-02-20T11:51:25.000Z</published>
    <updated>2019-03-13T14:02:19.596Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-请求-客户端-gt-服务端-request"><a href="#1-请求-客户端-gt-服务端-request" class="headerlink" title="1.请求(客户端-&gt;服务端[request])"></a>1.请求(客户端-&gt;服务端[request])</h3><a id="more"></a><ul><li><code>GET(请求的方式) /newcoder/hello.html</code>(请求的目标资源) <code>HTTP/1.1</code>(请求采用的协议和版本号) </li><li><code>Accept: */*</code>(客户端能接收的资源类型) </li><li><code>Accept-Language: en-us</code>(客户端接收的语言类型) </li><li><code>Connection: Keep-Alive</code>(维护客户端和服务端的连接关系) </li><li><code>Host: localhost:8080</code>(连接的目标主机和端口号) </li><li><code>Referer: http://localhost/links.asp</code>(告诉服务器我来自于哪里) </li><li><code>User-Agent: Mozilla/4.0</code>(客户端版本号的名字) </li><li><code>Accept-Encoding: gzip, deflate</code>(客户端能接收的压缩数据的类型) </li><li><code>If-Modified-Since: Tue, 11 Jul 2000 18:23:51 GMT</code>(缓存时间)  </li><li><code>Cookie</code>(客户端暂存服务端的信息) </li><li><code>Date: Tue, 11 Jul 2000 18:23:51 GMT</code>(客户端请求服务端的时间)</li></ul><h3 id="2-响应-服务端-gt-客户端-response"><a href="#2-响应-服务端-gt-客户端-response" class="headerlink" title="2.响应(服务端-&gt;客户端[response])"></a>2.响应(服务端-&gt;客户端[response])</h3><ul><li><code>HTTP/1.1</code>(响应采用的协议和版本号) <code>200</code>(状态码) <code>OK</code>(描述信息)</li><li><code>Location: http://www.baidu.com</code>(服务端需要客户端访问的页面路径) </li><li><code>Server:apache tomcat</code>(服务端的Web服务端名)</li><li><code>Content-Encoding: gzip</code>(服务端能够发送压缩编码类型) </li><li><code>Content-Length: 80</code>(服务端发送的压缩数据的长度) </li><li><code>Content-Language: zh-cn</code>(服务端发送的语言类型) </li><li><code>Content-Type: text/html; charset=GB2312</code>(服务端发送的类型及采用的编码方式)</li><li><code>Last-Modified: Tue, 11 Jul 2000 18:23:51 GMT</code>(服务端对该资源最后修改的时间)</li><li><code>Refresh: 1;url=http://www.it315.org</code>(服务端要求客户端1秒钟后，刷新，然后访问指定的页面路径)</li><li><code>Content-Disposition: attachment; filename=aaa.zip</code>(服务端要求客户端以下载文件的方式打开该文件)</li><li><code>Transfer-Encoding: chunked</code>(分块传递数据到客户端）  </li><li><code>Set-Cookie:SS=Q0=5Lb_nQ; path=/search</code>(服务端发送到客户端的暂存数据)</li><li><code>Expires: -1</code>//3种(服务端禁止客户端缓存页面数据)</li><li><code>Cache-Control: no-cache</code>(服务端禁止客户端缓存页面数据)  </li><li><code>Pragma: no-cache</code>(服务端禁止客户端缓存页面数据)   </li><li><code>Connection: close(1.0)/(1.1)Keep-Alive</code>(维护客户端和服务端的连接关系)  </li><li><code>Date: Tue, 11 Jul 2000 18:23:51 GMT</code>(服务端响应客户端的时间)</li></ul><blockquote><p>在服务器响应客户端的时候，带上<code>Access-Control-Allow-Origin</code>头信息，解决跨域的一种方法。</p></blockquote><p>原文地址：<a href="https://www.nowcoder.com/test/question/done?tid=21233299&amp;qid=55682#summary" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-请求-客户端-gt-服务端-request&quot;&gt;&lt;a href=&quot;#1-请求-客户端-gt-服务端-request&quot; class=&quot;headerlink&quot; title=&quot;1.请求(客户端-&amp;gt;服务端[request])&quot;&gt;&lt;/a&gt;1.请求(客户端-&amp;gt;服务端[request])&lt;/h3&gt;
    
    </summary>
    
      <category term="网络知识" scheme="https://istaotao.com/categories/%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="http" scheme="https://istaotao.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>关于闭包的一道面试题</title>
    <link href="https://istaotao.com/2019/02/19/js-closure/"/>
    <id>https://istaotao.com/2019/02/19/js-closure/</id>
    <published>2019-02-19T09:57:37.000Z</published>
    <updated>2019-02-19T10:10:49.967Z</updated>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.nowcoder.com/questionTerminal/da4115e308c948169a9a73e50d09a3e7?toCommentId=2555046" target="_blank" rel="noopener">依次点击4个li标签，哪一个选项是正确的运行结果</a></p><a id="more"></a><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>现有如下html结构：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>依次点击4个li标签，运行结果是什么<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elements=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">  <span class="keyword">var</span> length=elements.length;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">      elements[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="回答（依次弹出4，4，4，4）"><a href="#回答（依次弹出4，4，4，4）" class="headerlink" title="回答（依次弹出4，4，4，4）"></a>回答（依次弹出4，4，4，4）</h3><p>以下是我当时在牛客网回答时从《JavaScript高级程序设计》书中抄的：</p><blockquote><p>这是由于作用域链的这种配置机制引出的一个副作用，即闭包只能取得包含函数中任何变量的最后一个值。闭包所保存的是整个变量对象，而不是某个特殊的变量。</p></blockquote><p>这里的闭包函数<code>elements[i].onclick=function(){alert(i);}</code>的作用域链中保存着闭包的活动对象（这里为空）和全局变量对象（主要是i）,所以，它们引用的是同一个变量i；当点击完成后，变量i=4,也就是每个内部函数i的值都是4；</p><p>可以通过创建另一个匿名函数强制让闭包的行为符合预期：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload  = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> elements=<span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span><br><span class="line">    <span class="keyword">var</span> length=elements.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">        elements[i].onclick=<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(num);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在调用匿名函数时，我们传入变量i，由于参数是按值传递的，所以就会将变量i的当前值复制给参数num。而这个匿名函数内部，又创建并alert了一个访问num的闭包。这样，每一次点击都有num变量的一个副本，因此可以返回各自不同的数值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文地址：&lt;a href=&quot;https://www.nowcoder.com/questionTerminal/da4115e308c948169a9a73e50d09a3e7?toCommentId=2555046&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;依次点击4个li标签，哪一个选项是正确的运行结果&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://istaotao.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://istaotao.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Node.js+Express+MongoDB 建站实例</title>
    <link href="https://istaotao.com/2019/02/17/node-express/"/>
    <id>https://istaotao.com/2019/02/17/node-express/</id>
    <published>2019-02-16T16:36:20.000Z</published>
    <updated>2019-03-13T14:05:59.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实例目录"><a href="#实例目录" class="headerlink" title="实例目录"></a>实例目录</h2><ul><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-01-init.md" target="_blank" rel="noopener">网站初始化，实现 GET 和 POST 的 Ajax 请求</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">登录模块</a></li><li><a href="https://github.com/yangtao2o/node-express-mongodb/blob/master/doc/doc-02-login.md" target="_blank" rel="noopener">上传图片模块</a></li></ul><blockquote><p>原文地址：<a href="https://github.com/jiaoyanlin/myNodeProject" target="_blank" rel="noopener">Node.js+Express+MongoDB 建站实例</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;实例目录&quot;&gt;&lt;a href=&quot;#实例目录&quot; class=&quot;headerlink&quot; title=&quot;实例目录&quot;&gt;&lt;/a&gt;实例目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/yangtao2o/node-express-mongo
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://istaotao.com/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://istaotao.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Vue经典实例 ToDoList</title>
    <link href="https://istaotao.com/2019/02/17/vue-todolist/"/>
    <id>https://istaotao.com/2019/02/17/vue-todolist/</id>
    <published>2019-02-16T16:25:43.000Z</published>
    <updated>2019-03-13T14:06:15.971Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用webpack构建一个vue的简易开发环境并添加一个Todo demo</p></blockquote><h3 id="ToDoList"><a href="#ToDoList" class="headerlink" title="ToDoList"></a>ToDoList</h3><h4 id="传送门：Demo-amp-amp-Github"><a href="#传送门：Demo-amp-amp-Github" class="headerlink" title="传送门：Demo &amp;&amp; Github"></a>传送门：<a href="https://istaotao.com/todo/dist/">Demo</a> &amp;&amp; <a href="https://github.com/yangtao2o/todo" target="_blank" rel="noopener">Github</a></h4><a id="more"></a><p>下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/todo.git</span><br></pre></td></tr></table></figure></p><p>下载依赖：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>本地运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p>访问地址：<code>http://localhost:8000</code></p><p>生产运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用webpack构建一个vue的简易开发环境并添加一个Todo demo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;ToDoList&quot;&gt;&lt;a href=&quot;#ToDoList&quot; class=&quot;headerlink&quot; title=&quot;ToDoList&quot;&gt;&lt;/a&gt;ToDoList&lt;/h3&gt;&lt;h4 id=&quot;传送门：Demo-amp-amp-Github&quot;&gt;&lt;a href=&quot;#传送门：Demo-amp-amp-Github&quot; class=&quot;headerlink&quot; title=&quot;传送门：Demo &amp;amp;&amp;amp; Github&quot;&gt;&lt;/a&gt;传送门：&lt;a href=&quot;https://istaotao.com/todo/dist/&quot;&gt;Demo&lt;/a&gt; &amp;amp;&amp;amp; &lt;a href=&quot;https://github.com/yangtao2o/todo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="前端框架" scheme="https://istaotao.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="https://istaotao.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>《Vue.js实战》之前端路由与vue-router</title>
    <link href="https://istaotao.com/2019/02/04/vue-router/"/>
    <id>https://istaotao.com/2019/02/04/vue-router/</id>
    <published>2019-02-04T03:23:17.000Z</published>
    <updated>2019-03-13T14:06:11.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前端路由与-vue-router"><a href="#前端路由与-vue-router" class="headerlink" title="前端路由与 vue-router"></a>前端路由与 vue-router</h3><a id="more"></a><h4 id="什么是前端路由"><a href="#什么是前端路由" class="headerlink" title="什么是前端路由"></a>什么是前端路由</h4><blockquote><p>每次 GET 或者 POST 请求在服务端有一个专门的正则配置列表，然后匹配到具体的一条路径后，分发到不同的 Controller，进行各种操作，最终将 html 或数据返回给前端，这就完成了一次 IO。</p></blockquote><p>前端路由的实现有两种：</p><ul><li>URL的hash，即锚点（#），js 通过 hashChange 事件监听 url 的变化</li><li>HTML5 的 History 模式</li></ul><p>优点：</p><ul><li>页面持久性，如音乐网站</li><li>前后端彻底分离，如 Angular 的 ngRouter，React 的 ReactRouter，还有 Vue 的 vue-router</li></ul><p>需要考虑的问题：</p><ul><li>页面的拔插性</li><li>页面的生命周期</li><li>内存管理等</li></ul><h4 id="vue-router-基本用法"><a href="#vue-router-基本用法" class="headerlink" title="vue-router 基本用法"></a>vue-router 基本用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建目录 router</span></span><br><span class="line"><span class="comment"># 安装 vue-router</span></span><br><span class="line">npm i -S vue-router</span><br><span class="line"></span><br><span class="line"><span class="comment"># index.js添加</span></span><br><span class="line">import VueRouter from <span class="string">'vue-router'</span>;</span><br><span class="line">Vue.use(VueRouter);</span><br></pre></td></tr></table></figure><p>在目录 router 新建 views 目录，接着新建 about.vue、 index.vue、 user.vue等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> Routers = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/index'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../router/views/index.vue'</span>], resolve)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    component: <span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">require</span>([<span class="string">'../router/views/about.vue'</span>], resolve)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    redirect: <span class="string">'../index'</span>  <span class="comment">// 404指向首页</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> RouterConfig = &#123;</span><br><span class="line">  <span class="comment">// 使用HTML5的history路由模式</span></span><br><span class="line">  mode: <span class="string">'history'</span>,</span><br><span class="line">  routes: Routers</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(RouterConfig);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router: router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(root);</span><br></pre></td></tr></table></figure><p>路由模式通过HTML5的History路由模式，通过 ‘/’设置路径。修改package.json:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "dev": "webpack-dev-server --config webpack.config.js --mode=development --history-api-fallback"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>增加了 <code>--history-api-fallback</code>，所有的路由都指向<code>index.html</code>。</p><p>然后在根实例<code>App.vue</code>中添加<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p><h4 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h4><p>vue-router 有两种跳转页面的方式：</p><ul><li><code>&lt;router-link&gt;</code>组件，会渲染成 <code>&lt;a&gt;</code> 标签，如：<code>&lt;router-link to=&quot;/about&quot;&gt;跳转到 about&lt;/router-link&gt;</code><ul><li>tag : <code>tag=&quot;li&quot;</code> 标签会被渲染成指定的 <code>&lt;li&gt;</code></li><li>replace : 无历史记录</li><li>active-class</li></ul></li><li>使用router实例： <code>$router</code> 方法，如：<code>this.$router.push(&#39;/index&#39;);</code><ul><li>replace : <code>this.$router.replace(&#39;/index&#39;)</code>;</li><li>go : <code>this.$router.go(-1)</code>;<h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><blockquote><p>问题：如何在SPA项目中，修改网页的标题？</p></blockquote></li></ul></li></ul><p>一般我们是通过<code>window.document.title = &#39;标题&#39;</code>来修改，但是在什么时候修改，这是个问题。</p><p>vue-router 提供了导航钩子 <code>beforeEach()</code> 和 <code>afterEach()</code>，它们会在路由即将改变前和改变后触发。</p><p>这样就解决了页面众多，维护麻烦的问题。（mounted钩子）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 从路由对象 to 里获取 meta 信息</span></span><br><span class="line">  <span class="built_in">window</span>.document.title = to.meta.title;</span><br><span class="line">  <span class="comment">// 判断页面是否登录</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">window</span>.localStorage.getItem(<span class="string">'token'</span>)) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    next(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 页面跳转回来滚动条默认在顶端</span></span><br><span class="line">  <span class="built_in">window</span>.scroll(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="状态管理与-Vuex"><a href="#状态管理与-Vuex" class="headerlink" title="状态管理与 Vuex"></a>状态管理与 Vuex</h3><h4 id="状态管理与使用场景"><a href="#状态管理与使用场景" class="headerlink" title="状态管理与使用场景"></a>状态管理与使用场景</h4><p>组件的基本运行模式：一个组件分为数据和视图，数据更新时，视图也跟着更新…视图中又可以绑定一些事件，它们触发methods里指定的方法，从而可以改变数据、更新视图。</p><p>如果需要跨组件共享数据的需求，那就需要借助 Vuex 来管理组件状态。</p><h4 id="Vuex-基本用法"><a href="#Vuex-基本用法" class="headerlink" title="Vuex 基本用法"></a>Vuex 基本用法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S vuex</span><br></pre></td></tr></table></figure><h4 id="高级用法-1"><a href="#高级用法-1" class="headerlink" title="高级用法"></a>高级用法</h4><h3 id="实战：中央事件总线插件-vue-bus-loading…"><a href="#实战：中央事件总线插件-vue-bus-loading…" class="headerlink" title="实战：中央事件总线插件 vue-bus(loading…)"></a>实战：中央事件总线插件 vue-bus(loading…)</h3><blockquote><p><a href="https://github.com/yangtao2o/vue-webpack-iview" target="_blank" rel="noopener">练习地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前端路由与-vue-router&quot;&gt;&lt;a href=&quot;#前端路由与-vue-router&quot; class=&quot;headerlink&quot; title=&quot;前端路由与 vue-router&quot;&gt;&lt;/a&gt;前端路由与 vue-router&lt;/h3&gt;
    
    </summary>
    
      <category term="前端框架" scheme="https://istaotao.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue-router" scheme="https://istaotao.com/tags/vue-router/"/>
    
  </entry>
  
  <entry>
    <title>《Vue.js实战》之使用webpack</title>
    <link href="https://istaotao.com/2019/02/04/vue-webpack/"/>
    <id>https://istaotao.com/2019/02/04/vue-webpack/</id>
    <published>2019-02-04T03:22:59.000Z</published>
    <updated>2019-03-13T14:00:11.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用-webpack"><a href="#使用-webpack" class="headerlink" title="使用 webpack"></a>使用 webpack</h3><a id="more"></a><h4 id="前端工程化与webpack"><a href="#前端工程化与webpack" class="headerlink" title="前端工程化与webpack"></a>前端工程化与webpack</h4><p>前端工程化主要解决的问题：</p><ul><li>JavaScript、css 代码的合并与压缩</li><li>CSS 预处理：Less、Sass、Stylus 的编译</li><li>生成雪碧图</li><li>ES6 -&gt; ES5</li><li>模块化等</li></ul><p>webpack 的主要使用场景是<code>单页面富应用（SPA）</code>，将一些诸如：typescript、less、jpg、vue等格式的文件通过特定的<code>加载器（Loader）</code>编译后，最终统一生成 .js、.css、.png等静态资源文件。</p><p>如何文件都可称为是一个模块。webpack就是处理模块间的依赖关系，并把他们进行打包。</p><h3 id="webpack-基础配置"><a href="#webpack-基础配置" class="headerlink" title="webpack 基础配置"></a>webpack 基础配置</h3><h4 id="安装-webpack-与-webpack-dev-server"><a href="#安装-webpack-与-webpack-dev-server" class="headerlink" title="安装 webpack 与 webpack-dev-server"></a>安装 webpack 与 webpack-dev-server</h4><p>初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init  </span><br><span class="line"><span class="comment"># 按照提示一步步往下走</span></span><br></pre></td></tr></table></figure></p><p>本地局部安装 webpack:（书中是v2，我的需要下载脚手架 -cli）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack --save-dev</span><br><span class="line">npm i -D webpack-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会多出下面一项“</span></span><br><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"webpack"</span>: <span class="string">"^4.28.4"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>安装 <code>webpack-dev-server</code>，可以启动一个服务器、热更新、接口代理等<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure></p><p>最终的 package.json 文件内容如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"vue-webpack-iview"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"学习《Vue.js实战》之进阶篇"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"git+https://github.com/yangtao2o/vue-webpack-iview.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"vue"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"iview"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"yangtao"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"bugs"</span>: &#123;</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/yangtao2o/vue-webpack-iview/issues"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/yangtao2o/vue-webpack-iview#readme"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.28.4"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.1.14"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="就是一个-js-文件而已"><a href="#就是一个-js-文件而已" class="headerlink" title="就是一个 js 文件而已"></a>就是一个 js 文件而已</h4><p>创建 <code>webpack.config.js</code>，并初始化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p>接着，在 package.json 里配置启动项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">  "dev": "webpack-dev-server --open --config webpack.config.js --mode=development"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// --open：会在启动服务时自动打开浏览器</span><br><span class="line">// --config：指向 webpack-dev-server 读取的配置文件路径</span><br><span class="line">// --host --port：可配置 IP 和端口，如：--host 172.172.172.1 --port 8888</span><br><span class="line">// --mode=development：需要说明是什么环境，不然会显示警告</span><br></pre></td></tr></table></figure><p>webpack 的入口（Entry）和出口（Output），重中之重，新建 <code>main.js</code>，并在 <code>webpack.config.js</code> 中进行入口和输出的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: &apos;./main&apos;  // 入口文件为 main.js</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, &apos;./dist&apos;),  // 输出目录</span><br><span class="line">    publicPath: &apos;./dist&apos;,  //指定资源文件引用的目录</span><br><span class="line">    filename: &apos;main.js&apos;  // 指定输出文件的名称</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = config;</span><br></pre></td></tr></table></figure></p><p>然后：<code>npm run dev</code>，浏览器会自动打开页面了。</p><h4 id="逐步完善配置文件"><a href="#逐步完善配置文件" class="headerlink" title="逐步完善配置文件"></a>逐步完善配置文件</h4><p>webpack 对于不同的模块需要不同的加载器来处理，通过安装不同的加载器，就可以对各种后缀名的文件进行处理。</p><p>如处理 .css 文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># css</span></span><br><span class="line">npm install css-loader --save-dev</span><br><span class="line">npm install style-loader --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># rules 属性中可以指定一系列的 loaders</span></span><br><span class="line"><span class="comment"># 每一个 loader 都必须包含 test 和 use </span></span><br><span class="line"><span class="comment"># 处理名为 .css 的文件时，先通过 css-loader 转换，再通过 style-loader 转换，然后继续打包</span></span><br><span class="line">module: &#123;</span><br><span class="line">  rules: [  </span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">test</span>: <span class="string">'/\.css$/'</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        <span class="string">'css-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在实际的业务中，需要使用插件 <code>extract-text-webpack-plugin</code> 把各处的css文件提取出来。，并生成一个 main.css 文件，最终在 index.html 里加载它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install extract-text-webpack-plugin@next --save-dev</span><br></pre></td></tr></table></figure><p>config<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="string">'/\.css$/'</span>,</span><br><span class="line">      use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: <span class="string">'css-loader'</span>,</span><br><span class="line">        fallback: <span class="string">'style-loader'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'main.css'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="单文件组件与-vue-loader"><a href="#单文件组件与-vue-loader" class="headerlink" title="单文件组件与 vue-loader"></a>单文件组件与 vue-loader</h3><p>安装加载器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev vue vue-loader vue-style-loader</span><br><span class="line">npm install --save-dev vue-template-compiler</span><br><span class="line">npm install --save-dev vue-hot-reload-api</span><br><span class="line">npm i -D babel babel-loader</span><br><span class="line">npm i -D @babel/core</span><br><span class="line">npm i -D @babel/preset-env</span><br></pre></td></tr></table></figure></p><p>配置：<br><a href="https://www.babeljs.cn/docs/setup/#installation" target="_blank" rel="noopener">Babel-loader</a>、<a href="https://vue-loader.vuejs.org/zh/guide/" target="_blank" rel="noopener">Vue-loader</a></p><h4 id="结合自己配置的过程中关于版本冲突的解决办法"><a href="#结合自己配置的过程中关于版本冲突的解决办法" class="headerlink" title="结合自己配置的过程中关于版本冲突的解决办法"></a>结合自己配置的过程中关于版本冲突的解决办法</h4><p>参考：<a href="https://blog.csdn.net/weixin_40814356/article/details/80625747" target="_blank" rel="noopener">webpack4配置vue环境和一些小坑</a></p><p>主要修改：</p><ul><li><p>index.js(之前的 <code>main.js</code>，目录也放在了<code>/src/</code>下)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(root);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(root);</span><br></pre></td></tr></table></figure></li><li><p>App.vue</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Hello &#123;&#123; name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        name: <span class="string">'Vue.js'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>package.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --config webpack.config.js --mode=development"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"webpack --progress --hide-modules --mode=production"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"@babel/core"</span>: <span class="string">"^7.2.2"</span>,</span><br><span class="line">  <span class="string">"@babel/preset-env"</span>: <span class="string">"^7.2.3"</span>,</span><br><span class="line">  <span class="string">"babel"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">  <span class="string">"babel-loader"</span>: <span class="string">"^8.0.5"</span>,</span><br><span class="line">  <span class="string">"css-loader"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">  <span class="string">"extract-text-webpack-plugin"</span>: <span class="string">"^4.0.0-beta.0"</span>,</span><br><span class="line">  <span class="string">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">  <span class="string">"vue"</span>: <span class="string">"^2.5.22"</span>,</span><br><span class="line">  <span class="string">"vue-hot-reload-api"</span>: <span class="string">"^2.3.1"</span>,</span><br><span class="line">  <span class="string">"vue-loader"</span>: <span class="string">"^15.5.1"</span>,</span><br><span class="line">  <span class="string">"vue-style-loader"</span>: <span class="string">"^4.1.2"</span>,</span><br><span class="line">  <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.5.22"</span>,</span><br><span class="line">  <span class="string">"webpack"</span>: <span class="string">"^4.28.4"</span>,</span><br><span class="line">  <span class="string">"webpack-cli"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">  <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.1.14"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> VueLoaderPlugin = <span class="built_in">require</span>(<span class="string">'vue-loader/lib/plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: path.join(__dirname, <span class="string">'./src/index.js'</span>),</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'./dist'</span>),  <span class="comment">// 输出目录</span></span><br><span class="line">    publicPath: <span class="string">'/dist'</span>,  <span class="comment">//指定资源文件引用的目录</span></span><br><span class="line">    filename: <span class="string">'main.js'</span>  <span class="comment">// 指定输出文件的名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          loaders: &#123;</span><br><span class="line">            css: ExtractTextPlugin.extract(&#123;</span><br><span class="line">              use: <span class="string">'css-loader'</span>,</span><br><span class="line">              fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">          use: <span class="string">'css-loader'</span>,</span><br><span class="line">          fallback: <span class="string">'style-loader'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> VueLoaderPlugin(),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'main.css'</span>),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>.babelrc</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [<span class="string">"@babel/preset-env"</span>],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"@babel/plugin-transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./dist/main.css"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/main.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="用于生产环境-loading…"><a href="#用于生产环境-loading…" class="headerlink" title="用于生产环境(loading…)"></a>用于生产环境(loading…)</h3><blockquote><p><a href="https://github.com/yangtao2o/vue-webpack-iview" target="_blank" rel="noopener">练习地址</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用-webpack&quot;&gt;&lt;a href=&quot;#使用-webpack&quot; class=&quot;headerlink&quot; title=&quot;使用 webpack&quot;&gt;&lt;/a&gt;使用 webpack&lt;/h3&gt;
    
    </summary>
    
      <category term="前端框架" scheme="https://istaotao.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="https://istaotao.com/tags/vue/"/>
    
      <category term="webpack" scheme="https://istaotao.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>页面滑动时的动画插件 WOW.js</title>
    <link href="https://istaotao.com/2019/02/04/wow/"/>
    <id>https://istaotao.com/2019/02/04/wow/</id>
    <published>2019-02-04T03:16:42.000Z</published>
    <updated>2019-03-13T14:12:47.550Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>当初次加载页面的时候，需要一些动画渐入，并且当滑动到当前内容时也会出现动画，之后就恢复正常，所以就用到了 <code>WOW.js</code>。</p></blockquote><p>比如：<a href="https://www.rt-thread.org/" target="_blank" rel="noopener">RT-Thread</a></p><p>再比如设计师必备：<a href="https://www.sketchapp.com/" target="_blank" rel="noopener">sketchapp</a></p><a id="more"></a><h3 id="WOW-js"><a href="#WOW-js" class="headerlink" title="WOW.js"></a>WOW.js</h3><p>文档：<a href="https://www.delac.io/wow/index.html" target="_blank" rel="noopener">WOW</a></p><h3 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h3><p>模拟：<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate</a></p><p><code>animate.css</code> 包含了一组炫酷、有趣、跨浏览器的动画，可以在你的项目中直接使用。</p><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/animate.css/3.7.0/animate.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/wow/1.1.2/wow.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>文档：<a href="https://www.delac.io/wow/docs.html" target="_blank" rel="noopener">Setup WOW.js</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```html</span><br><span class="line">&lt;div class=&quot;wow bounceInUp&quot;  data-wow-duration=&quot;2s&quot; data-wow-delay=&quot;5s&quot;&gt;</span><br><span class="line">    Content to Reveal Here</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new WOW().init();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>ps：初始加载页面的时候，很有可能会出现内容再动画渲染，所以直接设置：<br><code>`</code>css<br>.wow {<br>    visibility: hidden;<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;当初次加载页面的时候，需要一些动画渐入，并且当滑动到当前内容时也会出现动画，之后就恢复正常，所以就用到了 &lt;code&gt;WOW.js&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如：&lt;a href=&quot;https://www.rt-thread.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RT-Thread&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再比如设计师必备：&lt;a href=&quot;https://www.sketchapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sketchapp&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="https://istaotao.com/categories/css/"/>
    
    
      <category term="css" scheme="https://istaotao.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>npm run 报错：getaddrinfo ENOTFOUND localhost</title>
    <link href="https://istaotao.com/2019/01/13/localhost/"/>
    <id>https://istaotao.com/2019/01/13/localhost/</id>
    <published>2019-01-13T03:42:37.000Z</published>
    <updated>2019-03-13T14:04:16.158Z</updated>
    
    <content type="html"><![CDATA[<p>安装 Angular 的时候，启动 <code>ng serve --open</code>，报错如下：<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  my-app git:(master) ng serve</span><br><span class="line">getaddrinfo ENOTFOUND localhost</span><br><span class="line">Error: getaddrinfo ENOTFOUND localhost</span><br><span class="line">    at errnoException (dns.js:50:10)</span><br><span class="line">    at GetAddrInfoReqWrap.onlookup [as oncomplete] (dns.js:92:26)</span><br></pre></td></tr></table></figure></p><p>查了一下自己的hosts，原来我把默认的host给关掉了，重新启动即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1localhost</span><br><span class="line">255.255.255.255broadcasthost</span><br><span class="line">::1             localhost</span><br></pre></td></tr></table></figure><p>重新 <code>ng serve --open</code>，然后：<code>ℹ ｢wdm｣: Compiled successfully.</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;安装 Angular 的时候，启动 &lt;code&gt;ng serve --open&lt;/code&gt;，报错如下：&lt;br&gt;
    
    </summary>
    
      <category term="前端框架" scheme="https://istaotao.com/categories/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="报错" scheme="https://istaotao.com/tags/%E6%8A%A5%E9%94%99/"/>
    
      <category term="Angular" scheme="https://istaotao.com/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Windows下Node.js 多版本管理器-Gnvm</title>
    <link href="https://istaotao.com/2018/12/21/Windows%E4%B8%8BNode-js-%E5%A4%9A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%99%A8-Gnvm/"/>
    <id>https://istaotao.com/2018/12/21/Windows下Node-js-多版本管理器-Gnvm/</id>
    <published>2018-12-21T13:40:59.000Z</published>
    <updated>2019-03-13T14:06:41.009Z</updated>
    
    <content type="html"><![CDATA[<p>我们在平时的项目开发中，经常需要指定 Node 的版本，所有版本控制管理，就很有必要，需要哪个切哪个。<br><a id="more"></a></p><h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><p>主要有 <code>n</code> 和 <code>nvm</code>,具体可以自行百度，查之，用之</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输入 n ,然后回车，可上下选择版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版/稳定版</span></span><br><span class="line">n latest/stable</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line">n rm 8.11.3</span><br></pre></td></tr></table></figure><h4 id="主要安利-Windows下的-gnvm"><a href="#主要安利-Windows下的-gnvm" class="headerlink" title="主要安利 Windows下的 gnvm"></a>主要安利 Windows下的 gnvm</h4><p>官方地址：<a href="https://github.com/kenshin/gnvm" target="_blank" rel="noopener">GNVM - Node.js 多版本管理器</a></p><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 git bash，其它下载方式如 go、curl等可查看官方文档</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:Kenshin/gnvm-bin.git</span><br></pre></td></tr></table></figure><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>将解压后的 <code>gnvm.exe</code> 保存到 <code>node.js</code> 所在的文件夹下，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\nodejs</span><br></pre></td></tr></table></figure></p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>管理员身份进入 <code>cmd</code>，输入 <code>gnvm version</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm version</span><br><span class="line">Current version 0.2.0 64 bit.</span><br><span class="line">Copyright (C) 2014-2016 Kenshin Wang &lt;kenshin@ksria.com&gt;</span><br><span class="line">See https://github.com/kenshin/gnvm <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure></p><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm config</span><br><span class="line">Waring: config file C:\Program Files\nodejs\\.gnvmrc is not exist.</span><br><span class="line">Notice: Config file C:\Program Files\nodejs\\.gnvmrc create success.</span><br><span class="line">Notice: config file path C:\Program Files\nodejs\\.gnvmrc</span><br><span class="line">gnvm config registry is http://nodejs.org/dist/</span><br><span class="line">gnvm config noderoot is C:\Program Files\nodejs\</span><br><span class="line">gnvm config globalversion is 10.14.2-x86</span><br><span class="line">gnvm config latestversion is unknown</span><br></pre></td></tr></table></figure><h5 id="查询需要下载的-node-版本"><a href="#查询需要下载的-node-版本" class="headerlink" title="查询需要下载的 node 版本"></a>查询需要下载的 node 版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm search 8.*.*</span><br><span class="line">Search Node.js version rules [8.*.*] from http://nodejs.org/dist/index.json, please <span class="built_in">wait</span>.</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">| No.   date         node ver    <span class="built_in">exec</span>      npm ver |</span><br><span class="line">+--------------------------------------------------+</span><br><span class="line">  1     2018-12-18   8.14.1      x86 x64   6.4.1</span><br><span class="line">  2     2018-11-27   8.14.0      x86 x64   6.4.1</span><br><span class="line">  3     2018-11-20   8.13.0      x86 x64   6.4.1</span><br><span class="line">  4     2018-09-10   8.12.0      x86 x64   6.4.1</span><br><span class="line">  5     2018-08-15   8.11.4      x86 x64   5.6.0</span><br><span class="line">  6     2018-06-12   8.11.3      x86 x64   5.6.0</span><br><span class="line">  7     2018-05-15   8.11.2      x86 x64   5.6.0</span><br><span class="line">  8     2018-03-29   8.11.1      x86 x64   5.6.0</span><br><span class="line">  9     2018-03-28   8.11.0      x86 x64   5.6.0</span><br><span class="line">  10    2018-03-06   8.10.0      x86 x64   5.6.0</span><br><span class="line">  11    2018-01-02   8.9.4       x86 x64   5.6.0</span><br><span class="line">  12    2017-12-07   8.9.3       x86 x64   5.5.1</span><br><span class="line">  13    2017-12-05   8.9.2       x86 x64   5.5.1</span><br><span class="line">  14    2017-11-07   8.9.1       x86 x64   5.5.1</span><br><span class="line">  15    2017-10-31   8.9.0       x86 x64   5.5.1</span><br><span class="line">  16    2017-10-25   8.8.1       x86 x64   5.4.2</span><br><span class="line">  17    2017-10-24   8.8.0       x86 x64   5.4.2</span><br><span class="line">  18    2017-10-11   8.7.0       x86 x64   5.4.2</span><br><span class="line">  19    2017-09-26   8.6.0       x86 x64   5.3.0</span><br><span class="line">  20    2017-09-12   8.5.0       x86 x64   5.3.0</span><br><span class="line">  21    2017-08-15   8.4.0       x86 x64   5.3.0</span><br><span class="line">  22    2017-08-08   8.3.0       x86 x64   5.3.0</span><br><span class="line">  23    2017-07-20   8.2.1       x86 x64   5.3.0</span><br><span class="line">  24    2017-07-19   8.2.0       x86 x64   5.3.0</span><br><span class="line">  25    2017-07-11   8.1.4       x86 x64   5.0.3</span><br><span class="line">  26    2017-06-29   8.1.3       x86 x64   5.0.3</span><br><span class="line">  27    2017-06-15   8.1.2       x86 x64   5.0.3</span><br><span class="line">  28    2017-06-13   8.1.1       x86 x64   5.0.3</span><br><span class="line">  29    2017-06-08   8.1.0       x86 x64   5.0.3</span><br><span class="line">  30    2017-05-30   8.0.0       x86 x64   5.0.0</span><br><span class="line">+--------------------------------------------------+</span><br></pre></td></tr></table></figure><h5 id="下载帮助文档"><a href="#下载帮助文档" class="headerlink" title="下载帮助文档"></a>下载帮助文档</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm <span class="built_in">help</span> node-version</span><br><span class="line">Show and fix [global] [latest] Node.js version e.g. :</span><br><span class="line">gnvm node-version            :Show Node.js global and latest version, and fix it.</span><br><span class="line">gnvm node-version latest     :Show Node.js latest version, and fix it.</span><br><span class="line">gnvm node-version global     :Show Node.js global version, and fix it.</span><br></pre></td></tr></table></figure><h5 id="下载node"><a href="#下载node" class="headerlink" title="下载node"></a>下载node</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm install 8.11.3 --global</span><br></pre></td></tr></table></figure><h5 id="查看已下载的版本列表"><a href="#查看已下载的版本列表" class="headerlink" title="查看已下载的版本列表"></a>查看已下载的版本列表</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm ls</span><br><span class="line">Notice: gnvm.exe root is C:\Program Files\nodejs\\</span><br><span class="line">v10.14.2 -- x86</span><br><span class="line">v8.11.2</span><br><span class="line">v8.11.3 -- global</span><br></pre></td></tr></table></figure><h5 id="使用指定版本"><a href="#使用指定版本" class="headerlink" title="使用指定版本"></a>使用指定版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;gnvm use 8.11.3</span><br><span class="line">Set success, global Node.js version is 8.11.3.</span><br></pre></td></tr></table></figure><h5 id="查看当前Node版本"><a href="#查看当前Node版本" class="headerlink" title="查看当前Node版本"></a>查看当前Node版本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\WINDOWS\system32&gt;node -v</span><br><span class="line">v8.11.3</span><br></pre></td></tr></table></figure><p>基本上可以解决版本切换问题，详情可查询<a href="http://ksria.com/gnvm/" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们在平时的项目开发中，经常需要指定 Node 的版本，所有版本控制管理，就很有必要，需要哪个切哪个。&lt;br&gt;
    
    </summary>
    
      <category term="Nodejs" scheme="https://istaotao.com/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://istaotao.com/tags/Nodejs/"/>
    
      <category term="gnvm" scheme="https://istaotao.com/tags/gnvm/"/>
    
  </entry>
  
  <entry>
    <title>通俗点理解Nodejs的非阻塞及事件驱动</title>
    <link href="https://istaotao.com/2018/12/18/%E9%80%9A%E4%BF%97%E7%82%B9%E7%90%86%E8%A7%A3Nodejs%E7%9A%84%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%8F%8A%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
    <id>https://istaotao.com/2018/12/18/通俗点理解Nodejs的非阻塞及事件驱动/</id>
    <published>2018-12-18T15:58:41.000Z</published>
    <updated>2019-03-13T14:09:25.576Z</updated>
    
    <content type="html"><![CDATA[<h3 id="node-js是什么"><a href="#node-js是什么" class="headerlink" title="node.js是什么"></a>node.js是什么</h3><blockquote><p>node.js是什么？</p></blockquote><ul><li>这是一种通过JavaScript语言开发web服务端的东西</li></ul><blockquote><p>为什么我们要用node.js？</p></blockquote><ul><li>node.js有非阻塞，事件驱动I/O等特性，从而让高并发（high concurrency）在的轮询（Polling）和comet构建的应用中成为可能。<a id="more"></a><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3></li></ul><p>浏览器给网站发请求的过程一直没怎么变过。</p><p>当浏览器给网站发了请求。服务器收到了请求，然后开始搜寻被请求的资源。如果有需要，服务器还会查询一下数据库，最后把响应结果传回浏览器。</p><p>不过，在传统的web服务器中（比如<code>Apache</code>），每一个请求都会让服务器创建一个新的进程来处理这个请求。</p><p>后来有了Ajax。有了Ajax，我们就不用每次都请求一个完整的新页面了，取而代之的是，每次只请求需要的部分页面信息就可以了。</p><p>这显然是一个进步。</p><h3 id="长轮询"><a href="#长轮询" class="headerlink" title="长轮询"></a>长轮询</h3><p>但是比如你要建一个<code>FriendFeed</code>这样的社交网站（类似人人网那样的刷朋友新鲜事的网站），你的好友会随时的推送新的状态，然后你的新鲜事会实时自动刷新。</p><p>要达成这个需求，我们需要让用户一直与服务器保持一个有效连接。目前最简单的实现方法，就是让用户和服务器之间保持<code>长轮询（long polling）</code>。</p><p>HTTP请求不是持续的连接，你请求一次，服务器响应一次，然后就完了。</p><p><code>长轮询是一种利用HTTP模拟持续连接的技巧</code>。具体来说，只要页面载入了，不管你需不需要服务器给你响应信息，你都会给服务器发一个Ajax请求。这个请求不同于一般的Ajax请求，服务器不会直接给你返回信息，而是它要等着，直到服务器觉得该给你发信息了，它才会响应。</p><p>比如，你的好友发了一条新鲜事，服务器就会把这个新鲜事当做响应发给你的浏览器，然后你的浏览器就刷新页面了。浏览器收到响应刷新完之后，再发送一条新的请求给服务器，这个请求依然不会立即被响应。</p><p>于是就开始重复以上步骤。</p><p>利用这个方法，可以让浏览器始终保持等待响应的状态。虽然以上过程依然只有非持续的Http参与，但是我们模拟出了一个看似持续的连接状态。</p><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><p>我们再看传统的服务器（比如Apache）。</p><p>每次一个新用户连到你的网站上，你的服务器就得开一个连接。每个连接都需要占一个进程，这些进程大部分时间都是闲着的（比如等着你好友发新鲜事，等好友发完才给用户响应信息。或者等着数据库返回查询结果什么的）。</p><p>虽然这些进程闲着，但是照样占用内存。这意味着，如果用户连接数的增长到一定规模，你服务器没准就要耗光内存直接瘫了。</p><h3 id="非阻塞和事件驱动"><a href="#非阻塞和事件驱动" class="headerlink" title="非阻塞和事件驱动"></a>非阻塞和事件驱动</h3><p>这种情况怎么解决？</p><p>解决方法就是刚才上边说的：<em>非阻塞和事件驱动</em>。</p><p>这些概念在我们谈的这个情景里面其实没那么难理解。</p><p>你把非阻塞的服务器想象成一个loop循环，这个loop会一直跑下去。</p><p>一个新请求来了，这个loop就接了这个请求，把这个请求传给其他的进程（比如传给一个搞数据库查询的进程），然后响应一个回调（callback）。</p><p>完事了这loop就接着跑，接其他的请求。</p><p>这样下来。服务器就不会像之前那样傻等着数据库返回结果了。</p><p>如果数据库把结果返回来了，loop就把结果传回用户的浏览器，接着继续跑。</p><p>在这种方式下，你的服务器的进程就不会闲着等着。</p><p>从而在理论上说，同一时刻的数据库查询数量，以及用户的请求数量就没有限制了。服务器只在用户那边有事件发生的时候才响应，这就是事件驱动。</p><p>FriendFeed是用基于Python的非阻塞框架Tornado (知乎也用了这个框架) 来实现上面说的新鲜事功能的。不过，Node.js就比前者更妙了。</p><h3 id="再看Node-js"><a href="#再看Node-js" class="headerlink" title="再看Node.js"></a>再看Node.js</h3><p>Node.js的应用是通过javascript开发的，然后直接在Google的变态V8引擎上跑。</p><p>用了Node.js，你就不用担心用户端的请求会在服务器里跑了一段能够造成阻塞的代码了。</p><p>因为javascript本身就是事件驱动的脚本语言。</p><p>你回想一下，在给前端写javascript的时候，更多时候你都是在搞事件处理和回调函数。</p><p>javascript本身就是给事件处理量身定制的语言。</p><p>Node.js还是处于初期阶段。如果你想开发一个基于Node.js的应用，你应该会需要写一些很底层代码。</p><p>但是下一代浏览器很快就要采用<code>WebSocket</code>技术了，从而长轮询也会消失。</p><p>在Web开发里，Node.js这种类型的技术只会变得越来越重要。</p><p>英文原文：<a href="https://www.sitepoint.com/node-js-is-the-new-black/" target="_blank" rel="noopener">Node.js is the New Black</a></p><p>中文原文：<a href="https://www.zhihu.com/question/33578075/answer/56951771" target="_blank" rel="noopener">Node.js是用来做什么的？</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;node-js是什么&quot;&gt;&lt;a href=&quot;#node-js是什么&quot; class=&quot;headerlink&quot; title=&quot;node.js是什么&quot;&gt;&lt;/a&gt;node.js是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;node.js是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;这是一种通过JavaScript语言开发web服务端的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么我们要用node.js？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;node.js有非阻塞，事件驱动I/O等特性，从而让高并发（high concurrency）在的轮询（Polling）和comet构建的应用中成为可能。
    
    </summary>
    
      <category term="Nodejs" scheme="https://istaotao.com/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://istaotao.com/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>git push 报错之 Permission to userA.git denied to userB</title>
    <link href="https://istaotao.com/2018/12/17/git-push-%E6%8A%A5%E9%94%99%E4%B9%8B-Permission-to-userA-git-denied-to-userB/"/>
    <id>https://istaotao.com/2018/12/17/git-push-报错之-Permission-to-userA-git-denied-to-userB/</id>
    <published>2018-12-17T14:47:00.000Z</published>
    <updated>2019-03-13T14:01:27.973Z</updated>
    
    <content type="html"><![CDATA[<p>报错信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  git-command git:(master) git push</span><br><span class="line">remote: Permission to xxx.git denied to zguii.</span><br><span class="line">fatal: unable to access <span class="string">'https://github.com/xxx.git/'</span>: The requested URL returned error: 403</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><p>之前我有登录过其他账号，如zguii，并进行了一系列操作，后来我要使用自己的账号的时候，就会出现如上的报错信息。</p><p>刚开始嫌麻烦，我使用客户端发布操作，正常，后来，多次使用 <code>git bash</code>，就很痛苦了，索性就改一下。 </p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>既然是用户权限被占用了，而且我也不需要那个用户了，那就删除吧。</p><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新创建文件，暂时设置密码为空，并且会产生 `id_rsa`、`id_rsa.pub`，（有可能会产生 config ，但有可能是空文件）</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"yangtaobanner@foxmail.com"</span></span><br><span class="line"></span><br><span class="line">➜  git-command git:(master) ssh-keygen -t rsa -C <span class="string">"yangtaobanner@foxmail.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/yangtao/.ssh/id_rsa): </span><br><span class="line">/Users/yangtao/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/yangtao/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/yangtao/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制 `id_rsa.pub` 里的所有内容，将此粘贴到你要新建的 `SSH key`里</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line">git config --list --global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否可以连接</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line">Hi yangtao2o! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>设置完毕，再次 <code>git push</code>，额…依旧报错…<br>想到可能是缓存，好吧，清！呃呃…依然如此…</p><p>好多分钟之后，忽然想起还能访问默认账户，说明账户依然存在，笨！</p><p>然后，我就去钥匙串查看了一下 <code>github.com</code>，我去，还真是岿然不动地躺在那儿…</p><p>恶狠狠地删之！！！</p><p>然后，<code>git push</code>，输入用户、密码，熬过几秒，刷刷刷，看到了久违的 <code>Done</code></p><p>其实，归根结底，如果Git设置里的账户是你自己的，只要删除钥匙串账户就行，我竟然走了这么久的弯路，脚很疼，哦不，脑瓜子疼！</p><p>PS：MacOS 隐藏文件开启快捷键：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">command</span> + ^ + .</span><br></pre></td></tr></table></figure></p><h3 id="windows解决方法"><a href="#windows解决方法" class="headerlink" title="windows解决方法"></a>windows解决方法</h3><p><a href="https://blog.csdn.net/klxh2009/article/details/76019742" target="_blank" rel="noopener">解决 github push failed （remote: Permission to userA/repo.git denied to userB.）</a></p><p>➜ 主要是删除之前的用户，如我的之前的账户是 <code>zguii</code></p><h3 id="MacOS解决方法"><a href="#MacOS解决方法" class="headerlink" title="MacOS解决方法"></a>MacOS解决方法</h3><p><a href="https://www.jianshu.com/p/6621c42ef112" target="_blank" rel="noopener">mac下配置多个git账号并进行账号切换</a></p><p><a href="https://www.jianshu.com/p/b29a3c275f68" target="_blank" rel="noopener">解决git本地多ssh key的问题</a></p><p><a href="https://www.zybuluo.com/yangfch3/note/172120" target="_blank" rel="noopener">多个 SSH KEY 的管理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;报错信息：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  git-command git:(master) git push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Permission to xxx.git denied to zguii.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: unable to access &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/xxx.git/&#39;&lt;/span&gt;: The requested URL returned error: 403&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://istaotao.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://istaotao.com/tags/git/"/>
    
      <category term="开发工具" scheme="https://istaotao.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Git 常用命令练习</title>
    <link href="https://istaotao.com/2018/12/14/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E7%BB%83%E4%B9%A0/"/>
    <id>https://istaotao.com/2018/12/14/Git-常用命令练习/</id>
    <published>2018-12-14T14:45:16.000Z</published>
    <updated>2019-03-13T14:01:38.834Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用 <code>git bash</code> 的过程中，除了常用的那几条，其它的总需要查找手册，索性跟着大牛总结的文章走一遍吧</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Workspace: 工作区</li><li>Index / Stage: 暂存区</li><li>Repository: 仓库区（或本地仓库）</li><li>Remote: 远程仓库<a id="more"></a><img src="https://user-images.githubusercontent.com/19526072/49999253-4c690980-ffd1-11e8-892a-bff60b374d12.png" alt="image"></li></ul><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录 git-command 下新建 Git 代码库，（会生成 .git 文件）</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建目录 git-command 并将其初始化为 Git 代码库</span></span><br><span class="line">git init git-command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从线上获取一个完整的项目代码</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/yangtao2o/git-command.git</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>Git的设置文件为 <code>.gitconfig</code> ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示配置信息</span></span><br><span class="line">git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">git config --global</span><br><span class="line"></span><br><span class="line">git config --global user.name <span class="string">"yangtao"</span></span><br><span class="line">git config --global user.email <span class="string">"xxx@.qq.com"</span></span><br></pre></td></tr></table></figure><h3 id="增加、删除文件"><a href="#增加、删除文件" class="headerlink" title="增加、删除文件"></a>增加、删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">git add index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add assets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并将这次删除加入暂存区</span></span><br><span class="line">git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改文件名，并放入暂存区</span></span><br><span class="line">git mv index.html index-new.html</span><br></pre></td></tr></table></figure><h3 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 暂存区提交到仓库区 ( -m (msg) )</span></span><br><span class="line">git commit -m <span class="string">"My first commit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定文件提交</span></span><br><span class="line">git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次 commit 之后的变化，直接到仓库区</span></span><br><span class="line">git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有的 diff 信息</span></span><br><span class="line">git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的 commit ，提交上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何变化，则用来改写上一次 commit 的提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">"new commit"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次 commit ，并包括指定文件的新变化</span></span><br><span class="line">git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有的本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的远程分支 ( -r (remotes))</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有的本地分支和远程分支</span></span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">git branch primary</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，并切换至 该分支</span></span><br><span class="line">git checkout -b primary-yt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，指向指定 commit</span></span><br><span class="line">git branch [branch] [commitID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支 master-yt 到当前分支 master</span></span><br><span class="line">git merge master-yt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个 commit，合并进当前分支</span></span><br><span class="line">git cherry-pick [commitid]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">git branch -d master-ytt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出标签</span></span><br><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h2 id="参考目录"><a href="#参考目录" class="headerlink" title="参考目录"></a>参考目录</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">Git 常用命令</a></li><li><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git教程 - 廖雪峰的官方网站</a></li></ul><p><a href="https://github.com/yangtao2o/git-command" target="_blank" rel="noopener">练习 Demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用 &lt;code&gt;git bash&lt;/code&gt; 的过程中，除了常用的那几条，其它的总需要查找手册，索性跟着大牛总结的文章走一遍吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Workspace: 工作区&lt;/li&gt;
&lt;li&gt;Index / Stage: 暂存区&lt;/li&gt;
&lt;li&gt;Repository: 仓库区（或本地仓库）&lt;/li&gt;
&lt;li&gt;Remote: 远程仓库
    
    </summary>
    
      <category term="开发工具" scheme="https://istaotao.com/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://istaotao.com/tags/git/"/>
    
      <category term="开发工具" scheme="https://istaotao.com/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>小片段代码简汇之CSS篇</title>
    <link href="https://istaotao.com/2018/12/09/%E5%B0%8F%E7%89%87%E6%AE%B5%E4%BB%A3%E7%A0%81%E7%AE%80%E6%B1%87%E4%B9%8BCSS%E7%AF%87/"/>
    <id>https://istaotao.com/2018/12/09/小片段代码简汇之CSS篇/</id>
    <published>2018-12-09T13:20:11.000Z</published>
    <updated>2019-03-13T14:12:39.020Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结在平时开发中遇到的一些小问题，大概很长一段时间就会来这么一次，小片段剧场.</p></blockquote><p>Show Time:<br><a id="more"></a></p><h4 id="兼容Windows、Mac的-font-family"><a href="#兼容Windows、Mac的-font-family" class="headerlink" title="兼容Windows、Mac的 font-family"></a>兼容Windows、Mac的 font-family</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-family</span>: <span class="selector-tag">Helvetica</span> <span class="selector-tag">Neue</span> <span class="selector-tag">For</span> <span class="selector-tag">Number</span>,<span class="selector-tag">-apple-system</span>,<span class="selector-tag">BlinkMacSystemFont</span>,<span class="selector-tag">Segoe</span> <span class="selector-tag">UI</span>,<span class="selector-tag">Roboto</span>,<span class="selector-tag">PingFang</span> <span class="selector-tag">SC</span>,"<span class="selector-tag">PingFangSC-Light</span>" ,"<span class="selector-tag">Microsoft</span> <span class="selector-tag">yahei</span>", <span class="selector-tag">Arial</span>, <span class="selector-tag">Helvetica</span>, <span class="selector-tag">sans-serif</span></span><br></pre></td></tr></table></figure><h4 id="关于ios下的input输入框光标上移的问题"><a href="#关于ios下的input输入框光标上移的问题" class="headerlink" title="关于ios下的input输入框光标上移的问题"></a>关于ios下的input输入框光标上移的问题</h4><blockquote><p>一般外框设置高度为<code>auto</code>,取消掉<code>line-height</code>,input本身设置字号大小，使用padding撑开，取消’height、line-height’</p></blockquote><h4 id="下拉框箭头重写"><a href="#下拉框箭头重写" class="headerlink" title="下拉框箭头重写"></a>下拉框箭头重写</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* --ie清除--*/</span></span><br><span class="line"><span class="selector-tag">select</span><span class="selector-pseudo">::-ms-expand</span>&#123; <span class="attribute">display</span>: none; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --火狐、谷歌清除--*/</span></span><br><span class="line"><span class="selector-tag">select</span>&#123;</span><br><span class="line">  <span class="attribute">appearance</span>:none;  </span><br><span class="line">  <span class="attribute">-moz-appearance</span>:none;  </span><br><span class="line">  <span class="attribute">-webkit-appearance</span>:none;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">30px</span><span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fafafb</span> <span class="built_in">url</span>(<span class="string">"/select-logo.png"</span>) <span class="number">98%</span> <span class="number">50%</span> no-repeat<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用CSS写三角形箭头"><a href="#用CSS写三角形箭头" class="headerlink" title="用CSS写三角形箭头"></a>用CSS写三角形箭头</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wx-wper-con</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">158px</span>;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e9e9e9</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> -<span class="number">2px</span> <span class="number">#aaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wx-wper-con</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.wx-wper-con</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">9.5px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">8px</span> solid <span class="number">#dadada</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">8px</span> solid transparent;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wx-wper-con</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">8.5px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">8px</span> solid <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="border边框渐变-圆角"><a href="#border边框渐变-圆角" class="headerlink" title="border边框渐变+圆角"></a>border边框渐变+圆角</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-test</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">4px</span> solid transparent;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.border-test</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(155deg,red, blue);</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总结在平时开发中遇到的一些小问题，大概很长一段时间就会来这么一次，小片段剧场.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Show Time:&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="https://istaotao.com/categories/css/"/>
    
    
      <category term="css" scheme="https://istaotao.com/tags/css/"/>
    
  </entry>
  
</feed>
